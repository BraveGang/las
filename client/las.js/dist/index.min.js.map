{"version":3,"sources":["webpack://Las/webpack/universalModuleDefinition","webpack://Las/webpack/bootstrap","webpack://Las/./src/core/events.ts","webpack://Las/./src/utils/log.ts","webpack://Las/./src/core/errors.ts","webpack://Las/./src/types/flv-object.ts","webpack://Las/./src/core/worker-cmd.ts","webpack://Las/./node_modules/events/events.js","webpack://Las/./src/utils/browser-helper.ts","webpack://Las/./src/types/remux.ts","webpack://Las/./src/utils/aac-helper.ts","webpack://Las/./src/remux/mp4-generator.ts","webpack://Las/./src/remux/mp4-remuxer.ts","webpack://Las/./src/demux/audio-specific-config.ts","webpack://Las/./src/demux/exp-golomb.ts","webpack://Las/./src/demux/sps-parser.ts","webpack://Las/./src/utils/decode-utf8.ts","webpack://Las/./src/demux/flv/flv-script-tag-decoder.ts","webpack://Las/./src/demux/flv/flv-demuxer.ts","webpack://Las/./src/demux/flv/flv-demuxer-inline.ts","webpack://Las/./node_modules/webworkify-webpack/index.js","webpack://Las/./src/demux/flv/flv-demuxer-worker.ts","webpack://Las/./src/config.ts","webpack://Las/./src/abr/abr-get-url.ts","webpack://Las/./src/abr/abr-level.ts","webpack://Las/./src/abr/abr-manifest.ts","webpack://Las/./src/io/xhr.ts","webpack://Las/./src/utils/codec-helper.ts","webpack://Las/./src/io/fetch.ts","webpack://Las/./src/io/loader.ts","webpack://Las/./src/utils/speed-test.ts","webpack://Las/./src/abr/abr-algorithm-simple.ts","webpack://Las/./src/abr/multirate.ts","webpack://Las/./src/io/cache.ts","webpack://Las/./src/demux/flv/flv-preprocessor.ts","webpack://Las/./src/core/report-types.ts","webpack://Las/./src/core/las-main.ts","webpack://Las/./src/core/media.ts","webpack://Las/./src/core/mse.ts","webpack://Las/./src/monitor/playback-quality.ts","webpack://Las/./src/monitor/stream-monitor.ts","webpack://Las/./src/monitor/monitor.ts","webpack://Las/./src/types/monitor-data.ts","webpack://Las/./src/index.ts","webpack://Las/./src/utils/is-supported.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","LasEvents","MEDIA_INFO","MP4_SEGMENT","SCRIPT_PARSED","LOAD_END","ERROR","LEVEL_SWITCH_FAILED","LEVEL_SWITCHING","LEVEL_SWITCHED","MANIFEST_PARSED","FLV_HEAD","REPORT","HEARTBEAT","LOG_LEVEL","formatter","tag","msg","length","unshift","Log","level","ENABLE_ERROR","ENABLE_WARN","ENABLE_INFO","ENABLE_DEBUG","ENABLE_VERBOSE","LEVEL_WARN","LEVEL_INFO","LEVEL_DEBUG","LEVEL_VERBOSE","e","out","console","error","warn","log","apply","w","info","debug","v","ErrorTypes","ErrorDetails","FlvTagType","FlvSize","FLV_HEAD_LEN","FLV_TAG_HEAD_LEN","FLV_TAG_SIZE_LEN","AVC_KEY_FRAME_CHECK_LEN","FlvTag","tagType","VIDEO","dataSize","timestamp","size","cts","frameType","codecId","body","WorkerCmd","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","args","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","EventEmitter","init","_events","undefined","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","TypeError","_getMaxListeners","that","_addListener","type","prepend","events","existing","warning","newListener","emit","push","warned","Error","String","emitter","count","onceWrapper","fired","removeListener","wrapFn","arguments","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","arr","ret","Array","unwrapListeners","arrayClone","listenerCount","copy","set","arg","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","err","message","context","handler","len","listeners","addListener","on","prependListener","once","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","keys","rawListeners","eventNames","vendor","userAgent","BrowserHelper","navigator","isSafari","indexOf","match","isFirefox","test","isAndroid","TrackType","AAC_SILENT_FRAME_DATA","1","Uint8Array","2","3","4","5","6","getAACFrameDuration","samplerate","AAC_SAMPLE_DURATION","getAACSilentFrame","audioCodec","channelCount","UINT32_MAX","Math","pow","HDLR","video","audio","FTYP","STTS","STSC","STCO","STSZ","DINF","VMHD","SMHD","BTRT","MVHD_TPL","TKHD_TPL","TREX_TPL","MDHD_TPL","MP4A_STSD_TPL","AVC1_STSD_TPL","PASP_TPL","MP4","moov","tracks","byteLength","_getMoovLen","dest","data","offset","_writeMoov","videoMediaSegment","sn","baseMediaDecodeTime","track","mdatLen","mp4Samples","reduce","prev","item","units","unitLen","unit","_getMediaSegmentData","_mediaSegmentHead","samples","forEach","sample","unitData","unitDataLen","audioMediaSegment","trakLen","_getTrakLen","_getMvexLen","moovLen","_writeBoxHead","types","_writeMvhd","timescale","duration","_writeTrak","_writeMvex","_getMoofLen","sampleCount","initSegment","_writeMoof","mdat","moofLen","upperWordDuration","floor","lowerWordDuration","mvhd","_writeTkhd","id","width","height","tkhd","_getMdiaLen","trak","_writeMdia","_getMinfLen","mdiaLen","mdia","_writeMdhd","_writeMinf","mdhd","_getStblLen","minf","_writeStbl","_getStsdLen","stblLen","stbl","_writeStsd","_getMp4aStsdLen","_getAvc1StsdLen","_writeAvc1Stsd","_writeMp4aStsd","_getAvcCLen","sps","pps","_getAvc1Len","slice","avcCLen","avc1Len","stsdLen","avc1Stsd","hSpacing","pixelRatio","vSpacing","avcC","avcc","pasp","_getMp4aEsdsLen","BOX_HEAD_LEN","config","configLen","esdsLen","mp4aLen","mp4a","tmp","mvexLen","mvex","_writeTrex","trex","trafLen","sdtpLen","trunLen","trunOffset","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","moof","mfhd","traf","tfhd","tfdt","sdtp","flags","dependsOn","isDependedOn","hasRedundancy","trun","isLeading","isNonSync","degradPrio","MP4Remuxer","eventEmitter","_eventEmitter","_forceFirstIDR","_videoTimeReference","_videoTimeReferenceInfo","_extra","_nextAudioPTS","_nextVideoDTS","_initPTS","_videoLastPTS","_audioLastPTS","_videoSampleDuration","_moovs","gopRemux","toLowerCase","resetMoov","_clearVideoTimeReference","setExtra","resetTimeStamp","getLastPTS","flush","videoData","sequenceNumber","_remuxVideo","remux","audioTrack","videoTrack","timeOffset","isContinuous","isFlush","_initMP4","audioData","pts","dts","_remuxAudio","codec","_fillEmptyAudio","startPTS","endPTS","streamDTS","segments","extra","initPTS","audioSamples","videoSamples","mediaInfo","moovs","audioSampleRate","hasAudio","defaultAudioCodec","defaultCodec","inputTimescale","inputTimeScale","videoCodec","fps","profile","chromaFormat","hasVideo","videoInitPTS","videoInitDTS","min","MUX_ERROR","details","DEMUX_ERROR","fatal","reason","activeTimeReference","sampleDuration","samplesCount","nextVideoDTS","sort","a","b","firstDTS","max","firstPTS","round","mp4SampleLength","videoSample","nextSample","nextSampleCts","lastSample","nextVideoPTS","payload","_getMoovByType","startDTS","endDTS","lastPTS","inputAudioTimeScale","scaleFactor","inputSampleDuration","firstAudioPTS","inputSamples","nextAudioPTS","frameDuration","nextPTS","audioSample","delta","abs","fillCount","j","fillFrame","subarray","start","end","ceil","time","result","SAMPLING_FREQUENCY_LIST","ExpGolomb","_data","_byteIndex","_bitIndex","skipBits","bitLen","bitRemaining","bitMove","bits","byte","readBitLen","shiftLeft","ue","_leadingZeroCount","se","AspectRatio","ChromaFormat","Profile","66","77","88","100","110","122","244","ProfileIDCList","SPSParser","parse","spsData","profileIDC","levelIDC","chromaFormatIDC","scalingListCount","_skipScalingList","picOrderCntType","num","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","pixelAspectRatio","aspectRatioIDC","numUnitsInTick","timeScale","cropUnitX","cropUnitY","toFixed","lastScale","nextScale","decodeUTF8","unicode","fromCodePoint","FlvScriptTagDecoder","decode","source","view","DataView","_read","getUint8","getFloat64","_readString","_isObjectEnd","_readObjProperty","getUint32","_readDate","_readLongString","getInt16","obj","getUint16","buffer","byteOffset","tz","Date","FlvDemux","remuxer","_remuxer","_naluLengthSize","_hasVideo","_hasAudio","_videoTrack","_audioTrack","_remuxStat","_audioLastDTS","_videoLastDTS","_nonMonotonousTagCache","_audioCodec","_videoCodec","codecWidth","codecHeight","append","tags","_parseVideoData","AUDIO","_parseAudioData","SCRIPT","_parseScriptTag","_remux","setCodecs","flvHead","destroy","reset","scriptData","onMetaData","framerate","spec","packetType","_parseAVCDecoderConfigurationRecord","_parseAVCVideoData","_onError","dataOffset","arrayBuffer","version","avcProfile","spsCount","spsList","codecArray","codecString","h","toString","ppsCount","fromNonMonotonousCache","lengthSize","keyframe","_onNonMonotonous","_flushNonMonotonousCache","naluSize","avcSample","aacFrameLen","aacData","dtsDiff","threshold","aacSample","audioObjectType","samplingFrequencyIndex","extensionSamplingFrequencyIndex","channelConfiguration","parseAudioSpecificConfig","cache","ptsSync","audiotrack","videotrack","REMUX_ERROR","FlvDemuxerInline","extraData","_config","_extraData","_demuxer","FlvDemuxer","webpackBootstrapFunc","configurable","oe","f","ENTRY_MODULE","default","quoteRegExp","str","replace","getModuleDependencies","sources","queueName","retval","fnString","wrapperSignature","webpackRequireName","re","RegExp","exec","hasValuesInQueues","queues","hasValues","options","main","requiredModules","all","modulesQueue","seenModules","moduleToCheck","newModules","newModulesKeys","getRequiredModules","src","filter","entryModule","JSON","stringify","map","join","blob","window","Blob","bare","workerUrl","URL","webkitURL","mozURL","msURL","createObjectURL","worker","Worker","objectURL","self","flv","postMessage","event","payloads","element","addEventListener","cmd","INIT","DESTROY","APPEND_DATA","SET_CODECS","FLUSH","SET_EXTRA","DEFAULT_CONFIG","webWorker","appendErrorMaxRetry","credentials","defaultLiveDelay","LEVEL_ERROR","connectionTimeout","transmissionTimeout","autoRecoverMedia","ConfigHelper","processConfig","userConfig","abrGetUrl","url","spts","split","splice","AbrLevel","bitrate","maxBitrate","avgBitrate","qualityType","qualityTypeName","hidden","disabledFromAdaptive","defaultSelected","XHR_TYPE","AbrManifest","manifest","_levels","_abrLevels","_default","verify","adaptationSet","representation","codecs","isArray","FetchLoader","_context","_callbacks","_controller","_reader","_abort","isSupport","fetch","ReadableStream","load","callbacks","reqHeaders","Headers","headers","header","params","method","referrerPolicy","signal","_getAbortSignal","then","res","responseUrl","responseHeader","onConnect","status","ok","getReader","cancel","responseType","progress","_pump","responseData","_onEnd","text","statusText","catch","abort","_onProgress","chunk","onProgress","onEnd","onError","reader","read","done","AbortController","ChunkLoader","XHR","_xhr","_msBufferOffset","_msBufferUpper","_progress","UNKNOW","isSupportChunk","supportChunk","xhr","XMLHttpRequest","open","MOZ_CHUNK","UNSUPPORT","MS_STREAM","MSStreamReader","onprogress","_msrOnProgress","onload","_onLoadEnd","onerror","onreadystatechange","_onReadyStateChange","withCredentials","send","readyState","responseURL","getAllResponseHeaders","readAsArrayBuffer","response","Loader","_loader","_loaderCallback","_stats","_retryDelay","_loading","_aborted","_requestTimeout","_transTimer","_retryTimeout","_progressTime","_onConnect","clearTimeout","_startTransmissionTimer","httpStatusCode","firstDataTime","requestStartTime","performance","now","stats","loadedSize","_stopTimer","totalSize","loadedTime","_destroyInternalLoader","fatalError","maxRetry","retryCount","errorMessage","setTimeout","_loadInternal","_onTimeout","_abortInternal","useFetch","retryDelay","_getInternalLoader","onAbort","_stopTransmissionTimer","timeout","setInterval","clearInterval","SpeedTest","_result","_callback","_loaderConf","_loaderCallbacks","_timer","_startTime","_testEnd","firstPackageDuration","loaded","_onLoaderError","succeeded","_onLoaderEnd","_onAbort","callback","loaderContext","_startTimer","CONFIG","stableBufferDiffThresholdSecond","stableBufferIntervalMs","speedTestTimeoutMs","generateSpeedGapMs","bufferCheckIntervalMs","smoothedSpeedUtilizationRatio","smallSpeedToBitrateRatio","enoughSpeedToBitrateRatio","bufferLowerLimitSecond","recentBufferedSize","smoothedSpeedRatio","isSpeedFullyUsed","AbrAlgorithmSimple","_conf","_pastBuffer","_current","_next","_stableBufferStartTime","_speedTester","_generatedSpeed","_lastCheckBuffer","_lastSpeed","levels","_checkBuffer","_updateStableBuffer","buffered","diff","diffRatio","_isSpeedFullyUsed","bufferedSec","isBufferStable","_startTesting","lastDownloadSize","downloadSize","testedBitrate","originalDownloadSize","testedSpeed","setAvailableBitrates","onGOP","speed","_nextRateIndex","onLevelLoad","_quantization","_nextRateBySpeedAndBuffered","_getSmoothedSpeed","_getPredictedBuffer","_getBufferSpeed","pastBuffer","_isSpeedTooSmall","_isSpeedEnough","bufferSpeed","smoothedSpeed","predictedBuffered","nextIndex","Multirate","media","_media","_downloadSizeTotal","_downloadSize","_downloadStartTime","_keyCount","_index","_alg","_manifest","_autoLevelEnabled","abrLevels","current","nextLevel","currentLevel","destory","onLoaderChunk","onKeyFrame","next","_getRequestUrl","Cache","_size","_readOffset","_writeOffset","_storage","_cache","DEFAULT_CACHE_SIZE","ArrayBuffer","put","expected","_collateCache","expandCache","skip","clear","MAX_CACHE_SIZE","_transfer","remain","sourceView","destView","FlvPreprocessor","onFlvKeyframe","_tag","_parseLen","_parseFunc","_onFlvKeyframe","_parseFlvHead","callbackResult","processing","input","unreadLen","_parseFlvTagHead","_detectKeyFrame","_parseFlvTag","REPORT_TYPES","URL_REG","LasMain","_w","_flv","_multirate","_isContinuous","_remuxId","_baseTimeSec","_tagDump","_currentUrl","_isAbr","_src","_onWorkerEvent","ev","_onEvent","_flvKeyframeCallback","hasStreamTime","updateStreamTime","mp4Data","remuxId","segment","_onLoaderProgress","timeCost","_append","getLocalTime","startSec","smooth","_load","_onLoaderAbort","errInfo","NETWORK_ERROR","LOAD_ERROR_TIMEOUT","LOAD_ERROR","work","OTHER_ERROR","MANIFEST_ERROR","mr","_destroyLoader","removeEventListener","terminate","_updateCodecs","sync","_refreshRemuxId","autoLevelEnabled","currentTime","Media","_video","_mse","_streamTime","_localTime","attachVideo","attachMSE","mse","isTimeinBuffered","sec","bufferedSecByType","bufferedEndByType","mseBufferedSecByType","bufferedByType","bufferSliceNumByType","pendingNum","pendingSecByType","currentBuffer","nextBuffer","streamTime","localTime","MSE","_sourceBuffer","_mediaSource","_mimeCodec","_cleanUpTask","_appendQueue","_endOfData","_appendEnabled","_duration","_appendError","_appendBufferError","_sbHandler","_onSourceOpen","_checkSourceBuffer","refresh","_onSourceEnded","_onSourceClose","_onSourceBufferUpdateEnd","_update","_endOfStream","_onSourceBufferError","MSE_ERROR","SOURCEBUFFER_ERROR","audiovideo","attach","MediaSourceDef","MediaSource","WebKitMediaSource","ms","MEDIASOURCE_ERROR","mediaInit","hasSourceBuffer","updateend","mediaSegment","sb","_addSourceBuffer","addSourceBuffer","ADDSOURCEBUFFER_ERROR","_hasPendingData","_doAppend","_getBufferQueueSize","APPENDBUFFER_ERROR","updating","_appendBuffer","_calculateRemoveRange","seeking","task","_cleanUpRange","range","bufEnd","removeStart","removeEnd","remove","appendBuffer","code","useless","hasCleanUpTask","_cleanUp","endSec","flushType","POSITIVE_INFINITY","setAppendEnabled","getAppendEnabled","endOfData","ended","endOfStream","ENDOFSTREAM_ERROR","removeSourceBuffer","getBufferQueueSec","prevDuration","currentSegment","PlaybackQuality","_lastDroppedFrames","_lastDecodedFrames","_isVideoPlaybackQualityAvailable","_lastTime","_decoded","_dropped","attachMedia","HTMLVideoElement","getVideoPlaybackQuality","videoPlaybackQuality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","getInfo","decoded","dropped","currentPeriod","currentDropped","currentDecoded","droppedFPS","decodedFPS","parseFloat","StreamMonitor","_qos","traffic","streams","download","keyFrame","onStreamOpen","startPos","loadTimeCost","videoDataRate","audioDataRate","onMediaInfo","loadingInfo","onDataReceive","onMediaSegment","qos","stream","totalLen","getInfoByTime","updateStartPos","tsEnd","ts","Monitor","_playbackQuality","_playing","_sm","_hbTimer","_heartbeat","_refresh","sm","hb","totalReceive","downloadSpeed","decodedFrames","droppedFrames","loadStartTime","firstFrameTime","blockDuration","blockCount","downloadedBytes","onReport","_stopHeartbeat","onLoad","_startHeartbeat","onSegmentInit","onLoadeddata","_onFirstFrame","_waitingEnd","onCanplay","onPlaying","onWaiting","block","_waitingStart","onStopLoad","onSegment","playbackQualityInfo","bufferingStartMS","STAT","Las","_lasMain","_stat","_audioCodecSwap","_error","_recoverMediaErrorTime","_mainTimer","_nextLevel","_mediaInfo","_loadStopped","_seekOnUpdateEnd","_playingLevel","_startLevel","_monitor","_onVideoLoadeddata","_onVideoCanplay","NONE","_checkLevelChange","paused","_onVideoPlaying","_onVideoWaiting","WAITING","_onVideoEnded","_onVideoError","_recoverSwapRemuxType","_recoverSwapAudioCodec","MEDIA_ERROR","VIDEO_ERROR","_resetMSE","revokeObjectURL","removeAttribute","_destroyMSE","_initMSE","_mainLoop","SEEK","SELECT_BITRATE","jumpTo","_internalSeek","_startMainTimer","_initMonitor","UNSUPPORTED","CONFIG_ERROR","mediaSource","sourceBuffer","SourceBuffer","WebKitSourceBuffer","isTypeSupported","sourceBufferValidAPI","streaming","__VERSION__","_bindVideoEvents","NO_VIDEO","resume","play","_stopMonitor","_stopMainTimer","_unbindVideoEvents","_stopVideo","reuseMSE","_reload","stopLoad","_destroyLasMain","getMediaInfo","_initLasMain","_verifyLevel","_bindLasMainEvent","lasMain"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Las\"] = factory();\n\telse\n\t\troot[\"Las\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:38:52 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:41:35\n * las.js事件定义\n */\nconst LasEvents = {\n    // 视频头信息事件，读取到视频头信息时触发\n    MEDIA_INFO: 'mediaInfo',\n    // remux一次MP4 Segment触发一次\n    MP4_SEGMENT: 'mp4Segment',\n    // 读取到flv script tag时触发\n    SCRIPT_PARSED: 'scriptParsed',\n    // http请求正常结束时触发\n    LOAD_END: 'loadEnd',\n    // 错误时触发\n    ERROR: 'lasError',\n    // 清晰度切换失败时触发\n    LEVEL_SWITCH_FAILED: 'levelSwitchFailed',\n    // 清晰度开始切换时触发\n    LEVEL_SWITCHING: 'levelSwitching',\n    // 清晰度切换完成时触发\n    LEVEL_SWITCHED: 'levelSwitched',\n    // manifest解析完成时触发\n    MANIFEST_PARSED: 'manifestParsed',\n    // 读取到flv头时触发\n    FLV_HEAD: 'flvHead',\n    // 通知事件\n    REPORT: 'report',\n    // 心跳事件\n    HEARTBEAT: 'heartbeat',\n};\n\nexport default LasEvents;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:45:39 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:45:39 \n * log工具\n */\nconst GLOBAL_TAG = 'las.js-';\nconst FORCE_GLOBAL_TAG = true;\n\n/**\n * 处理log参数\n * @param tag tag\n * @param msg msg\n */\nfunction formatter(tag: string, msg: any[]): any[] {\n    if (!msg || msg.length === 0) {\n        msg = [tag];\n        tag = '';\n    }\n    tag = FORCE_GLOBAL_TAG ? GLOBAL_TAG + (tag ? '::' + tag : '') : tag || GLOBAL_TAG;\n    msg.unshift('[' + tag + '] > ');\n\n    return msg;\n}\n\nenum LOG_LEVEL {\n    LEVEL_ERROR = 'e', // 日志等级-error，只输出error日志\n    LEVEL_WARN = 'w', // 日志等级-warn，输出error，warn日志\n    LEVEL_INFO = 'i', // 日志等级-info，输出error, warn, info日志\n    LEVEL_DEBUG = 'd', // 日志等级-debug，输出error, warn, info, debug日志\n    LEVEL_VERBOSE = 'v' // 日志等级-verbose，输出error, warn, info, debug, verbose日志\n}\n\n/**\n * log信息输出\n */\nclass Log {\n    public static ENABLE_ERROR: boolean = true;\n    public static ENABLE_WARN: boolean = false;\n    public static ENABLE_INFO: boolean = false;\n    public static ENABLE_DEBUG: boolean = false;\n    public static ENABLE_VERBOSE: boolean = false;\n\n    /**\n     * 设置日志输出等级\n     * @param l 日志等级\n     */\n    static level(l: LOG_LEVEL) {\n        Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = Log.ENABLE_DEBUG = Log.ENABLE_VERBOSE = false;\n        switch (l) {\n            case LOG_LEVEL.LEVEL_WARN:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = true;\n                break;\n            case LOG_LEVEL.LEVEL_INFO:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = true;\n                break;\n            case LOG_LEVEL.LEVEL_DEBUG:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = Log.ENABLE_DEBUG = true;\n                break;\n            case LOG_LEVEL.LEVEL_VERBOSE:\n                Log.ENABLE_ERROR = Log.ENABLE_WARN = Log.ENABLE_INFO = Log.ENABLE_DEBUG = Log.ENABLE_VERBOSE = true;\n                break;\n            default:\n                Log.ENABLE_ERROR = true;\n                break;\n        }\n    }\n\n    /**\n     * error日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static e(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_ERROR) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.error || console.warn || console.log).apply(console, out);\n    }\n\n    /**\n     * warn日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static w(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_WARN) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.warn || console.log).apply(console, out);\n    }\n\n    /**\n     * info日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static i(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_INFO) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.info || console.log).apply(console, out);\n    }\n\n    /**\n     * debug日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static d(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_DEBUG) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        (console.debug || console.log).apply(console, out);\n    }\n\n    /**\n     * verbose日志\n     * @param tag tag\n     * @param msg 日志信息\n     */\n    static v(tag: string, ...msg: any[]) {\n        if (!Log.ENABLE_VERBOSE) {\n            return;\n        }\n        const out: any = formatter(tag, msg);\n        console.log.apply(console, out);\n    }\n}\n\nexport { Log, LOG_LEVEL };\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:38:33 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:39:19\n * las.js中的错误相关定义\n */\n/**\n * las.js错误类型定义\n */\nexport enum ErrorTypes {\n    // 网络错误\n    NETWORK_ERROR = 'networkError',\n    // video错误\n    MEDIA_ERROR = 'mediaError',\n    // 转封装错误\n    MUX_ERROR = 'muxError',\n    // 其他错误\n    OTHER_ERROR = 'otherError',\n    // MSE错误\n    MSE_ERROR = 'mseError'\n};\n\n/**\n * las.js具体错误定义\n */\nexport enum ErrorDetails {\n    // 网络错误\n    LOAD_ERROR = 10,\n    // 网络超时错误\n    LOAD_ERROR_TIMEOUT = 11,\n    // HTMLMediaElement发生错误\n    VIDEO_ERROR = 101,\n    // 浏览器不支持\n    UNSUPPORTED = 102,\n    // 配置文件错误\n    CONFIG_ERROR = 103,\n    // 传入视频信息错误\n    MANIFEST_ERROR = 104,\n    // 找不到video\n    NO_VIDEO = 105,\n    // mediaSourceError 初始化MSE错误，MediaSource未定义时触发\n    MEDIASOURCE_ERROR = 200,\n    // addSourceBufferError MSE增加SourceBuffer失败\n    ADDSOURCEBUFFER_ERROR = 201,\n    // sourceBufferError MSE的SourceBuffer触发错误\n    SOURCEBUFFER_ERROR = 202,\n    // endOfStreamError MSE结束流错误\n    ENDOFSTREAM_ERROR = 203,\n    // appendBufferError MSE填充buffer错误\n    APPENDBUFFER_ERROR = 204,\n    // 解封装错误\n    DEMUX_ERROR = 301,\n    // 重新封装错误\n    REMUX_ERROR = 302,\n    // 重新封装alloc mdat存储错误\n    REMUX_ALLOC_ERROR = 303,\n};\n\n/**\n * las.js错误事件返回数据定义\n */\nexport type ErrorData = {\n    type: ErrorTypes,\n    details: ErrorDetails,\n    fatal: boolean,\n    info: {\n        reason: string,\n        url?: string,\n        httpStatusCode?: number\n    }\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:46:33 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:46:33 \n * flv格式相关定义\n */\n/**\n * flv tag类型\n */\nexport enum FlvTagType {\n    AUDIO = 8,\n    VIDEO = 9,\n    SCRIPT = 18\n}\n\n/**\n * flv主要字段长度定义\n */\nexport const FlvSize = {\n    FLV_HEAD_LEN: 13,\n    FLV_TAG_HEAD_LEN: 11,\n    FLV_TAG_SIZE_LEN: 4,\n    AVC_KEY_FRAME_CHECK_LEN: 2\n}\n\n/**\n * flv tag定义\n */\nexport class FlvTag {\n    public tagType: FlvTagType = FlvTagType.VIDEO;\n    public dataSize: number = 0;\n    public timestamp: number = 0;\n    public size: number = 0;\n    public cts: number = 0;\n    public frameType: number = 0;\n    public codecId: number = 0;\n    public body: Uint8Array | null = null;\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:41:25 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:41:25 \n * worker通信定义\n */\nexport enum WorkerCmd {\n    // 初始化worker\n    INIT = 'init',\n    // 收到flv头\n    FLV_HEAD = 'flvHead',\n    // 设置codec\n    SET_CODECS = 'setCodecs',\n    // 清空数据\n    FLUSH = 'flush',\n    // 传入数据\n    APPEND_DATA = 'appendData',\n    // 下载结束\n    LOAD_END = 'loadEnd',\n    // 销毁\n    DESTROY = 'destroy',\n    // 设置扩展数据\n    SET_EXTRA = 'setExtra'\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:44:00 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 16:16:15\n * 浏览器ua解析，用于浏览器兼容性处理\n */\ninterface IBrowserHelper {\n    isSafari: boolean,\n    isFirefox: boolean,\n    isAndroid: boolean,\n}\n\n/**\n * 浏览器类型检测，用于处理浏览器兼容性问题\n */\nconst BrowserHelper: IBrowserHelper = ((): IBrowserHelper => {\n    let vendor = navigator.vendor;\n    let userAgent = navigator.userAgent;\n    return {\n        isSafari: !!(vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS')),\n        isFirefox: /firefox/i.test(userAgent),\n        isAndroid: /android/i.test(userAgent),\n    };\n})();\n\nexport default BrowserHelper;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:47:05 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 15:28:59\n * 转封装相关类型定义\n */\nexport enum TrackType {\n    video = 'video',\n    audio = 'audio'\n}\n\n/**\n * 音视频描述\n */\nexport type Track = {\n    id: number;\n    type: TrackType;\n    codec: string;\n    defaultCodec?: string;\n    timescale: number;\n    duration: number;\n    samples: Sample[];\n    mp4Samples: MP4Sample[];\n    inputTimescale: number;\n    sequenceNumber: number;\n    sampleDuration: number;\n}\n\n/**\n * 音频数据描述\n */\nexport type AudioTrack = {\n    samples: AudioSample[];\n    mp4Samples: MP4AudioSample[];\n    config: number[];\n    samplerate: number;\n    channelCount: number;\n} & Track;\n\n/**\n * 视频数据描述\n */\nexport type VideoTrack = {\n    samples: VideoSample[];\n    mp4Samples: MP4VideoSample[];\n    width: number;\n    height: number;\n    codecWidth: number;\n    codecHeight: number;\n    sps: Uint8Array[];\n    pps: Uint8Array[];\n    pixelRatio: number[];\n    profile: string;\n    level: string;\n    chromaFormat: string;\n    fps: number;\n} & Track;\n\n/**\n * demux读取的sample描述\n */\nexport type Sample = {\n    pts: number;\n    dts: number;\n    streamDTS: number;\n}\n\n/**\n * demux读取的音频sample描述\n */\nexport type AudioSample = {\n    unit: Uint8Array;\n} & Sample;\n\n/**\n * demux读取的视频sample描述\n */\nexport type VideoSample = {\n    key: boolean;\n    cts: number;\n    units: Uint8Array[];\n} & Sample;\n\n/**\n * 用于生成mp4的sample描述\n */\nexport type MP4Sample = {\n    cts: number,\n    len: number,\n    duration: number,\n    streamDTS: number,\n    flags: {\n        isLeading: number,\n        isDependedOn: number,\n        hasRedundancy: number,\n        degradPrio: number,\n        dependsOn: number,\n        isNonSync: number,\n    }\n};\n\n/**\n * 用于生成mp4的音频sample描述\n */\nexport type MP4AudioSample = {\n    unit: Uint8Array;\n} & MP4Sample;\n\n/**\n * 用于生成mp4的视频sample描述\n */\nexport type MP4VideoSample = {\n    units: Uint8Array[];\n} & MP4Sample;\n\n/**\n * remux后的MP4segment\n */\nexport type MP4Segment = {\n    payload: Uint8Array,\n    startPTS: number,\n    endPTS: number,\n    startDTS: number,\n    endDTS: number,\n    type: TrackType,\n    streamDTS: number\n};\n\n/**\n * remux结果\n */\nexport type MP4RemuxResult = {\n    segments: MP4Segment[],\n    extra: any;\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:43:15 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:43:56\n * aac工具，获取aac控制，计算frame长度\n */\nexport const AAC_SAMPLE_DURATION = 1024;\n\nconst AAC_SILENT_FRAME_DATA: Record<string, Record<number, Uint8Array>> = {\n    'mp4a.40.2': {\n        1: new Uint8Array([0, 200, 0, 128, 35, 128]),\n        2: new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]),\n        3: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142]),\n        4: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2, 56]),\n        5: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 56]),\n        6: new Uint8Array([0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0, 33, 144, 2, 0, 178, 0, 32, 8, 224]),\n    },\n    'mp4a.40.5': {\n        1: new Uint8Array([1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]),\n        2: new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]),\n        3: new Uint8Array([1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6, 241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94]),\n    }\n}\n\n\n/**\n * 计算单帧aac长度 ms\n * @param samplerate 音频samplerate\n */\nexport function getAACFrameDuration(samplerate: number): number {\n    return AAC_SAMPLE_DURATION * 1000 / samplerate;\n}\n\n/**\n * 获取静音音频数据\n * @param audioCodec 音频codec\n * @param channelCount 声道数量\n */\nexport function getAACSilentFrame(audioCodec: string, channelCount: number): Uint8Array | undefined {\n    if (!AAC_SILENT_FRAME_DATA[audioCodec]) {\n        audioCodec = 'mp4a.40.5';\n    }\n    return AAC_SILENT_FRAME_DATA[audioCodec][channelCount];\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:47:47 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:48:11\n * 生成fragmented mp4\n */\nimport { AudioTrack, Track, TrackType, VideoTrack } from '../types/remux';\nconst UINT32_MAX = Math.pow(2, 32) - 1;\nconst BOX_HEAD_LEN = 8;\n\ntype DestData = {\n    data: Uint8Array;\n    offset: number;\n}\n\nconst HDLR: Record<string, Uint8Array> = {\n    video: new Uint8Array([\n        0, 0, 0, 45,\n        104, 100, 108, 114,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        118, 105, 100, 101,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        86, 105, 100, 101,\n        111, 72, 97, 110,\n        100, 108, 101, 114,\n        0\n    ]),\n    audio: new Uint8Array([\n        0, 0, 0, 45,\n        104, 100, 108, 114,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        115, 111, 117, 110,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        0, 0, 0, 0,\n        83, 111, 117, 110,\n        100, 72, 97, 110,\n        100, 108, 101, 114,\n        0\n    ])\n};\nconst FTYP = new Uint8Array([\n    0, 0, 0, 24,\n    102, 116, 121, 112,\n    105, 115, 111, 109,\n    0, 0, 0, 1,\n    105, 115, 111, 109,\n    97, 118, 99, 49\n]);\n\nconst STTS = new Uint8Array([\n    0, 0, 0, 16,\n    115, 116, 116, 115,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\nconst STSC = new Uint8Array([\n    0, 0, 0, 16,\n    115, 116, 115, 99,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\nconst STCO = new Uint8Array([\n    0, 0, 0, 16,\n    115, 116, 99, 111,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst STSZ = new Uint8Array([\n    0, 0, 0, 20,\n    115, 116, 115, 122,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst DINF = new Uint8Array([\n    0, 0, 0, 36,\n    100, 105, 110, 102,\n    0, 0, 0, 28,\n    100, 114, 101, 102,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 12,\n    117, 114, 108, 32,\n    0, 0, 0, 1\n]);\n\nconst VMHD = new Uint8Array([\n    0, 0, 0, 20,\n    118, 109, 104, 100,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst SMHD = new Uint8Array([\n    0, 0, 0, 16,\n    115, 109, 104, 100,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst BTRT = new Uint8Array([\n    0, 0, 0, 20,\n    98, 116, 114, 116,\n    0, 28, 156, 128,\n    0, 45, 198, 192,\n    0, 45, 198, 192\n]);\n\nconst MVHD_TPL = new Uint8Array([\n    0, 0, 0, 120,\n    109, 118, 104, 100,\n    1, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 3,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    1, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    64, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    255, 255, 255, 255\n]);\n\nconst TKHD_TPL = new Uint8Array([\n    0, 0, 0, 104,\n    116, 107, 104, 100,\n    1, 0, 0, 7,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 3,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    64, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0\n]);\n\nconst TREX_TPL = new Uint8Array([\n    0, 0, 0, 32,\n    116, 114, 101, 120,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 0, 1\n]);\nconst MDHD_TPL = new Uint8Array([\n    0, 0, 0, 44,\n    109, 100, 104, 100,\n    1, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 2,\n    0, 0, 0, 0,\n    0, 0, 0, 3,\n    0, 0, 172, 68,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    85, 196, 0, 0\n]);\n\nconst MP4A_STSD_TPL = new Uint8Array([\n    0, 0, 0, 93,\n    115, 116, 115, 100,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 77,\n    109, 112, 52, 97,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 2, 0, 16,\n    0, 0, 0, 0,\n    172, 68, 0, 0,\n    0, 0, 0, 41,\n    101, 115, 100, 115,\n    0, 0, 0, 0,\n    3, 27, 0, 1,\n    0, 4, 19, 64,\n    21, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    5\n]);\n\nconst AVC1_STSD_TPL = new Uint8Array([\n    0, 0, 0, 185,\n    115, 116, 115, 100,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 169,\n    97, 118, 99, 49,\n    0, 0, 0, 0,\n    0, 0, 0, 1,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    5, 0, 2, 208,\n    0, 72, 0, 0,\n    0, 72, 0, 0,\n    0, 0, 0, 0,\n    0, 1, 18, 100,\n    97, 105, 108, 121,\n    109, 111, 116, 105,\n    111, 110, 47, 104,\n    108, 115, 46, 106,\n    115, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 0,\n    0, 0, 0, 24,\n    17, 17\n])\n\nconst PASP_TPL = new Uint8Array([\n    0, 0, 0, 16,\n    112, 97, 115, 112,\n    0, 0, 0, 1,\n    0, 0, 0, 1\n]);\n\nclass MP4 {\n    static types: Record<string, number[]> = {\n        'avc1': [97, 118, 99, 49],\n        'avcC': [97, 118, 99, 67],\n        'btrt': [98, 116, 114, 116],\n        'dinf': [100, 105, 110, 102],\n        'dref': [100, 114, 101, 102],\n        'esds': [101, 115, 100, 115],\n        'ftyp': [102, 116, 121, 112],\n        'hdlr': [104, 100, 108, 114],\n        'mdat': [109, 100, 97, 116],\n        'mdhd': [109, 100, 104, 100],\n        'mdia': [109, 100, 105, 97],\n        'mfhd': [109, 102, 104, 100],\n        'minf': [109, 105, 110, 102],\n        'moof': [109, 111, 111, 102],\n        'moov': [109, 111, 111, 118],\n        'mp4a': [109, 112, 52, 97],\n        'mvex': [109, 118, 101, 120],\n        'mvhd': [109, 118, 104, 100],\n        'pasp': [112, 97, 115, 112],\n        'sdtp': [115, 100, 116, 112],\n        'stbl': [115, 116, 98, 108],\n        'stco': [115, 116, 99, 111],\n        'stsc': [115, 116, 115, 99],\n        'stsd': [115, 116, 115, 100],\n        'stsz': [115, 116, 115, 122],\n        'stts': [115, 116, 116, 115],\n        'tfdt': [116, 102, 100, 116],\n        'tfhd': [116, 102, 104, 100],\n        'traf': [116, 114, 97, 102],\n        'trak': [116, 114, 97, 107],\n        'trun': [116, 114, 117, 110],\n        'trex': [116, 114, 101, 120],\n        'tkhd': [116, 107, 104, 100],\n        'vmhd': [118, 109, 104, 100],\n        'smhd': [115, 109, 104, 100]\n    };\n\n    /**\n     * 获取当前音视频的moov\n     * @param tracks 音视频描述数据\n     */\n    public static moov<T extends Track>(tracks: T[]): Uint8Array {\n        // 建立空moov\n        const len = FTYP.byteLength + MP4._getMoovLen(tracks);\n        const dest = { data: new Uint8Array(len), offset: 0 };\n        // 写入\n        dest.data.set(FTYP, 0);\n        dest.offset += FTYP.byteLength;\n        MP4._writeMoov(dest, tracks);\n        return dest.data;\n    }\n\n    /**\n     * 获取当前视频的segment数据\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 视频数据\n     * @param moov moov box数据\n     */\n    public static videoMediaSegment(sn: number, baseMediaDecodeTime: number, track: Track, moov?: Uint8Array): Uint8Array {\n        // 计算mdat长度\n        let mdatLen = 8 + (<VideoTrack>track).mp4Samples.reduce((prev, item) => {\n            return prev + item.units.reduce((unitLen, unit) => {\n                return unitLen + unit.byteLength + 4;\n            }, 0);\n        }, 0);\n        let d = MP4._getMediaSegmentData(track, mdatLen, moov);\n        MP4._mediaSegmentHead(d, sn, baseMediaDecodeTime, track, mdatLen, moov);\n        (<VideoTrack>track).samples.forEach(sample => {\n            sample.units.forEach(unitData => {\n                const unitDataLen = unitData.byteLength;\n                d.data[d.offset] = unitDataLen >> 24 & 0xff;\n                d.data[d.offset + 1] = unitDataLen >> 16 & 0xff;\n                d.data[d.offset + 2] = unitDataLen >> 8 & 0xff;\n                d.data[d.offset + 3] = unitDataLen & 0xff;\n                d.data.set(unitData, d.offset + 4);\n                d.offset += 4 + unitDataLen;\n            });\n            delete sample.units;\n        });\n        return d.data;\n    }\n\n    /**\n     * 获取当前音频的segment数据\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 音频数据\n     * @param moov moov\n     */\n    public static audioMediaSegment(sn: number, baseMediaDecodeTime: number, track: Track, moov?: Uint8Array): Uint8Array {\n        let mdatLen = 8 + (<AudioTrack>track).mp4Samples.reduce((prev, item) => {\n            return prev + item.unit.byteLength;\n        }, 0);\n        let d = MP4._getMediaSegmentData(track, mdatLen, moov);\n        MP4._mediaSegmentHead(d, sn, baseMediaDecodeTime, track, mdatLen, moov);\n\n        (<AudioTrack>track).mp4Samples.forEach(sample => {\n            d.data.set(sample.unit, d.offset);\n            d.offset += sample.unit.byteLength;\n            delete sample.unit;\n        });\n        return d.data;\n    }\n\n    /**\n     * 计算moov头的长度\n     * @param tracks 音视频轨数据\n     */\n    private static _getMoovLen(tracks: Track[]): number {\n        const trakLen = tracks.reduce((prev, item) => {\n            return prev + MP4._getTrakLen(item)\n        }, 0);\n        return BOX_HEAD_LEN + MVHD_TPL.byteLength + trakLen + MP4._getMvexLen(tracks);\n    }\n\n    /**\n     * 向目标数据写入moov\n     * @param dest 写入目标\n     * @param tracks 音视频轨数据\n     */\n    private static _writeMoov(dest: DestData, tracks: Track[]): void {\n        let moovLen = MP4._getMoovLen(tracks);\n        MP4._writeBoxHead(dest, MP4.types.moov, moovLen);\n        MP4._writeMvhd(dest, tracks[0].timescale, tracks[0].duration);\n        tracks.forEach(item => {\n            MP4._writeTrak(dest, item);\n        });\n        MP4._writeMvex(dest, tracks);\n    }\n\n    /**\n     * 计算moof box长度\n     * @param sampleCount sample数量\n     */\n    private static _getMoofLen(sampleCount: number): number {\n        return 100 + 17 * sampleCount;\n    }\n\n    /**\n     * 处理mp4 segment头部数据，主要是moof\n     * @param dest 写入目标\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 音视频描述数据\n     * @param mdatLen mdatLen\n     * @param initSegment moov头\n     */\n    private static _mediaSegmentHead(dest: DestData, sn: number, baseMediaDecodeTime: number, track: Track, mdatLen: number, initSegment?: Uint8Array): void {\n        if (initSegment) {\n            dest.data.set(initSegment);\n            dest.offset = initSegment.byteLength;\n        }\n        MP4._writeMoof(dest, sn, baseMediaDecodeTime, track);\n\n        MP4._writeBoxHead(dest, MP4.types.mdat, mdatLen);\n    }\n\n    /**\n     * 生成一个数据块用于承载mp4Segment数据\n     * @param track 音视频描述数据\n     * @param mdatLen mdat长度\n     * @param moov moov\n     */\n    private static _getMediaSegmentData(track: Track, mdatLen: number, moov?: Uint8Array): DestData {\n        let moofLen = MP4._getMoofLen(track.mp4Samples.length);\n        return { data: new Uint8Array(moofLen + mdatLen + (moov ? moov.byteLength : 0)), offset: 0 };\n    }\n\n    /**\n     * 向目标数据写入mvhd\n     * @param dest 写入目标\n     * @param timescale timescale\n     * @param duration duration\n     */\n    private static _writeMvhd(dest: DestData, timescale: number, duration: number): void {\n        duration *= timescale;\n        const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n        const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        const mvhd = MVHD_TPL;\n        mvhd[28] = timescale >> 24 & 0xff;\n        mvhd[29] = timescale >> 16 & 0xff;\n        mvhd[30] = timescale >> 8 & 0xff;\n        mvhd[31] = timescale & 0xff;\n        mvhd[32] = upperWordDuration >> 24;\n        mvhd[33] = upperWordDuration >> 16 & 0xff;\n        mvhd[34] = upperWordDuration >> 8 & 0xff;\n        mvhd[35] = upperWordDuration & 0xff;\n        mvhd[36] = lowerWordDuration >> 24;\n        mvhd[37] = lowerWordDuration >> 16 & 0xff;\n        mvhd[38] = lowerWordDuration >> 8 & 0xff;\n        mvhd[39] = lowerWordDuration & 0xff;\n        dest.data.set(mvhd, dest.offset);\n        dest.offset += MVHD_TPL.byteLength;\n    }\n\n    /**\n     * 向目标数据写入tkhd\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeTkhd(dest: DestData, track: AudioTrack & VideoTrack): void {\n        const id = track.id,\n            duration = track.duration * track.timescale,\n            upperWordDuration = Math.floor(duration / (UINT32_MAX + 1)),\n            lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        let width = 0,\n            height = 0;\n        if (track.hasOwnProperty('width')) {\n            width = track.width;\n        }\n        if (track.hasOwnProperty('height')) {\n            height = track.height;\n        }\n        const tkhd = TKHD_TPL;\n        tkhd[28] = id >> 24 & 0xff;\n        tkhd[29] = id >> 16 & 0xff;\n        tkhd[30] = id >> 8 & 0xff;\n        tkhd[31] = id & 0xff;\n        tkhd[36] = upperWordDuration >> 24;\n        tkhd[37] = upperWordDuration >> 16 & 0xff;\n        tkhd[38] = upperWordDuration >> 8 & 0xff;\n        tkhd[39] = upperWordDuration & 0xff;\n        tkhd[40] = lowerWordDuration >> 24;\n        tkhd[41] = lowerWordDuration >> 16 & 0xff;\n        tkhd[42] = lowerWordDuration >> 8 & 0xff;\n        tkhd[43] = lowerWordDuration & 0xff;\n        tkhd[96] = width >> 8 & 0xff;\n        tkhd[97] = width & 0xff;\n        tkhd[100] = height >> 8 & 0xff;\n        tkhd[101] = height & 0xff;\n\n        dest.data.set(tkhd, dest.offset);\n        dest.offset += TKHD_TPL.byteLength;\n    }\n\n    /**\n     * 计算trak box长度\n     * @param track 音视频描述数据\n     */\n    private static _getTrakLen(track: Track): number {\n        return BOX_HEAD_LEN + TKHD_TPL.byteLength + MP4._getMdiaLen(track);\n    }\n\n    /**\n     * 向目标数据写入trak\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeTrak(dest: DestData, track: Track): void {\n        const trakLen = MP4._getTrakLen(track);\n        this._writeBoxHead(dest, MP4.types.trak, trakLen);\n        this._writeTkhd(dest, <AudioTrack & VideoTrack>track);\n        this._writeMdia(dest, track);\n    }\n\n    /**\n     * 计算mdia长度\n     * @param track 音视频描述数据\n     */\n    private static _getMdiaLen(track: Track): number {\n        return BOX_HEAD_LEN + MDHD_TPL.byteLength + HDLR[track.type].byteLength + MP4._getMinfLen(track);\n    }\n\n    /**\n     * 向目标数据写入mdia\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeMdia(dest: DestData, track: Track): void {\n        const mdiaLen = MP4._getMdiaLen(track);\n        this._writeBoxHead(dest, MP4.types.mdia, mdiaLen);\n        this._writeMdhd(dest, track.timescale, track.duration);\n        dest.data.set(HDLR[track.type], dest.offset);\n        dest.offset += HDLR[track.type].byteLength;\n        this._writeMinf(dest, track);\n    }\n\n    /**\n     * 向目标数据写入mdhd\n     * @param dest 写入目标\n     * @param timescale timescale\n     * @param duration duration\n     */\n    private static _writeMdhd(dest: DestData, timescale: number, duration: number): void {\n        duration *= timescale;\n        const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n        const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n        const mdhd = MDHD_TPL;\n        mdhd[28] = timescale >> 24 & 0xff;\n        mdhd[29] = timescale >> 16 & 0xff;\n        mdhd[30] = timescale >> 8 & 0xff;\n        mdhd[31] = timescale & 0xff; // timescale\n        mdhd[32] = upperWordDuration >> 24;\n        mdhd[33] = upperWordDuration >> 16 & 0xff;\n        mdhd[34] = upperWordDuration >> 8 & 0xff;\n        mdhd[35] = upperWordDuration & 0xff;\n        mdhd[36] = lowerWordDuration >> 24;\n        mdhd[37] = lowerWordDuration >> 16 & 0xff;\n        mdhd[38] = lowerWordDuration >> 8 & 0xff;\n        mdhd[39] = lowerWordDuration & 0xff;\n        dest.data.set(mdhd, dest.offset);\n        dest.offset += mdhd.byteLength;\n    }\n\n    /**\n     * 计算minf长度\n     * @param track 音视频描述数据\n     */\n    private static _getMinfLen(track: Track): number {\n        if (track.type === TrackType.audio) {\n            return BOX_HEAD_LEN + SMHD.byteLength + DINF.byteLength + MP4._getStblLen(track);\n        }\n        return BOX_HEAD_LEN + VMHD.byteLength + DINF.byteLength + MP4._getStblLen(track);\n    }\n\n    /**\n     * 向目标数据写入minf\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeMinf(dest: DestData, track: Track) {\n        this._writeBoxHead(dest, MP4.types.minf, MP4._getMinfLen(track));\n        if (track.type === 'audio') {\n            dest.data.set(SMHD, dest.offset);\n            dest.offset += SMHD.byteLength;\n            dest.data.set(DINF, dest.offset);\n            dest.offset += DINF.byteLength;\n            this._writeStbl(dest, track);\n            return;\n        }\n        dest.data.set(VMHD, dest.offset);\n        dest.offset += VMHD.byteLength;\n        dest.data.set(DINF, dest.offset);\n        dest.offset += DINF.byteLength;\n        this._writeStbl(dest, track);\n        return;\n    }\n\n    /**\n     * 计算stbl长度\n     * @param track 音视频描述数据\n     */\n    private static _getStblLen(track: Track): number {\n        return BOX_HEAD_LEN + this._getStsdLen(track) + STTS.byteLength + STSC.byteLength + STSZ.byteLength + STCO.byteLength;\n    }\n\n    /**\n     * 向目标数据写入stbl\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeStbl(dest: DestData, track: Track): void {\n        let stblLen = this._getStblLen(track);\n        this._writeBoxHead(dest, MP4.types.stbl, stblLen);\n        this._writeStsd(dest, track);\n        dest.data.set(STTS, dest.offset);\n        dest.offset += STTS.byteLength;\n        dest.data.set(STSC, dest.offset);\n        dest.offset += STSC.byteLength;\n        dest.data.set(STSZ, dest.offset);\n        dest.offset += STSZ.byteLength;\n        dest.data.set(STCO, dest.offset);\n        dest.offset += STCO.byteLength;\n    }\n\n    /**\n     * 计算stsd长度\n     * @param track 音视频描述数据\n     */\n    private static _getStsdLen(track: Track): number {\n        if (track.type === TrackType.audio) {\n            return MP4._getMp4aStsdLen(<AudioTrack>track);\n        } else {\n            return MP4._getAvc1StsdLen(<VideoTrack>track);\n        }\n    }\n\n    /**\n     * 向目标数据写入stsd\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeStsd(dest: DestData, track: Track): void {\n        if (track.type === TrackType.audio) {\n            this._writeMp4aStsd(dest, <AudioTrack>track);\n            return;\n        }\n        this._writeAvc1Stsd(dest, <VideoTrack>track);\n    }\n\n    /**\n     * 计算avcC长度\n     * @param track 音视频描述数据\n     */\n    private static _getAvcCLen(track: VideoTrack): number {\n        const spsLen = track.sps.reduce((prev, item) => {\n            return prev + item.byteLength + 2;\n        }, 0);\n        const ppsLen = track.pps.reduce((prev, item) => {\n            return prev + item.byteLength + 2;\n        }, 0);\n        // 8 + 5 + sps + 1 + pps\n        return 15 + spsLen + ppsLen;\n    }\n\n    /**\n     * 计算avc1长度\n     * @param track 音视频描述数据\n     */\n    private static _getAvc1Len(track: VideoTrack): number {\n        // avc1 + avcc + btrt + pasp\n        return 86 + MP4._getAvcCLen(track) + 20 + 16;\n    }\n\n    /**\n     * 计算stsd + avc1长度\n     * @param track 音视频描述数据\n     */\n    private static _getAvc1StsdLen(track: VideoTrack): number {\n        // stsd + avc1\n        return 16 + this._getAvc1Len(track);\n    }\n\n    /**\n     * 向目标数据写入stsd(avc1)\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeAvc1Stsd(dest: DestData, track: VideoTrack): void {\n        let sps: number[] = [],\n            pps: number[] = [],\n            i,\n            data,\n            len;\n\n        for (i = 0; i < track.sps.length; i++) {\n            data = track.sps[i];\n            len = data.byteLength;\n            sps.push(len >>> 8 & 0xff);\n            sps.push(len & 0xff);\n            sps = sps.concat(Array.prototype.slice.call(data));\n        }\n\n        for (i = 0; i < track.pps.length; i++) {\n            data = track.pps[i];\n            len = data.byteLength;\n            pps.push(len >>> 8 & 0xff);\n            pps.push(len & 0xff);\n            pps = pps.concat(Array.prototype.slice.call(data));\n        }\n        const avcCLen = this._getAvcCLen(track);\n        const avc1Len = this._getAvc1Len(track);\n        const stsdLen = this._getAvc1StsdLen(track);\n        const avc1Stsd = AVC1_STSD_TPL;\n        let width = track.width,\n            height = track.height,\n            hSpacing = track.pixelRatio[0],\n            vSpacing = track.pixelRatio[1];\n\n        avc1Stsd[0] = stsdLen >> 24 & 0xff;\n        avc1Stsd[1] = stsdLen >> 16 & 0xff;\n        avc1Stsd[2] = stsdLen >> 8 & 0xff;\n        avc1Stsd[3] = stsdLen & 0xff;\n\n        avc1Stsd[16] = avc1Len >> 24 & 0xff;\n        avc1Stsd[17] = avc1Len >> 16 & 0xff;\n        avc1Stsd[18] = avc1Len >> 8 & 0xff;\n        avc1Stsd[19] = avc1Len & 0xff;\n\n        avc1Stsd[48] = width >> 8 & 0xff;\n        avc1Stsd[49] = width & 0xff; // width\n        avc1Stsd[50] = height >> 8 & 0xff;\n        avc1Stsd[51] = height & 0xff; // height\n        dest.data.set(avc1Stsd, dest.offset);\n        dest.offset += avc1Stsd.byteLength;\n\n        this._writeBoxHead(dest, MP4.types.avcC, avcCLen);\n\n        const avcc = [\n            0x01, sps[3], sps[4], sps[5],\n            0xfc | 3, 0xe0 | track.sps.length\n        ]\n            .concat(sps)\n            .concat([\n                track.pps.length\n            ])\n            .concat(pps);\n        dest.data.set(avcc, dest.offset);\n        dest.offset += avcc.length;\n\n        dest.data.set(BTRT, dest.offset);\n        dest.offset += BTRT.byteLength;\n\n        const pasp = PASP_TPL;\n        pasp[8] = hSpacing >> 24; // hSpacing\n        pasp[9] = hSpacing >> 16 & 0xff;\n        pasp[10] = hSpacing >> 8 & 0xff;\n        pasp[11] = hSpacing & 0xff;\n        pasp[12] = vSpacing >> 24; // vSpacing\n        pasp[13] = vSpacing >> 16 & 0xff;\n        pasp[14] = vSpacing >> 8 & 0xff;\n        pasp[15] = vSpacing & 0xff;\n        dest.data.set(pasp, dest.offset);\n        dest.offset += pasp.byteLength;\n    }\n\n    /**\n     * 计算mp4 esds长度\n     * @param track 音视频描述数据\n     */\n    private static _getMp4aEsdsLen(track: AudioTrack): number {\n        const configLen = track.config.length;\n        return BOX_HEAD_LEN + 25 + configLen + 4;\n    }\n\n    /**\n     * 计算stsd + mp4a + esds长度\n     * @param track 音视频描述数据\n     */\n    private static _getMp4aStsdLen(track: AudioTrack): number {\n        // stsd + mp4a + esds\n        return 16 + 36 + MP4._getMp4aEsdsLen(track);\n    }\n\n    /**\n     * 向目标数据写入stsd(mp4a)\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeMp4aStsd(dest: DestData, track: AudioTrack): void {\n        const configLen = track.config.length;\n        const esdsLen = MP4._getMp4aEsdsLen(track);\n        const stsdLen = MP4._getMp4aStsdLen(track);\n        const mp4aLen = stsdLen - 16;\n\n        const mp4a = MP4A_STSD_TPL;\n        mp4a[0] = stsdLen >> 24 & 0xff;\n        mp4a[1] = stsdLen >> 16 & 0xff;\n        mp4a[2] = stsdLen >> 8 & 0xff;\n        mp4a[3] = stsdLen & 0xff;\n\n        mp4a[16] = mp4aLen >> 24 & 0xff;\n        mp4a[17] = mp4aLen >> 16 & 0xff;\n        mp4a[18] = mp4aLen >> 8 & 0xff;\n        mp4a[19] = mp4aLen & 0xff;\n\n        mp4a[41] = track.channelCount;\n        mp4a[48] = track.samplerate >> 8 & 0xff;\n        mp4a[49] = track.samplerate & 0xff;\n\n        mp4a[52] = esdsLen >> 24 & 0xff;\n        mp4a[53] = esdsLen >> 16 & 0xff;\n        mp4a[54] = esdsLen >> 8 & 0xff;\n        mp4a[55] = esdsLen & 0xff;\n\n        mp4a[65] = 23 + configLen;\n        mp4a[70] = 15 + configLen;\n\n        dest.data.set(mp4a, dest.offset);\n        dest.offset += mp4a.byteLength;\n        let tmp = [configLen].concat(track.config).concat([0x06, 0x01, 0x02]);\n        dest.data.set(tmp, dest.offset);\n        dest.offset += tmp.length;\n    }\n\n    /**\n     * 计算mvex长度\n     * @param tracks 音视频描述数据\n     */\n    private static _getMvexLen(tracks: Track[]): number {\n        return BOX_HEAD_LEN + tracks.length * TREX_TPL.byteLength;\n    }\n\n    /**\n     * 向目标数据写入mvex\n     * @param dest 写入目标\n     * @param tracks 音视频描述数据\n     */\n    private static _writeMvex(dest: DestData, tracks: Track[]): void {\n        let mvexLen = MP4._getMvexLen(tracks);\n        this._writeBoxHead(dest, MP4.types.mvex, mvexLen);\n        tracks.forEach(item => {\n            MP4._writeTrex(dest, item);\n        })\n    }\n\n    /**\n     * 向目标数据写入trex\n     * @param dest 写入目标\n     * @param track 音视频描述数据\n     */\n    private static _writeTrex(dest: DestData, track: Track): void {\n        const id = track.id;\n        const trex = TREX_TPL;\n        trex[12] = id >> 24;\n        trex[13] = id >> 16 & 0xff;\n        trex[14] = id >> 8 & 0xff;\n        trex[15] = id & 0xff; // track_ID\n        dest.data.set(trex, dest.offset);\n        dest.offset += trex.byteLength;\n    }\n\n    /**\n     * 写入moof头\n     * @param dest 写入目标\n     * @param sn sn\n     * @param baseMediaDecodeTime baseMediaDecodeTime\n     * @param track 音视频描述数据\n     * @param mdatLen mdat box 长度\n     */\n    private static _writeMoof(dest: DestData, sn: number, baseMediaDecodeTime: number, track: Track): void {\n        // mooflen = 8 + mfhd(8 + 8 ) + traf(8 + tfhd(8 + 8) + tfdt(8 + 12) + trun(8 + 12 + 16 * sample.len) + sdtp(8 + 4 + sample.len)) = 100 + 17 * track.samples.length;\n        // trunOffset = moof + mdat header\n        let len = track.mp4Samples.length,\n            moofLen = MP4._getMoofLen(len),\n            trafLen = moofLen - 24,\n            sdtpLen = 12 + len,\n            trunLen = 20 + 16 * len,\n            trunOffset = moofLen + 8,\n            id = track.id,\n            samples = track.mp4Samples || [],\n            upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1)),\n            lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n\n        // moof\n        MP4._writeBoxHead(dest, MP4.types.moof, moofLen);\n\n        // mfhd\n        MP4._writeBoxHead(dest, MP4.types.mfhd, 16);\n        dest.data[dest.offset + 4] = sn >> 24;\n        dest.data[dest.offset + 5] = sn >> 16 & 0xff;\n        dest.data[dest.offset + 6] = sn >> 8 & 0xff;\n        dest.data[dest.offset + 7] = sn & 0xff;\n        dest.offset += 8;\n\n        // traf\n        MP4._writeBoxHead(dest, MP4.types.traf, trafLen);\n\n        // tfhd\n        MP4._writeBoxHead(dest, MP4.types.tfhd, 16);\n        dest.data[dest.offset + 4] = id >> 24;\n        dest.data[dest.offset + 5] = id >> 16 & 0xff;\n        dest.data[dest.offset + 6] = id >> 8 & 0xff;\n        dest.data[dest.offset + 7] = id & 0xff;\n        dest.offset += 8;\n\n        // tfdt\n        MP4._writeBoxHead(dest, MP4.types.tfdt, 20);\n        dest.data[dest.offset] = 1;\n        dest.data[dest.offset + 4] = upperWordBaseMediaDecodeTime >> 24;\n        dest.data[dest.offset + 5] = upperWordBaseMediaDecodeTime >> 16 & 0xff;\n        dest.data[dest.offset + 6] = upperWordBaseMediaDecodeTime >> 8 & 0xff;\n        dest.data[dest.offset + 7] = upperWordBaseMediaDecodeTime & 0xff;\n        dest.data[dest.offset + 8] = lowerWordBaseMediaDecodeTime >> 24;\n        dest.data[dest.offset + 9] = lowerWordBaseMediaDecodeTime >> 16 & 0xff;\n        dest.data[dest.offset + 10] = lowerWordBaseMediaDecodeTime >> 8 & 0xff;\n        dest.data[dest.offset + 11] = lowerWordBaseMediaDecodeTime & 0xff;\n        dest.offset += 12;\n\n        // sdtp\n        MP4._writeBoxHead(dest, MP4.types.sdtp, sdtpLen);\n        dest.offset += 4;\n        samples.forEach((sample, index) => {\n            let flags = sample.flags;\n            dest.data[dest.offset + index] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;\n        });\n        dest.offset += len;\n\n        // trun\n        MP4._writeBoxHead(dest, MP4.types.trun, trunLen);\n        dest.data[dest.offset + 2] = 15;\n        dest.data[dest.offset + 3] = 1;\n        dest.data[dest.offset + 4] = len >>> 24 & 0xff;\n        dest.data[dest.offset + 5] = len >>> 16 & 0xff;\n        dest.data[dest.offset + 6] = len >>> 8 & 0xff;\n        dest.data[dest.offset + 7] = len & 0xff;\n        dest.data[dest.offset + 8] = trunOffset >>> 24 & 0xff;\n        dest.data[dest.offset + 9] = trunOffset >>> 16 & 0xff;\n        dest.data[dest.offset + 10] = trunOffset >>> 8 & 0xff;\n        dest.data[dest.offset + 11] = trunOffset & 0xff;\n        dest.offset += 12;\n        samples.forEach((sample, index) => {\n            dest.data.set([\n                sample.duration >>> 24 & 0xff,\n                sample.duration >>> 16 & 0xff,\n                sample.duration >>> 8 & 0xff,\n                sample.duration & 0xff, // sample_duration\n                sample.len >>> 24 & 0xff,\n                sample.len >>> 16 & 0xff,\n                sample.len >>> 8 & 0xff,\n                sample.len & 0xff, // sample_len\n                sample.flags.isLeading << 2 | sample.flags.dependsOn,\n                sample.flags.isDependedOn << 6 | sample.flags.hasRedundancy << 4 | sample.flags.isNonSync,\n                sample.flags.degradPrio & 0xf0 << 8,\n                sample.flags.degradPrio & 0x0f, // sample_flags\n                sample.cts >>> 24 & 0xff,\n                sample.cts >>> 16 & 0xff,\n                sample.cts >>> 8 & 0xff,\n                sample.cts & 0xff // sample_composition_time_offset\n            ], dest.offset + 16 * index\n            );\n        });\n        dest.offset += len * 16;\n    }\n\n    /**\n     * 写入box头\n     * @param dest 写入目标\n     * @param type box type\n     * @param len box len\n     */\n    private static _writeBoxHead(dest: DestData, type: number[], len: number): void {\n        dest.data[dest.offset] = len >> 24 & 0xff;\n        dest.data[dest.offset + 1] = len >> 16 & 0xff;\n        dest.data[dest.offset + 2] = len >> 8 & 0xff;\n        dest.data[dest.offset + 3] = len & 0xff;\n        dest.data.set(type, dest.offset + 4);\n        dest.offset += 8;\n    }\n}\n\nexport default MP4;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:48:19 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 15:24:01\n * 整理音视频数据用于生成fragmented mp4\n */\nimport { EventEmitter } from 'events';\nimport { ErrorDetails, ErrorTypes } from '../core/errors';\nimport LasEvents from '../core/events';\nimport { LasMainConfig } from '../types/core';\nimport { AudioSample, AudioTrack, MP4AudioSample, MP4VideoSample, TrackType, VideoSample, VideoTrack, MP4Segment } from '../types/remux';\nimport { AAC_SAMPLE_DURATION, getAACFrameDuration, getAACSilentFrame } from '../utils/aac-helper';\nimport { Log } from '../utils/log';\nimport MP4 from './mp4-generator';\n\n// 100 seconds\nconst MAX_FILL_FRAME_DURATION = 100 * 1000;\n\nconst DEFAULT_VIDEO_SAMPLE_DURATION = 40;\n\ntype VideoTimeReferenceInfo = { track: VideoTrack; sample?: VideoSample };\n\nclass MP4Remuxer {\n    private tag = 'MP4Remuxer';\n    private _eventEmitter: EventEmitter;\n    private _forceFirstIDR: boolean;\n    private _videoTimeReference: boolean;\n    private _videoTimeReferenceInfo: VideoTimeReferenceInfo;\n    private _extra: any;\n\n    private _nextAudioPTS?: number;\n    private _nextVideoDTS?: number;\n    private _initPTS?: number;\n    private _videoLastPTS: number = 0;\n    private _audioLastPTS: number = 0;\n    private _videoSampleDuration: number = DEFAULT_VIDEO_SAMPLE_DURATION;\n    private _moovs?: Partial<Record<TrackType, Uint8Array>>;\n\n    constructor(eventEmitter: EventEmitter, config: LasMainConfig) {\n        this._eventEmitter = eventEmitter;\n        this._videoTimeReference = !config.gopRemux;\n        // 计算平均sampleDuration\n        this._videoTimeReferenceInfo = <VideoTimeReferenceInfo>{};\n        this._forceFirstIDR = navigator.userAgent.toLowerCase().indexOf('chrome') > -1;\n    }\n\n    public resetMoov(): void {\n        this._moovs = undefined;\n        this._clearVideoTimeReference();\n    }\n\n    public setExtra(data: any) {\n        this._extra = data;\n    }\n\n    public resetTimeStamp() {\n        this._initPTS = undefined;\n        this._audioLastPTS = this._videoLastPTS = 0;\n    }\n\n    public getLastPTS() {\n        return { video: this._videoLastPTS, audio: this._audioLastPTS };\n    }\n\n    public flush() {\n        let videoData;\n        const info = this._videoTimeReferenceInfo;\n        if (this._videoTimeReference && info.sample) {\n            info.track.samples = [info.sample];\n            info.track.sequenceNumber++;\n            info.sample = undefined;\n            videoData = this._remuxVideo(info.track, true, false);\n        }\n        this._clearVideoTimeReference();\n        return videoData;\n    }\n\n    public remux(audioTrack: AudioTrack, videoTrack: VideoTrack, timeOffset: number, isContinuous: boolean, isFlush: boolean = false) {\n        if (!this._moovs) {\n            this._initMP4(audioTrack, videoTrack, timeOffset);\n        }\n        if (this._moovs) {\n            let audioData: MP4Segment | undefined;\n            let videoData: MP4Segment | undefined;\n            if (audioTrack.samples.length && videoTrack.samples.length) {\n                if (!isContinuous) {\n                    // 起始位置音视频不对齐，音频开始时间小于视频开始时间，填帧\n                    if (audioTrack.samples[0].pts < videoTrack.samples[0].pts) {\n                        const sample = Object.assign({}, videoTrack.samples[0]);\n                        sample.dts = sample.pts = audioTrack.samples[0].pts;\n                        videoTrack.samples.unshift(sample);\n                    }\n                }\n            }\n\n            // 兼容safari\n            if (!isContinuous && videoTrack.samples.length) {\n                videoTrack.samples[0].pts = videoTrack.samples[0].dts;\n            }\n\n            audioData = this._remuxAudio(audioTrack, isContinuous);\n            videoData = this._remuxVideo(videoTrack, isContinuous, !isFlush);\n            if (!videoData && isFlush && this._videoTimeReferenceInfo.sample) {\n                videoData = this.flush();\n            }\n\n            if (videoData && !audioData && audioTrack.codec) {\n                audioData = this._fillEmptyAudio(audioTrack, isContinuous, videoData.startPTS, videoData.endPTS, videoData.streamDTS);\n            }\n\n            const segments = [];\n            if (audioData) {\n                segments.push(audioData);\n            }\n            if (videoData) {\n                segments.push(videoData);\n            }\n            if (segments.length) {\n                this._eventEmitter.emit(LasEvents.MP4_SEGMENT, { segments, extra: this._extra });\n            }\n        }\n    }\n\n    /**\n     * 初始化mp4，生成moov，获取mediainfo\n     * @param audioTrack 音频track\n     * @param videoTrack 视频track\n     * @param timeOffset 时间偏移量\n     */\n    private _initMP4(audioTrack: AudioTrack, videoTrack: VideoTrack, timeOffset: number): void {\n        const eventEmitter = this._eventEmitter,\n            audioSamples = audioTrack.samples,\n            videoSamples = videoTrack.samples,\n            mediaInfo: any = {},\n            moovs: Partial<Record<TrackType, Uint8Array>> = {};\n        let initPTS;\n\n        if (audioTrack.config && audioSamples.length) {\n            audioTrack.timescale = audioTrack.samplerate;\n            moovs.audio = MP4.moov([audioTrack]);\n            mediaInfo.audioCodec = audioTrack.codec;\n            mediaInfo.channelCount = audioTrack.channelCount;\n            mediaInfo.audioSampleRate = audioTrack.samplerate;\n            mediaInfo.hasAudio = true;\n            mediaInfo.defaultAudioCodec = audioTrack.defaultCodec\n\n            initPTS = audioSamples[0].pts - audioTrack.inputTimescale * timeOffset;\n        }\n\n        if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n            const inputTimeScale = videoTrack.inputTimescale;\n            videoTrack.timescale = inputTimeScale;\n            moovs.video = MP4.moov([videoTrack]);\n            mediaInfo.videoCodec = videoTrack.codec;\n            mediaInfo.width = videoTrack.width;\n            mediaInfo.height = videoTrack.height;\n            mediaInfo.fps = videoTrack.fps;\n            mediaInfo.profile = videoTrack.profile;\n            mediaInfo.level = videoTrack.level;\n            mediaInfo.chromaFormat = videoTrack.chromaFormat;\n            mediaInfo.hasVideo = true;\n\n            let videoInitPTS = videoSamples[0].pts - inputTimeScale * timeOffset;\n            let videoInitDTS = videoSamples[0].dts - inputTimeScale * timeOffset;\n\n            initPTS = initPTS ? Math.min(initPTS, videoInitDTS) : videoInitPTS;\n        }\n\n        if (mediaInfo.hasAudio || mediaInfo.hasVideo) {\n            if (typeof this._initPTS === 'undefined') {\n                this._initPTS = initPTS;\n            }\n            this._moovs = moovs;\n            eventEmitter.emit(LasEvents.MEDIA_INFO, mediaInfo);\n        } else {\n            eventEmitter.emit(LasEvents.ERROR, {\n                type: ErrorTypes.MUX_ERROR,\n                details: ErrorDetails.DEMUX_ERROR,\n                fatal: false,\n                info: {\n                    reason: 'no audio/video samples found'\n                }\n            });\n        }\n    }\n\n    /**\n     * remux视频数据\n     * 输出fmp4数据\n     * @param track VideoTrack\n     * @param isContinuous 数据是否连续\n     * @param activeTimeReference 是否开启视频帧时间参考功能\n     */\n    private _remuxVideo(track: VideoTrack, isContinuous: boolean, activeTimeReference: boolean = true): MP4Segment | undefined {\n        if (!track.samples.length) {\n            return;\n        }\n        const initPTS = this._initPTS;\n        let timescale = track.timescale,\n            samples = track.samples as VideoSample[],\n            sampleDuration = 0,\n            samplesCount = samples.length,\n            mp4Samples: MP4VideoSample[] = [],\n            nextVideoDTS = this._nextVideoDTS;\n        if (typeof initPTS === 'undefined' || samplesCount === 0 || timescale === 0) {\n            return;\n        }\n\n        if (!isContinuous || typeof nextVideoDTS === 'undefined') {\n            nextVideoDTS = samples[0].dts;\n        }\n        // 处理offset\n        samples.forEach((sample) => {\n            sample.pts = sample.pts - initPTS;\n            sample.dts = sample.dts - initPTS;\n        });\n\n        // dts递增\n        samples.sort((a, b) => {\n            return a.dts - b.dts || a.pts - b.pts;\n        });\n\n        // 删除最后一个sample并缓存，用于计算remux最后一个sampleDuration\n        if (this._videoTimeReference) {\n            this._videoTimeReferenceInfo.track = track;\n            if (this._videoTimeReferenceInfo.sample) {\n                samplesCount++;\n                samples.unshift(this._videoTimeReferenceInfo.sample);\n                this._videoTimeReferenceInfo.sample = undefined;\n            }\n            if (samples.length > 1 && activeTimeReference) {\n                this._videoTimeReferenceInfo.sample = samples.pop();\n                samplesCount--;\n            }\n        }\n\n        // 计算调整首个sample时间戳\n        let sample = samples[0];\n        let firstDTS = Math.max(sample.dts, 0);\n        let firstPTS = Math.max(sample.pts, 0);\n\n        if (isContinuous) {\n            const delta = Math.round(firstDTS - nextVideoDTS);\n            if (delta) {\n                firstPTS = samples[0].pts = firstPTS - (firstDTS - nextVideoDTS);\n                firstDTS = samples[0].dts = firstDTS = nextVideoDTS;\n            }\n        }\n\n        for (let i = 0; i < samplesCount; i++) {\n            const videoSample = samples[i];\n            let mp4SampleLength = 0,\n                cts;\n\n            // 计算帧长度\n            if (i < samplesCount - 1) {\n                // 非末尾\n                let nextSample = samples[i + 1];\n                if (nextSample.dts <= videoSample.dts) {\n                    let nextSampleCts = nextSample.pts - nextSample.dts;\n                    nextSample.dts = videoSample.dts + 1;\n                    nextSample.pts = nextSample.dts + nextSampleCts;\n                }\n                sampleDuration = nextSample.dts - videoSample.dts;\n            } else {\n                // 末尾\n                let duration = track.sampleDuration || this._videoSampleDuration;\n                // 参考暂存帧计算长度\n                if (this._videoTimeReferenceInfo.sample) {\n                    duration = this._videoTimeReferenceInfo.sample.dts - videoSample.dts;\n                }\n                sampleDuration = Math.floor(duration);\n            }\n            cts = Math.round(videoSample.pts - videoSample.dts);\n\n            mp4SampleLength = videoSample.units.reduce((prev: number, unit: Uint8Array) => {\n                return unit.byteLength + 4 + prev;\n            }, 0);\n\n            mp4Samples.push({\n                len: mp4SampleLength,\n                units: videoSample.units,\n                duration: sampleDuration,\n                cts,\n                streamDTS: videoSample.streamDTS,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: videoSample.key ? 2 : 1,\n                    isNonSync: videoSample.key ? 0 : 1\n                }\n            });\n        }\n\n        let lastSample = samples[samples.length - 1];\n        this._nextVideoDTS = lastSample.dts + sampleDuration;\n        let nextVideoPTS = lastSample.pts + sampleDuration;\n\n        if (mp4Samples.length && this._forceFirstIDR) {\n            const flags = mp4Samples[0].flags;\n            flags.dependsOn = 2;\n            flags.isNonSync = 0;\n        }\n        track.mp4Samples = mp4Samples;\n\n        let payload = MP4.videoMediaSegment(track.sequenceNumber++, firstDTS, track, this._getMoovByType(TrackType.video));\n\n        const data: MP4Segment = {\n            payload: payload,\n            startPTS: firstPTS / timescale,\n            endPTS: nextVideoPTS / timescale,\n            startDTS: firstDTS / timescale,\n            endDTS: this._nextVideoDTS / timescale,\n            type: TrackType.video,\n            streamDTS: sample.streamDTS / timescale\n        };\n        this._videoLastPTS = data.endPTS;\n        this._videoSampleDuration = Math.max(sampleDuration, 1);\n        track.samples = [];\n        track.mp4Samples = [];\n\n        return data;\n    }\n\n    /**\n     * remux音频数据\n     * 输出fmp4数据\n     * @param track AudioTrack\n     * @param isContinuous 是否是连续数据\n     */\n    private _remuxAudio(track: AudioTrack, isContinuous: boolean): MP4Segment | undefined {\n        if (!track.samples.length) {\n            return;\n        }\n        const initPTS = this._initPTS;\n        let inputAudioTimeScale = track.inputTimescale,\n            scaleFactor = inputAudioTimeScale / track.timescale,\n            inputSampleDuration = AAC_SAMPLE_DURATION * scaleFactor,\n            mp4Samples: MP4AudioSample[] = [],\n            firstAudioPTS = 0,\n            lastPTS,\n            inputSamples = track.samples as AudioSample[],\n            nextAudioPTS = this._nextAudioPTS,\n            frameDuration = getAACFrameDuration(track.samplerate);\n\n        if (typeof initPTS === 'undefined') {\n            return;\n        }\n\n        inputSamples.forEach(function (sample) {\n            sample.pts = sample.dts = sample.pts - initPTS;\n        });\n\n        if (!isContinuous || typeof nextAudioPTS === 'undefined') {\n            nextAudioPTS = inputSamples[0].pts;\n        }\n        if (typeof nextAudioPTS === 'undefined') {\n            return;\n        }\n        for (let i = 0, nextPTS = nextAudioPTS; i < inputSamples.length; i++) {\n            const audioSample = inputSamples[i],\n                unit = audioSample.unit,\n                pts = audioSample.pts,\n                delta = Math.round(pts - nextPTS),\n                duration = Math.abs((1000 * delta) / inputAudioTimeScale);\n\n            if (delta <= -inputSampleDuration) {\n                // 丢帧\n                Log.v(this.tag, `drop audio frame. pts: ${pts}`);\n                continue;\n            } else if (delta >= inputSampleDuration && duration < MAX_FILL_FRAME_DURATION && nextPTS) {\n                // 填空帧\n                let fillCount = Math.round(delta / inputSampleDuration);\n                Log.v(this.tag, `fill audio frame. count: ${fillCount} pts: ${pts}`);\n                for (let j = 0; j < fillCount; j++) {\n                    let fillFrame = getAACSilentFrame(track.defaultCodec || track.codec, track.channelCount);\n                    if (!fillFrame) {\n                        Log.v(this.tag, 'fill copy audio frame');\n                        fillFrame = unit.subarray();\n                    }\n                    mp4Samples.push({\n                        len: fillFrame.byteLength,\n                        unit: fillFrame,\n                        cts: 0,\n                        duration: AAC_SAMPLE_DURATION,\n                        streamDTS: Math.round(audioSample.streamDTS - fillCount * frameDuration),\n                        flags: {\n                            isLeading: 0,\n                            isDependedOn: 0,\n                            hasRedundancy: 0,\n                            degradPrio: 0,\n                            dependsOn: 1,\n                            isNonSync: 0\n                        }\n                    });\n                    firstAudioPTS = firstAudioPTS || Math.max(nextPTS, 0);\n                    nextPTS += inputSampleDuration;\n                }\n            } else {\n                firstAudioPTS = firstAudioPTS || pts;\n                nextPTS += inputSampleDuration;\n            }\n\n            mp4Samples.push({\n                len: unit.byteLength,\n                cts: 0,\n                duration: AAC_SAMPLE_DURATION,\n                unit: unit,\n                streamDTS: audioSample.streamDTS,\n                flags: {\n                    isLeading: 0,\n                    isDependedOn: 0,\n                    hasRedundancy: 0,\n                    degradPrio: 0,\n                    dependsOn: 1,\n                    isNonSync: 0\n                }\n            });\n            lastPTS = pts;\n        }\n\n        if (mp4Samples.length && typeof lastPTS === 'number') {\n            this._nextAudioPTS = nextAudioPTS = lastPTS + scaleFactor * AAC_SAMPLE_DURATION;\n            track.mp4Samples = mp4Samples;\n\n            let payload = MP4.audioMediaSegment(track.sequenceNumber++, firstAudioPTS / scaleFactor, track, this._getMoovByType(TrackType.audio));\n\n            track.samples = [];\n            track.mp4Samples = [];\n            const start = firstAudioPTS / inputAudioTimeScale;\n            const end = nextAudioPTS / inputAudioTimeScale;\n            const audioData: MP4Segment = {\n                payload: payload,\n                startPTS: start,\n                endPTS: end,\n                startDTS: start,\n                endDTS: end,\n                type: TrackType.audio,\n                streamDTS: mp4Samples[0].streamDTS/ inputAudioTimeScale\n            };\n            this._audioLastPTS = audioData.endPTS;\n            return audioData;\n        }\n        track.samples = [];\n        track.mp4Samples = [];\n        return;\n    }\n\n    /**\n     * 填空audio\n     * @param track audiotrack\n     * @param isContinuous 是否是连续数据\n     * @param startPTS 开始填充时间\n     * @param endPTS 结束填充时间\n     * @param streamDTS start对应的流时间戳\n     */\n    private _fillEmptyAudio(track: AudioTrack, isContinuous: boolean, startPTS: number, endPTS: number, streamDTS: number) {\n        Log.v(this.tag, 'fill empty Audio');\n        const fillFrame = getAACSilentFrame(track.defaultCodec || track.codec, track.channelCount);\n        if (typeof this._initPTS === 'undefined' || !fillFrame) {\n            return;\n        }\n        const timescale = track.inputTimescale,\n            start = (typeof this._nextAudioPTS !== 'undefined' ? this._nextAudioPTS : startPTS * timescale) + this._initPTS,\n            end = endPTS * timescale + this._initPTS,\n            frameDuration = getAACFrameDuration(track.samplerate),\n            fillCount = Math.ceil((end - start) / frameDuration);\n\n        const samples: AudioSample[] = [];\n        for (let i = 0; i < fillCount; i++) {\n            const time = start + i * frameDuration;\n            samples.push({ unit: fillFrame, pts: time, dts: time, streamDTS: Math.round(streamDTS * timescale + i * frameDuration) });\n        }\n        track.samples = samples;\n        return this._remuxAudio(track, isContinuous);\n    }\n\n    /**\n     * 获取音/视频moov头\n     * @param type track type\n     */\n    private _getMoovByType(type: TrackType): Uint8Array | undefined {\n        let result: Uint8Array | undefined;\n        if (this._moovs && this._moovs[type]) {\n            result = this._moovs[type];\n            delete this._moovs[type];\n        }\n        return result;\n    }\n\n    /**\n     * 清理暂存数据\n     */\n    private _clearVideoTimeReference() {\n        this._videoTimeReferenceInfo = <VideoTimeReferenceInfo>{};\n    }\n}\n\nexport default MP4Remuxer;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:51:20 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 16:56:40\n * Adobe Flash Video File Format Specification Version 10.1\n * https://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n * FraunhoferIIS_Application-Bulletin_AAC-Transport-Formats.pdf\n * AudioSpecificConfig解析处理\n */\n\nimport BrowserHelper from \"../utils/browser-helper\";\n\nconst SAMPLING_FREQUENCY_LIST = [96000, 88200, 64000, 48000, 44100, 32000, 24000, 22050, 16000, 12000, 11025, 8000, 7350];\n\ntype AACInfo = {\n    config: number[],\n    samplerate: number,\n    channelCount: number,\n    codec: string,\n    defaultCodec: string\n}\nexport function parseAudioSpecificConfig(data: Uint8Array, offset: number, defaultCodec: string = ''): undefined | AACInfo {\n    if (data.byteLength < offset + 3) {\n        // 数据长度不对\n        return;\n    }\n    let audioObjectType = data[offset + 2] >>> 3, // 5 bits\n        samplingFrequencyIndex = (data[offset + 2] & 0x07) << 1 | data[offset + 3] >>> 7, // 4 bits\n        extensionSamplingFrequencyIndex = samplingFrequencyIndex,\n        channelConfiguration = (data[offset + 3] & 0x78) >>> 3, // 4 bits\n        config: number[] = [];\n\n    defaultCodec = defaultCodec || `mp4a.40.${audioObjectType}`;\n\n    if (samplingFrequencyIndex < 0 || samplingFrequencyIndex >= SAMPLING_FREQUENCY_LIST.length || channelConfiguration < 0 || channelConfiguration >= 8) {\n        // 数据读取错误\n        return;\n    }\n\n    if (BrowserHelper.isFirefox) {\n        if (samplingFrequencyIndex >= 6) {\n            audioObjectType = 5;\n            extensionSamplingFrequencyIndex = samplingFrequencyIndex - 3;\n        } else {\n            audioObjectType = 2;\n        }\n    } else if (BrowserHelper.isAndroid) {\n        audioObjectType = 2;\n    } else {\n        audioObjectType = 5;\n        if (defaultCodec === 'mp4a.40.29' || defaultCodec === 'mp4a.40.5') {\n            extensionSamplingFrequencyIndex = samplingFrequencyIndex - 3;\n        } else {\n            if (defaultCodec === 'mp4a.40.2' && samplingFrequencyIndex >= 6 && channelConfiguration === 1) {\n                audioObjectType = 2;\n            }\n        }\n    }\n    // audioObjectType(5) + samplingFrequencyIndex(3 . 1) + channelConfiguration(4) + extensionSamplingFrequencyIndex(3 . 1)\n    config[0] = (audioObjectType << 3) | ((samplingFrequencyIndex >> 1) & 0x07);\n    config[1] = ((samplingFrequencyIndex << 7) & 1) | (channelConfiguration << 3);\n    if (audioObjectType === 5) {\n        config[1] = config[1] | ((extensionSamplingFrequencyIndex >> 1) & 0x07);\n        config[2] = ((extensionSamplingFrequencyIndex & 1) << 7) | 8;\n        config[3] = 0;\n    }\n    return {\n        config: config,\n        samplerate: SAMPLING_FREQUENCY_LIST[samplingFrequencyIndex],\n        channelCount: channelConfiguration,\n        codec: `mp4a.40.${audioObjectType}`,\n        defaultCodec: defaultCodec\n    };\n}\n\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:51:05 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:51:05 \n * 哥伦布编码读取器\n */\nclass ExpGolomb {\n    private _data: Uint8Array;\n    private _byteIndex: number;\n    private _bitIndex: number;\n\n    constructor(data: Uint8Array) {\n        this._data = data;\n        this._byteIndex = 0;\n        this._bitIndex = 0;\n    }\n\n    /**\n     * 跳过指定长度bit\n     * @param bitLen 位长度\n     */\n    public skipBits(bitLen: number): void {\n        if (this.bitRemaining > bitLen) {\n            let bitMove = bitLen % 8;\n            this._byteIndex = this._byteIndex + Math.floor(bitLen / 8) + Math.floor((this._bitIndex + bitMove) / 8);\n            this._bitIndex = (this._bitIndex + bitMove) % 8;\n        } else {\n            // 结尾\n            this._byteIndex = this._data.byteLength - 1;\n            this._bitIndex = 7;\n        }\n    }\n\n    /**\n     * 读取指定长度bit\n     * @param bitLen 位长度\n     */\n    public bits(bitLen: number): number {\n        if (bitLen > 32) {\n            throw new Error('len must be less 32');\n        }\n        let byte = this._data[this._byteIndex];\n        // 当前字节需要读取位数\n        let readBitLen = Math.min(8 - this._bitIndex, bitLen);\n        // 当前字节数据需要左移位数\n        let shiftLeft = bitLen - readBitLen;\n        // 刷新index\n        this._bitIndex += readBitLen;\n        let value = (byte >> (8 - this._bitIndex)) & Math.pow(2, readBitLen) - 1;\n        if (this._bitIndex === 8) {\n            this._bitIndex = 0;\n            this._byteIndex++;\n        }\n        if (shiftLeft) {\n            return (value << shiftLeft) | this.bits(shiftLeft);\n        }\n        return value;\n    }\n\n    /**\n     * 无符号指数哥伦布编码\n     */\n    public ue() {\n        let count = this._leadingZeroCount();\n        return this.bits(count + 1) - 1;\n    }\n\n    /**\n     * 有符号指数哥伦布编码\n     */\n    public se() {\n        let ue = this.ue();\n        return Math.pow(-1, ue + 1) * Math.ceil(ue / 2)\n    }\n\n    /**\n     * 剩余bit数\n     */\n    public get bitRemaining(): number {\n        return (this._data.byteLength - this._byteIndex) * 8 - this._bitIndex;\n    }\n\n    /**\n     * 哥伦布编码前导0计数\n     */\n    private _leadingZeroCount(): number {\n        let bitRemaining = this.bitRemaining;\n        for (let i = 0; i < bitRemaining; i++) {\n            if (this.bits(1) === 1) {\n                if (this._bitIndex === 0) {\n                    this._byteIndex--;\n                    this._bitIndex = 7;\n                } else {\n                    this._bitIndex--;\n                }\n                return i;\n            }\n        }\n        return 0;\n    }\n}\n\nexport default ExpGolomb;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:50 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:50 \n * sps解析器\n */\nimport ExpGolomb from './exp-golomb';\n\nconst AspectRatio = [\n    [1, 1], [12, 11], [10, 11], [16, 11], [40, 33], [24, 11], [20, 11], [32, 11], [80, 33], [18, 11], [15, 11], [64, 33], [160, 99], [4, 3], [3, 2], [2, 1]\n];\n\nconst ChromaFormat: Record<number, string> = {\n    1: '4:2:0',\n    2: '4:2:2',\n    3: '4:4:4'\n}\n\nconst Profile: Record<number, string> = {\n    66: 'Baseline',\n    77: 'Main',\n    88: 'Extended',\n    100: 'High',\n    110: 'High10',\n    122: 'High422',\n    244: 'High444',\n}\n\nconst ProfileIDCList = [100, 110, 122, 244, 44, 83, 86, 118, 128, 138, 144];\n\n/**\n * 输出sps信息结构\n */\ntype SPSInfo = {\n    profile: string;\n    level: string;\n    chromaFormat: string;\n    fps: number;\n    pixelAspectRatio: number[];\n    width: number;\n    height: number;\n};\n\nclass SPSParser {\n    /**\n     * 解析sps数据\n     * @param value sps数据\n     */\n    public static parse(value: Uint8Array): SPSInfo {\n        let spsData = new Uint8Array(value.byteLength);\n        // 脱壳\n        let index = 0;\n        for (let i = 0; i < value.byteLength; i++) {\n            if (i >= 2 && value[i] === 3 && value[i - 1] === 0 && value[i - 2] === 0) {\n                continue;\n            }\n            spsData[index] = value[i];\n            index++;\n        }\n\n        let data: ExpGolomb | undefined = new ExpGolomb(spsData);\n        data.skipBits(8);\n        const profileIDC = data.bits(8); // profile_idc\n        data.skipBits(8); // constraint_set_flags 4 reserved_zero 4\n        const levelIDC = data.bits(8); // level_idc\n        data.ue(); // seq_parameter_set_id\n        let chromaFormatIDC = 1;\n\n        if (ProfileIDCList.indexOf(profileIDC) !== -1) {\n            chromaFormatIDC = data.ue(); // chrome_format_idc\n            if (chromaFormatIDC === 3) {\n                data.skipBits(1); // residual_colour_transform_flag\n            }\n\n            data.ue(); // bit_depth_luma_minus8\n            data.ue(); // bit_depth_chroma_minus8\n            data.skipBits(1); // qpprime_y_zero_transform_bypass_flag\n            if (data.bits(1)) { // seq_scaling_matrix_present_flag\n                const scalingListCount = chromaFormatIDC !== 3 ? 8 : 12;\n                for (let i = 0; i < scalingListCount; i++) {\n                    if (data.bits(1)) { // seq_scaling_list_present_flag\n                        if (i < 6) {\n                            SPSParser._skipScalingList(data, 16);\n                        } else {\n                            SPSParser._skipScalingList(data, 64);\n                        }\n                    }\n                }\n            }\n        }\n        data.ue(); // log2_max_frame_num_minus4\n        const picOrderCntType = data.ue(); // pic_order_cnt_type\n        if (picOrderCntType === 0) {\n            data.ue(); // log2_max_pic_order_cnt_lsb_minus_4\n        } else if (picOrderCntType === 1) {\n            data.bits(1); // delta_pic_order_always_zero_flag\n            data.se(); // offset_for_non_ref_pic\n            data.se(); // offset_for_top_to_bottom_field\n            const num = data.ue(); // num_ref_frames_in_pic_order_cnt_cycle\n            for (let i = 0; i < num; i++) {\n                data.se(); // offset_for_ref_frame\n            }\n        }\n        data.ue(); // num_ref_frames\n        data.skipBits(1); // gaps_in_frame_num_value_allowed_flag\n\n        const picWidthInMbsMinus1 = data.ue(); // pic_width_in_mbs_minus1\n        const picHeightInMapUnitsMinus1 = data.ue(); // pic_height_in_map_units_minus1\n\n        const frameMbsOnlyFlag = data.bits(1); // frame_mbs_only_flag\n        if (frameMbsOnlyFlag === 0) {\n            data.skipBits(1); // mb_adaptive_frame_field_flag\n        }\n        data.skipBits(1); // direct_8x8_inference_flag\n\n        let frameCropLeftOffset = 0;\n        let frameCropRightOffset = 0;\n        let frameCropTopOffset = 0;\n        let frameCropBottomOffset = 0;\n\n        if (data.bits(1)) { // frame_cropping_flag\n            frameCropLeftOffset = data.ue(); // frame_crop_left_offset\n            frameCropRightOffset = data.ue(); // frame_crop_right_offset\n            frameCropTopOffset = data.ue(); // frame_crop_top_offset\n            frameCropBottomOffset = data.ue(); // frame_crop_bottom_offset\n        }\n\n        let fps = 0,\n            pixelAspectRatio = [1, 1];\n\n        if (data.bits(1)) { // vui_parameters_present_flag\n            if (data.bits(1)) { // aspect_ratio_info_present_flag\n                const aspectRatioIDC = data.bits(8); // aspect_ratio_idc\n                if (aspectRatioIDC > 0 && aspectRatioIDC < 16) {\n                    pixelAspectRatio = AspectRatio[aspectRatioIDC - 1];\n                } else if (aspectRatioIDC === 255) {\n                    pixelAspectRatio = [(data.bits(8) << 8) | data.bits(8), (data.bits(8) << 8) | data.bits(8)];\n                }\n            }\n\n            if (data.bits(1)) { // overscan_info_present_flag\n                data.bits(1); // overscan_appropriate_flag\n            }\n            if (data.bits(1)) { // video_signal_type_present_flag\n                data.bits(4); // video_format 3 video_full_range_flag 1\n                if (data.bits(1)) { // colour_description_present_flag\n                    data.bits(24); // colour_primaries 8 transfer_characteristics 8 matrix_coefficients 8\n                }\n            }\n            if (data.bits(1)) { // chroma_loc_info_present_flag\n                data.ue(); // chroma_sample_loc_type_top_field\n                data.ue(); // chroma_sample_loc_type_bottom_field\n            }\n            if (data.bits(1)) { // timing_info_present_flag\n                const numUnitsInTick = data.bits(32); // num_units_in_tick\n                const timeScale = data.bits(32); // time_scale\n                if (!!data.bits(1)) { // fixed_frame_rate_flag\n                    fps = timeScale / (numUnitsInTick * 2);\n                }\n            }\n        }\n\n        data = undefined;\n\n        let cropUnitX = 0,\n            cropUnitY = 0;\n        if (chromaFormatIDC === 0) {\n            cropUnitX = 1;\n            cropUnitY = 2 - frameMbsOnlyFlag;\n        } else {\n            const subWc = chromaFormatIDC === 3 ? 1 : 2;\n            const subHc = chromaFormatIDC === 1 ? 2 : 1;\n            cropUnitX = subWc;\n            cropUnitY = subHc * (2 - frameMbsOnlyFlag);\n        }\n\n        let width = (picWidthInMbsMinus1 + 1) * 16;\n        let height = (2 - frameMbsOnlyFlag) * ((picHeightInMapUnitsMinus1 + 1) * 16);\n\n        width -= (frameCropLeftOffset + frameCropRightOffset) * cropUnitX;\n        height -= (frameCropTopOffset + frameCropBottomOffset) * cropUnitY;\n\n        return {\n            profile: Profile[profileIDC] || 'unknown',\n            level: (levelIDC / 10).toFixed(1),\n            chromaFormat: (chromaFormatIDC <= 3 ? ChromaFormat[chromaFormatIDC] : ChromaFormat[1]) || 'unknown',\n            fps,\n            pixelAspectRatio,\n            width: width,\n            height: height,\n        };\n    }\n\n    /**\n     * 忽略scaling_list数据\n     * @param data 数据\n     * @param count 长度\n     */\n    private static _skipScalingList(data: ExpGolomb, count: number): void {\n        let lastScale = 8,\n            nextScale = 8;\n        let deltaScale = 0;\n        for (let i = 0; i < count; i++) {\n            if (nextScale !== 0) {\n                deltaScale = data.se();\n                nextScale = (lastScale + deltaScale + 256) % 256;\n            }\n            lastScale = nextScale === 0 ? lastScale : nextScale;\n        }\n    }\n}\n\nexport default SPSParser;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:44:58 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:44:58 \n * 解码UTF-8\n */\n/**\n * 从arraybuffer中读取utf8 数据\n * @param data 数据\n */\nexport function decodeUTF8(value: ArrayBuffer, offset: number, size: number): string {\n    let data = new Uint8Array(value, offset, size),\n        unicode: number[] = [],\n        i = 0,\n        len = data.byteLength;\n\n    while (i < len) {\n        if (data[i] < 0x80) {\n            // 单字节，同ASCII\n            // 000000-00007F   0xxxxxxx\n            unicode.push(data[i]);\n        } else if (data[i] < 0xc0) {\n        } else if (data[i] < 0xe0) {\n            // 双字节，unicode = 5bit + 6bit \n            // 000080-0007FF   110xxxxx 10xxxxxx    首字节小于0xe0=11100000\n            if (i < len - 1 && (data[i + 1] >> 6) === 0b10) {\n                unicode.push(((data[i] & 0x1f) << 6) | (data[i + 1] & 0x3f));\n                i += 2;\n                continue;\n            }\n        } else if (data[i] < 0xf0) {\n            // 三字节，unicode = 4bit + 6bit + 6bit\n            // 000800-00FFFF   1110xxxx 10xxxxxx 10xxxxxx   首字节小于0xf0=11110000\n            if (i < len - 2 && (data[i + 1] >> 6) === 0b10 && (data[i + 2] >> 6) === 0b10) {\n                // 1110xxxx -> 0b1111 ->  0xf\n                unicode.push(((data[i] & 0xf) << 12) | ((data[i + 1] & 0x3f) << 6) | (data[i + 2] & 0x3f));\n                i += 3;\n                continue;\n            }\n        } else if (data[i] < 0xf8) {\n            // 四字节，unicode = 3bit + 6bit + 6bit + 6bit\n            // 010000-10FFFF\t11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 首字节小于0xf8=11111000\n            if (i < len - 3 && (data[i + 1] >> 6) === 0b10 && (data[i + 2] >> 6) === 0b10 && (data[i + 3] >> 6) === 0b10) {\n                // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n                unicode.push(((data[i] & 0x7) << 18) | ((data[i + 1] & 0x3f) << 12) | ((data[i + 2] & 0x3f) << 6) | (data[i + 3] & 0x3f));\n                i += 4;\n                continue;\n            }\n        }\n        i++;\n    }\n    // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\n    return String.fromCodePoint.apply(null, unicode);\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:52:42 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:53:05\n * flv script tag处理\n */\n// amf0-file-format-specification\n// Adobe Flash Video File Format Specification Version 10.1\n\nimport { decodeUTF8 } from '../../utils/decode-utf8';\n\n/**\n * 数据源定义\n */\ntype Source = {\n    view: DataView,\n    i: number,\n}\n\n/**\n * 解码flv script tag数据\n * 处理AMF0数据\n */\nclass FlvScriptTagDecoder {\n    /**\n     * 解码script tag数据\n     * @param data script tag body数据\n     * @param offset 数据偏移量，默认：0\n     */\n    public static decode(data: ArrayBuffer, offset: number = 0): any {\n        let source: Source = {\n            view: new DataView(data, offset),\n            i: 0\n        }\n        source.i = 0;\n        let result: any = {};\n        try {\n            result[FlvScriptTagDecoder._read(source)] = FlvScriptTagDecoder._read(source);\n        } catch (e) { }\n        return result;\n    }\n\n    /**\n     * 从数据源读取AMF0格式数据\n     * @param s 数据源\n     */\n    private static _read(s: Source): any {\n        let view = s.view;\n        let len = view.byteLength;\n        let type = view.getUint8(s.i);\n        s.i++;\n        let result: any;\n        switch (type) {\n            case 0:\n                // Number Type\n                result = view.getFloat64(s.i);\n                s.i += 8;\n                return result;\n            case 1:\n                // Boolean Type\n                result = view.getUint8(s.i);\n                s.i++;\n                return result;\n            case 2:\n                // String Type\n                return FlvScriptTagDecoder._readString(s);\n            case 3:\n                // Object Type\n                result = {};\n                while (s.i < len - 4) {\n                    if (FlvScriptTagDecoder._isObjectEnd(s)) {\n                        s.i += 3;\n                        break;\n                    }\n                    FlvScriptTagDecoder._readObjProperty(s, result);\n                }\n                return result;\n            case 5:\n                // null Type\n                return null;\n            case 8:\n                // ECMA Array Type\n                result = {};\n                s.i += 4;\n                while (s.i < len - 8) {\n                    if (FlvScriptTagDecoder._isObjectEnd(s)) {\n                        s.i += 3;\n                        break;\n                    }\n                    FlvScriptTagDecoder._readObjProperty(s, result);\n                }\n                return result;\n            case 10:\n                // Strict Array Type\n                result = [];\n                let size = view.getUint32(s.i);\n                s.i += 4;\n                for (let i = 0; i < size; i++) {\n                    result.push(FlvScriptTagDecoder._read(s));\n                }\n                return result;\n            case 11:\n                // Date Type\n                return FlvScriptTagDecoder._readDate(s);\n            case 12:\n                // Long String Type\n                return FlvScriptTagDecoder._readLongString(s);\n        }\n    }\n\n    /**\n     * 判断Object End Type\n     * @param s 数据源\n     */\n    private static _isObjectEnd(s: Source): boolean {\n        // 0x00 0x00 0x09\n        if (s.i + 2 > s.view.byteLength - 1 ||\n            s.view.getInt16(s.i) === 0 && s.view.getUint8(s.i + 2) === 9) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 读取object属性\n     * @param s 数据源\n     * @param obj 输出\n     */\n    private static _readObjProperty(s: Source, obj: any): void {\n        let name = FlvScriptTagDecoder._readString(s);\n        let value = FlvScriptTagDecoder._read(s);\n        obj[name] = value;\n    }\n\n    /**\n     * 读取字符串\n     * @param s 数据源\n     */\n    private static _readString(s: Source): string {\n        // 16bit（字符串长度） + 字符串\n        const len = s.view.getUint16(s.i);\n        let result;\n        if (len > 0) {\n            result = decodeUTF8(s.view.buffer, s.view.byteOffset + s.i + 2, len);\n        } else {\n            result = '';\n        }\n        s.i += 2 + len;\n        return result;\n    }\n\n    /**\n     * 读取长字符串\n     * @param s 数据源\n     */\n    private static _readLongString(s: Source): string {\n        // 32bit（字符串长度） + 字符串\n        const len = s.view.getUint32(s.i);\n        let result;\n        if (len > 0) {\n            result = decodeUTF8(s.view.buffer, s.view.byteOffset + s.i + 4, len);\n        } else {\n            result = '';\n        }\n        s.i += 4 + len;\n        return result;\n    }\n\n    /**\n     * 读取日期\n     * @param s 数据源\n     */\n    private static _readDate(s: Source): Date {\n        // 64bit(utc) + 16bit(时区，分钟)\n        let timestamp = s.view.getFloat64(s.i);\n        s.i += 8;\n        let tz = s.view.getInt16(s.i);\n        s.i += 2;\n        return new Date(timestamp + tz * 60 * 1000);\n    }\n}\n\nexport default FlvScriptTagDecoder;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:14 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 15:26:13\n * flv解封装\n */\nimport { EventEmitter } from 'events';\nimport { ErrorDetails, ErrorTypes } from '../../core/errors';\nimport LasEvents from '../../core/events';\nimport MP4Remuxer from '../../remux/mp4-remuxer';\nimport { LasMainConfig } from '../../types/core';\nimport { FlvTag, FlvTagType } from '../../types/flv-object';\nimport { AudioTrack, TrackType, VideoTrack } from '../../types/remux';\nimport { Log } from '../../utils/log';\nimport { parseAudioSpecificConfig } from '../audio-specific-config';\nimport SPSParser from '../sps-parser';\nimport FlvScriptTagDecoder from './flv-script-tag-decoder';\n\n// 连续Non-monotonous上限，超过上限重置remux\nconst DISCONTINUITY_ON_NON_MONOTONOUS = 10;\n\nconst AUDIO_TIME_ORIGIN_THRESHOLD = 5;\n\ntype TagCacheItem = { tag: FlvTag, dataOffset: number };\nclass FlvDemux {\n    private tag = 'FlvDemux';\n    private _eventEmitter: EventEmitter;\n    private _remuxer: MP4Remuxer;\n    private _naluLengthSize: number;\n    private _hasVideo: boolean;\n    private _hasAudio: boolean;\n    private _videoTrack: VideoTrack;\n    private _audioTrack: AudioTrack;\n    private _remuxStat?: { timeOffset: number; isContinuous: boolean };\n    private _audioLastDTS: number = 0;\n    private _videoLastDTS: number = 0;\n    private _nonMonotonousTagCache?: TagCacheItem[];\n\n    private _audioCodec: string = '';\n    private _videoCodec: string = '';\n\n    constructor(eventEmitter: EventEmitter, remuxer: MP4Remuxer, config: LasMainConfig) {\n        this._eventEmitter = eventEmitter;\n        this._remuxer = remuxer;\n\n        this._naluLengthSize = 4;\n\n        this._hasVideo = true;\n        this._hasAudio = true;\n\n        this._videoTrack = {\n            id: 1,\n            type: TrackType.video,\n            codec: '',\n            timescale: 1000,\n            duration: 0,\n            samples: [],\n            mp4Samples: [],\n            inputTimescale: 1000,\n            sequenceNumber: 0,\n            width: 0,\n            height: 0,\n            codecWidth: 0,\n            codecHeight: 0,\n            sps: [],\n            pps: [],\n            pixelRatio: [],\n            profile: '',\n            level: '',\n            chromaFormat: '',\n            fps: 0,\n            sampleDuration: 0,\n        };\n        this._audioTrack = {\n            id: 2,\n            type: TrackType.audio,\n            codec: '',\n            timescale: 1000,\n            duration: 0,\n            samples: [],\n            mp4Samples: [],\n            inputTimescale: 1000,\n            sequenceNumber: 0,\n            samplerate: 0,\n            channelCount: 0,\n            config: [],\n            sampleDuration: 0,\n        };\n    }\n\n    public append(tags: FlvTag[], timeOffset: number, isContinuous: boolean): void {\n        if (!this._remuxStat) {\n            this._remuxStat = { timeOffset, isContinuous };\n        }\n        if (!tags.length) return;\n        tags.forEach(tag => {\n            if (tag.tagType === FlvTagType.VIDEO && this._hasVideo) {\n                this._parseVideoData(tag);\n            } else if (tag.tagType === FlvTagType.AUDIO && this._hasAudio) {\n                this._parseAudioData(tag);\n            } else if (tag.tagType === FlvTagType.SCRIPT) {\n                this._parseScriptTag(tag);\n            }\n        });\n        this._remux();\n    }\n\n    /**\n     * 设置codec\n     * @param audioCodec audioCodec\n     * @param videoCodec videoCodec\n     */\n    public setCodecs(audioCodec: string = '', videoCodec: string = ''): void {\n        this._audioCodec = audioCodec;\n        this._videoCodec = videoCodec;\n    }\n\n    public flvHead(hasAudio: boolean, hasVideo: boolean): void {\n        this._hasAudio = hasAudio;\n        this._hasVideo = hasVideo;\n    }\n\n    public destroy() { }\n\n    public flush() {\n        this._remux(true);\n        this._remuxStat = undefined;\n    }\n\n    public reset() {\n        this._videoTrack.samples = [];\n        this._audioTrack.samples = [];\n        this._audioLastDTS = this._videoLastDTS = 0;\n        this._remuxStat = undefined;\n    }\n\n    /**\n     * 处理script tag\n     * @param tag flv tag\n     */\n    private _parseScriptTag(tag: FlvTag) {\n        if (tag.body) {\n            const scriptData = FlvScriptTagDecoder.decode(tag.body.buffer);\n            scriptData.timestamp = tag.timestamp;\n            if (scriptData.hasOwnProperty('onMetaData')) {\n                const onMetaData = scriptData.onMetaData;\n                if (typeof onMetaData.framerate === 'number') {\n                    this._videoTrack.fps = this._videoTrack.fps || onMetaData.framerate;\n                }\n                Log.i(this.tag, 'Parsed onMetaData');\n            }\n            // script tag数据整个抛出\n            this._eventEmitter.emit(LasEvents.SCRIPT_PARSED, scriptData);\n        }\n    }\n\n    /**\n     * 处理flv video tag\n     * @param tag FlvTag\n     */\n    private _parseVideoData(tag: FlvTag) {\n        if (!tag.body) {\n            return;\n        }\n        // 获取 video tag body 第一字节\n        const spec = tag.body[0];\n        // UB[4] 获取是否是关键帧\n        tag.frameType = (spec & 0xf0) >>> 4;\n        // 获取编码格式\n        // UB[4] CodecID 7 = AVC\n        const codecId = spec & 0xf;\n        if (codecId !== 7) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `video codec Unsupported: ${codecId}`)\n            return;\n        }\n        // AVCPacketType\n        tag.codecId = codecId;\n        const packetType = tag.body[1];\n        // 3字节\n        tag.cts = ((tag.body[2] & 0xff) << 16) + ((tag.body[3] & 0xff) << 8) + (tag.body[4] & 0xff);\n\n        if (packetType === 0) {\n            // 处理sps/pps\n            this._parseAVCDecoderConfigurationRecord(tag, 5);\n        } else if (packetType === 1) {\n            this._parseAVCVideoData(tag, 5) || {};\n        } else if (packetType === 2) {\n        } else {\n            this._onError(ErrorDetails.DEMUX_ERROR, `video packet type error: ${packetType} `);\n            return;\n        }\n    }\n\n    /**\n     * 解析AVCDecoderConfigurationRecord\n     * @param tag flvtag\n     * @param dataOffset tag body offset\n     */\n    private _parseAVCDecoderConfigurationRecord(tag: FlvTag, dataOffset: number) {\n        if (!tag.body) {\n            return;\n        }\n        const track = this._videoTrack;\n        const arrayBuffer = tag.body.buffer;\n        const dataSize = tag.body.byteLength - dataOffset;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        const version = v.getUint8(0);\n        const avcProfile = v.getUint8(1);\n        // 忽略profile_compatibility、AVCLevelIndication\n        if (version !== 1 || avcProfile === 0) {\n            this._onError(ErrorDetails.DEMUX_ERROR, 'AVCDecoderConfiguration error');\n            return;\n        }\n\n        this._naluLengthSize = (v.getUint8(4) & 3) + 1;\n        if (this._naluLengthSize !== 3 && this._naluLengthSize !== 4) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `nalu length size error: ${this._naluLengthSize}`);\n            return;\n        }\n\n        const spsCount = v.getUint8(5) & 31;\n        if (spsCount === 0 || spsCount > 1) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `H264 SPS count error: ${spsCount}`);\n            return;\n        }\n\n        let offset = 6;\n        let spsList = [];\n        for (let i = 0; i < spsCount; i++) {\n            const len = v.getUint16(offset);\n            offset += 2;\n            if (len === 0) {\n                continue;\n            }\n            const sps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            offset += len;\n            spsList.push(sps);\n            const config = SPSParser.parse(sps);\n            const codecArray = sps.subarray(1, 4);\n            let codecString = 'avc1.';\n            for (let j = 0; j < 3; j++) {\n                let h = codecArray[j].toString(16);\n                if (h.length < 2) {\n                    h = '0' + h;\n                }\n                codecString += h;\n            }\n\n            if (\n                !!track.codec &&\n                (track.width !== config.width ||\n                    track.height !== config.height ||\n                    codecString !== track.codec)\n            ) {\n                // sps有更新，现有缓存视频帧全部remux。需要重新生成mp4头\n                this._remux(true);\n                this._remuxer.resetMoov();\n            }\n            track.sps = spsList;\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelAspectRatio\n            if (config.fps) {\n                track.fps = config.fps;\n            }\n            track.codec = codecString;\n\n            track.profile = config.profile;\n            track.level = config.level;\n            track.chromaFormat = config.chromaFormat;\n        }\n\n        const ppsCount = v.getUint8(offset);\n        if (ppsCount === 0 || ppsCount > 1) {\n            this._onError(ErrorDetails.DEMUX_ERROR, `H264 PPS count error: ${ppsCount}`);\n            return;\n        }\n\n        offset++;\n        track.pps = [];\n        for (let i = 0; i < ppsCount; i++) {\n            const len = v.getUint16(offset);\n            offset += 2;\n            const pps = new Uint8Array(arrayBuffer, dataOffset + offset, len);\n            track.pps.push(pps);\n            if (len === 0) {\n                continue;\n            }\n            offset += len;\n        }\n        Log.v(this.tag, 'Parsed AVCDecoderConfigurationRecord');\n\n        track.sampleDuration = Math.floor(track.timescale / (track.fps || 25));\n    }\n\n    /**\n     * 解析视频tag\n     * @param tag flv tag\n     * @param dataOffset dataOffset\n     */\n    private _parseAVCVideoData(tag: FlvTag, dataOffset: number, fromNonMonotonousCache: boolean = false) {\n        if (!tag.body) {\n            return;\n        }\n        let info;\n        const arrayBuffer = tag.body.buffer;\n        const dataSize = tag.body.byteLength - dataOffset;\n        const v = new DataView(arrayBuffer, dataOffset, dataSize);\n\n        const units = [];\n        let length = 0;\n\n        let offset = 0;\n        const lengthSize = this._naluLengthSize;\n        let dts = tag.timestamp;\n        let keyframe = tag.frameType === 1; // from FLV Frame Type constants\n        // 处理Non-monotonous DTS及丢帧时间修正后可能出现的时间重叠\n        if (!fromNonMonotonousCache && dts <= this._videoLastDTS && this._videoLastDTS > 0) {\n            Log.w(this.tag, `debug Non-monotonous DTS dts:${dts} last:${this._videoLastDTS}`);\n            this._onNonMonotonous({ tag, dataOffset }, TrackType.video);\n            return;\n        }\n        if (!fromNonMonotonousCache && this._nonMonotonousTagCache) {\n            this._flushNonMonotonousCache();\n        }\n\n        if (fromNonMonotonousCache && dts <= this._videoLastDTS) {\n            dts = this._videoLastDTS + 1;\n        }\n        const pts = dts + tag.cts;\n        while (offset < dataSize) {\n            if (offset + 4 >= dataSize) {\n                Log.v(this.tag, `ignore nalu. timestamp = ${tag.timestamp}, offset = ${offset}, dataSize = ${dataSize}`);\n                break;\n            }\n            let naluSize = v.getUint32(offset);\n            if (lengthSize === 3) {\n                naluSize >>>= 8;\n            }\n            if (naluSize > dataSize - lengthSize) {\n                Log.v(this.tag, `ignore nalu. naluSize > dataSize timestamp ${dts}`);\n                return;\n            }\n            const data = new Uint8Array(arrayBuffer, dataOffset + offset + 4, lengthSize + naluSize - 4);\n            let unitType;\n            if (tag.codecId === 7) {\n                unitType = v.getUint8(offset + lengthSize) & 0x1f;\n                if (unitType === 5) {\n                    keyframe = true;\n                }\n            }\n\n            units.push(data);\n            length += data.byteLength;\n            offset += lengthSize + naluSize;\n        }\n\n        if (units.length) {\n            const track = this._videoTrack;\n            const avcSample = {\n                units,\n                length,\n                dts: dts,\n                cts: tag.cts,\n                pts: pts,\n                streamDTS: dts,\n                key: keyframe\n            };\n            track.samples.push(avcSample);\n        }\n        this._videoLastDTS = dts;\n        return info;\n    }\n\n    /**\n     * 解析音频tag\n     * @param tag flv tag\n     */\n    private _parseAudioData(tag: FlvTag) {\n        if (!tag.body) {\n            return;\n        }\n        const dataSize = tag.body.byteLength;\n        let aacFrameLen;\n        if (dataSize <= 1) {\n            Log.v(this.tag, 'audio packet no payload!');\n            return;\n        }\n        const track = this._audioTrack;\n        const packetType = tag.body[1];\n        if (packetType === 0) {\n            if (tag.body.byteLength < 4) {\n                return;\n            }\n            let info = parseAudioSpecificConfig(tag.body, 0, this._audioCodec);\n            if (info) {\n                track.config = info.config;\n                track.timescale = track.samplerate = info.samplerate;\n                track.channelCount = info.channelCount;\n                track.codec = info.codec;\n                track.defaultCodec = info.defaultCodec;\n                track.sampleDuration = 1024 * 1000 / track.samplerate;\n            } else {\n                this._onError(ErrorDetails.DEMUX_ERROR, 'AudioSpecificConfig parse error');\n            }\n\n            return;\n        } else if (packetType === 1) {\n            const aacData = tag.body.subarray(2);\n            // AAC raw frame data\n            let dts = tag.timestamp;\n            // 通过时间计算的dts与通过帧长度计算的dts比对，判断是否发生了跳帧\n            // aac帧长度\n            aacFrameLen = 1024 * 1000 / track.samplerate;\n            if (this._audioLastDTS > 0) {\n                // 默认使用时间戳累加方式\n                dts = this._audioLastDTS + aacFrameLen;\n                const dtsDiff = tag.timestamp - dts;\n                let threshold = aacFrameLen * AUDIO_TIME_ORIGIN_THRESHOLD;\n                if (dtsDiff > threshold || dtsDiff < -threshold) {\n                    // 超出阈值使用tag.timestamp\n                    dts = tag.timestamp;\n                }\n            }\n\n            const aacSample = {\n                unit: aacData,\n                length: aacData.byteLength,\n                dts: dts,\n                pts: dts,\n                streamDTS: tag.timestamp\n            };\n            this._audioLastDTS = dts;\n            track.samples.push(aacSample);\n        } else {\n            Log.v(this.tag, `Unsupported AAC data type ${packetType}`);\n        }\n    }\n\n    /**\n     * 检测到Non-monotonous\n     * 少量出现Non-monotonous尝试修正时间戳\n     * 连续出现Non-monotonous按照中断重推处理\n     * @param data tag相关数据\n     * @param type audio|video\n     */\n    private _onNonMonotonous(data: TagCacheItem, type: TrackType) {\n        if (!this._nonMonotonousTagCache) {\n            this._nonMonotonousTagCache = [];\n        }\n        const cache = this._nonMonotonousTagCache;\n        if (cache.length > DISCONTINUITY_ON_NON_MONOTONOUS) {\n            this.flush();\n            const lastPTS = this._remuxer.getLastPTS();\n            let ptsSync: number = lastPTS.audio;\n            if (ptsSync === 0 || (lastPTS.video > 0 && lastPTS.video < ptsSync)) {\n                ptsSync = lastPTS.video;\n            }\n            this._videoTrack.samples = [];\n            this._audioTrack.samples = [];\n            this._audioLastDTS = this._videoLastDTS = 0;\n            this._remuxStat = { isContinuous: false, timeOffset: ptsSync };\n            this._remuxer.resetMoov();\n            this._remuxer.resetTimeStamp();\n            Log.i(this.tag, 'NON_MONOTONOUS reset time');\n            this._flushNonMonotonousCache();\n        } else {\n            cache.push(data);\n        }\n    }\n\n    /**\n     * 清空Non-monotonous数据，remux\n     */\n    private _flushNonMonotonousCache() {\n        if (this._nonMonotonousTagCache) {\n            const nonMonotonousCache = this._nonMonotonousTagCache;\n            const cache = nonMonotonousCache;\n            while (cache.length) {\n                const data = cache.shift();\n                if (data) {\n                    this._parseAVCVideoData(data.tag, data.dataOffset, true);\n                }\n            }\n            this._nonMonotonousTagCache = undefined;\n        }\n    }\n\n    private _remux(end = false) {\n        const audiotrack = this._audioTrack;\n        const videotrack = this._videoTrack;\n        let isContinuous = true,\n            timeOffset = 0;\n        if (this._remuxStat) {\n            isContinuous = this._remuxStat.isContinuous;\n            timeOffset = this._remuxStat.timeOffset;\n        }\n\n        if (audiotrack.samples.length === 0 && videotrack.samples.length === 0) {\n            if (end) {\n                this._remuxer.flush();\n            }\n            return;\n        }\n\n        if (!end && (this._hasAudio && audiotrack.samples.length === 0 || this._hasVideo && videotrack.samples.length < 2)) {\n            return;\n        }\n        try {\n            this._remuxer.remux(audiotrack, videotrack, timeOffset, isContinuous, end);\n            this._remuxStat = undefined;\n        } catch (error) {\n            Log.e(this.tag, error);\n            this._onError(ErrorDetails.REMUX_ERROR, error.message)\n        }\n    }\n\n    /**\n     * 错误处理，抛出错误事件\n     * @param details ErrorDetails\n     * @param reason 错误原因\n     */\n    private _onError(details: ErrorDetails, reason: string) {\n        this._eventEmitter.emit(LasEvents.ERROR, {\n            type: ErrorTypes.MUX_ERROR,\n            details: details,\n            fatal: true,\n            info: {\n                reason\n            }\n        });\n    }\n}\n\nexport default FlvDemux;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:52:14 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:52:14 \n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../../core/events';\nimport MP4Remuxer from '../../remux/mp4-remuxer';\nimport { LasMainConfig } from '../../types/core';\nimport { FlvTag } from '../../types/flv-object';\nimport FlvDemuxer from './flv-demuxer';\n\nclass FlvDemuxerInline {\n    private tag: string = 'Flv';\n    private _eventEmitter: EventEmitter;\n    private _config: LasMainConfig;\n    private _extraData: any;\n\n    private _demuxer!: FlvDemuxer;\n    private _remuxer!: MP4Remuxer;\n\n    constructor(eventEmitter: EventEmitter, config: LasMainConfig, extraData: any) {\n        this._eventEmitter = eventEmitter;\n        this._config = config;\n\n        this._extraData = extraData;\n    }\n\n    public init(): void {\n        const config = this._config,\n            eventEmitter = this._eventEmitter;\n\n        const remuxer = (this._remuxer = new MP4Remuxer(eventEmitter, config));\n        this._demuxer = new FlvDemuxer(eventEmitter, remuxer, config);\n        remuxer.setExtra(this._extraData);\n    }\n\n    public setCodecs(audioCodec: string = '', videoCodec: string = ''): void {\n        this._demuxer.setCodecs(audioCodec, videoCodec);\n    }\n\n    public flvHead(hasAudio: boolean, hasVideo: boolean): void {\n        this._demuxer.flvHead(hasAudio, hasVideo);\n    }\n\n    public append(tags: FlvTag[], timeOffset: number, isContinuous: boolean) {\n        if (!isContinuous) {\n            this._demuxer.reset();\n            this._remuxer.resetMoov();\n            this._remuxer.resetTimeStamp();\n        }\n        this._demuxer.append(tags, timeOffset, isContinuous);\n    }\n\n    public end(): void {\n        this._demuxer.flush();\n        this._remuxer.flush();\n        this._eventEmitter.emit(LasEvents.LOAD_END);\n    }\n\n    public flush(): void {\n        if (this._demuxer) {\n            this._demuxer.flush();\n        }\n    }\n\n    public setExtra(data: any): void {\n        this._extraData = data;\n        if (this._remuxer) {\n            this._remuxer.setExtra(this._extraData);\n        }\n    }\n\n    public destroy(): void { }\n\n}\n\nexport default FlvDemuxerInline;\n","function webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __webpack_require__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __webpack_require__.m = modules;\n\n/******/  // expose the module cache\n/******/  __webpack_require__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __webpack_require__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __webpack_require__.d = function(exports, name, getter) {\n/******/    if(!__webpack_require__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // define __esModule on exports\n/******/  __webpack_require__.r = function(exports) {\n/******/    Object.defineProperty(exports, '__esModule', { value: true });\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __webpack_require__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __webpack_require__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\nvar moduleNameReqExp = '[\\\\.|\\\\-|\\\\+|\\\\w|\\/|@]+'\nvar dependencyRegExp = '\\\\(\\\\s*(\\/\\\\*.*?\\\\*\\/)?\\\\s*.*?(' + moduleNameReqExp + ').*?\\\\)' // additional chars when output.pathinfo is true\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction isNumeric(n) {\n  return !isNaN(1 * n); // 1 * n converts integers, integers as string (\"123\"), 1e3 and \"1e3\" to integers and strings to NaN\n}\n\nfunction getModuleDependencies (sources, module, queueName) {\n  var retval = {}\n  retval[queueName] = []\n\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\w*\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n  var webpackRequireName = wrapperSignature[1]\n\n  // main bundle deps\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g')\n  var match\n  while ((match = re.exec(fnString))) {\n    if (match[3] === 'dll-reference') continue\n    retval[queueName].push(match[3])\n  }\n\n  // dll deps\n  re = new RegExp('\\\\(' + quoteRegExp(webpackRequireName) + '\\\\(\"(dll-reference\\\\s(' + moduleNameReqExp + '))\"\\\\)\\\\)' + dependencyRegExp, 'g')\n  while ((match = re.exec(fnString))) {\n    if (!sources[match[2]]) {\n      retval[queueName].push(match[1])\n      sources[match[2]] = __webpack_require__(match[1]).m\n    }\n    retval[match[2]] = retval[match[2]] || []\n    retval[match[2]].push(match[4])\n  }\n\n  // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3\n  var keys = Object.keys(retval);\n  for (var i = 0; i < keys.length; i++) {\n    for (var j = 0; j < retval[keys[i]].length; j++) {\n      if (isNumeric(retval[keys[i]][j])) {\n        retval[keys[i]][j] = 1 * retval[keys[i]][j];\n      }\n    }\n  }\n\n  return retval\n}\n\nfunction hasValuesInQueues (queues) {\n  var keys = Object.keys(queues)\n  return keys.reduce(function (hasValues, key) {\n    return hasValues || queues[key].length > 0\n  }, false)\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = {\n    main: [moduleId]\n  }\n  var requiredModules = {\n    main: []\n  }\n  var seenModules = {\n    main: {}\n  }\n\n  while (hasValuesInQueues(modulesQueue)) {\n    var queues = Object.keys(modulesQueue)\n    for (var i = 0; i < queues.length; i++) {\n      var queueName = queues[i]\n      var queue = modulesQueue[queueName]\n      var moduleToCheck = queue.pop()\n      seenModules[queueName] = seenModules[queueName] || {}\n      if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue\n      seenModules[queueName][moduleToCheck] = true\n      requiredModules[queueName] = requiredModules[queueName] || []\n      requiredModules[queueName].push(moduleToCheck)\n      var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName)\n      var newModulesKeys = Object.keys(newModules)\n      for (var j = 0; j < newModulesKeys.length; j++) {\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || []\n        modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]])\n      }\n    }\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = {\n    main: __webpack_modules__\n  }\n\n  var requiredModules = options.all ? { main: Object.keys(sources.main) } : getRequiredModules(sources, moduleId)\n\n  var src = ''\n\n  Object.keys(requiredModules).filter(function (m) { return m !== 'main' }).forEach(function (module) {\n    var entryModule = 0\n    while (requiredModules[module][entryModule]) {\n      entryModule++\n    }\n    requiredModules[module].push(entryModule)\n    sources[module][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'\n    src = src + 'var ' + module + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module].map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[module][id].toString() }).join(',') + '});\\n'\n  })\n\n  src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources.main[id].toString() }).join(',') + '}))(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:51:57 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:51:57 \n * worker\n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../../core/events';\nimport { WorkerCmd } from '../../core/worker-cmd';\nimport { LasMainConfig } from '../../types/core';\nimport { MP4RemuxResult } from '../../types/remux';\nimport { Log } from '../../utils/log';\nimport FlvDemuxerInline from './flv-demuxer-inline';\n\nexport default function (self: any) {\n    let flv: FlvDemuxerInline;\n\n    const eventEmitter = new EventEmitter();\n    eventEmitter.on(LasEvents.MEDIA_INFO, data => { self.postMessage({ event: LasEvents.MEDIA_INFO, data: data }); });\n    eventEmitter.on(LasEvents.ERROR, data => { self.postMessage({ event: LasEvents.ERROR, data: data }); });\n    eventEmitter.on(LasEvents.SCRIPT_PARSED, data => { self.postMessage({ event: LasEvents.SCRIPT_PARSED, data: data }); });\n    eventEmitter.on(LasEvents.LOAD_END, data => { self.postMessage({ event: LasEvents.LOAD_END, data: data }); });\n    eventEmitter.on(LasEvents.MP4_SEGMENT, (data: MP4RemuxResult) => {\n        const message = { event: LasEvents.MP4_SEGMENT, data };\n        let payloads: ArrayBuffer[] = [];\n        data.segments.forEach(element => {\n            payloads.push(element.payload.buffer);\n        });\n        self.postMessage(message, payloads);\n    });\n\n    function init(eventEmitter: EventEmitter, config: LasMainConfig, data: any) {\n        flv = new FlvDemuxerInline(eventEmitter, config, data);\n        flv.init();\n    }\n\n    function destroy() {\n        if (flv) {\n            flv.destroy();\n        }\n        if (eventEmitter) {\n            eventEmitter.removeAllListeners();\n        }\n    }\n\n    self.addEventListener('message', function (e: { data: any }) {\n        const d = e.data;\n        switch (d.cmd) {\n            case WorkerCmd.INIT:\n                Log.level(d.config.debug);\n                init(eventEmitter, d.config, d.data);\n                break;\n            case WorkerCmd.DESTROY:\n                destroy();\n                break;\n            case WorkerCmd.APPEND_DATA:\n                flv.append(d.tags, d.timeOffset, d.isContinuous);\n                break;\n            case WorkerCmd.SET_CODECS:\n                flv.setCodecs(d.audioCodec, d.videoCodec);\n                break;\n            case WorkerCmd.FLV_HEAD:\n                flv.flvHead(d.hasAudio, d.hasVideo);\n                break;\n            case WorkerCmd.FLUSH:\n                flv.flush();\n                break;\n            case WorkerCmd.SET_EXTRA:\n                flv.setExtra(d.data);\n                break;\n            case WorkerCmd.LOAD_END:\n                flv.end();\n                break;\n        }\n    });\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:37:56 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:37:56 \n * 配置解析处理\n */\nimport { LasConfig } from './types/core';\nimport BrowserHelper from './utils/browser-helper';\nimport { Log, LOG_LEVEL } from './utils/log';\n\nconst DEFAULT_CONFIG: LasConfig = {\n    webWorker: true, // 是否开启webworker\n    appendErrorMaxRetry: 3, // mse append出错后重试次数\n    credentials: false, // 请求是否带cookie\n    defaultLiveDelay: -2000,\n    debug: LOG_LEVEL.LEVEL_ERROR,\n    connectionTimeout: 10000, // 流连接超时\n    transmissionTimeout: 30000, // 流传输超时\n    autoRecoverMedia: false, // 尝试自动恢复video.error\n};\n\nclass ConfigHelper {\n    /**\n     * 处理传入的config\n     * @param userConfig 传入config\n     * @returns config\n     */\n    static processConfig(userConfig: any): LasConfig {\n        const config: LasConfig = Object.assign({}, DEFAULT_CONFIG);\n        Object.assign(config, userConfig);\n\n        if (!(window as any).Worker) {\n            config.webWorker = false;\n        }\n        if (config.debug) {\n            Log.level(config.debug);\n        }\n        config.gopRemux = BrowserHelper.isSafari;\n        return config;\n    }\n}\n\nexport { DEFAULT_CONFIG, ConfigHelper };\n\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:54:16 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 17:11:02\n * las请求地址生成\n */\n/**\n * 生成切换flv的请求地址\n * @param url 流地址\n * @param spts 切换时间戳，单位毫秒。大于0：关键帧pts；小于0：直播延迟\n */\nexport function abrGetUrl(url: string, spts?: number): string {\n    if (typeof spts === 'undefined') {\n        return url;\n    }\n    let arr = url.split('?');\n    arr.splice(1, 0, `?startPts=${spts}${arr.length > 1 ? '&' : ''}`);\n    return arr.join('');\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:57 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:53:57 \n * 单个清晰度流定义\n */\nexport default class AbrLevel {\n    public url: string;\n    public bitrate: number = 0;\n    public maxBitrate: number = 0;\n    public avgBitrate: number = 0;\n    public qualityType: string = '';\n    public qualityTypeName: string = '';\n    public id: number = 0;\n    public codec: string = '';\n    public audioCodec?: string = '';\n    public videoCodec?: string = '';\n    public hidden: boolean = false;\n    public disabledFromAdaptive: boolean = false;\n    public defaultSelected: boolean = false;\n\n    constructor(url: string) {\n        this.url = url;\n    }\n}","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:40 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:53:40 \n * manfest定义及解析\n */\nimport { parseCodecStr } from \"../utils/codec-helper\";\nimport AbrLevel from \"./abr-level\";\nexport type Representation = {\n    // 每个媒体表示的唯一标识号\n    id: number,\n    // 媒体表示的URL地址\n    url: string,\n    // 媒体表示的备用URL地址\n    backupUrl: string[],\n    // 媒体表示的域名\n    host: string,\n    // 媒体表示的编码码率\n    maxBitrate: number,\n    // 媒体表示的平均码率\n    avgBitrate: number,\n    // 音视频流的编码方式\n    codec: string,\n    // 媒体表示的宽度\n    width: number,\n    // 媒体表示的高度\n    height: number,\n    // 媒体表示的帧率\n    frameRate: number,\n    // 媒体表示的质量类型\n    qualityType: string,\n    // 媒体表示的质量类型展示字段\n    qualityTypeName: string,\n    // 媒体表示隐藏选项。设定为true，则对应的媒体表示不外显，用户无法选择，只能通过自适应功能选中；设定为false，则对应的媒体表示外显，用户可手动选择\n    hidden: boolean,\n    // 媒体表示自适应选项。设定为false，则对应的媒体表示对于自适应功能可见，能被自适应功能选中；\n    disabledFromAdaptive: boolean,\n    // 默认档功能选项。@defaultSelect为true的媒体表示启播默认播放。所有@representation中，最多只能出现一个媒体表示的@defaultSelect为true；没有@representation设置defaultSelect为true时，自动选择媒体表示启播播放\n    defaultSelected: boolean\n}\n\ntype AdaptationSet = {\n    // adaptationSet的唯一标识号\n    id: number;\n    // 媒体流GOP的长度，单位为毫秒\n    duration: number;\n    // 媒体表示的集合，媒体表示的集合包含一个或多个媒体表示\n    representation: Representation[];\n};\n\nexport type AbrManifestData = {\n    // 版本号\n    version: string,\n    // 自适应集合，每个MPD由一个或多个自适应集合组成\n    adaptationSet: AdaptationSet[];\n};\n\n/**\n * las manifest\n */\nexport class AbrManifest {\n    private _levels: AbrLevel[] = [];\n    private _abrLevels: number[] = [];\n    private _default?: number;\n\n    /**\n     * 验证las manifest数据\n     * @param data 输入数据\n     */\n    public static verify(data: any) {\n        if (\n            data &&\n            data.hasOwnProperty('version') &&\n            data.hasOwnProperty('adaptationSet') &&\n            Array.isArray(data.adaptationSet) &&\n            data.adaptationSet.length > 0\n        ) {\n            return data.adaptationSet.reduce((prev: boolean, item: any) => {\n                return !!(prev && item.representation && item.representation.length)\n            }, true);\n        }\n        return false;\n    }\n\n    /**\n     * 构造函数，解析传入的manifest\n     * @param manifest las manifest\n     */\n    constructor(manifest: AbrManifestData) {\n        if (AbrManifest.verify(manifest)) {\n            manifest.adaptationSet[0].representation.forEach((item, index) => {\n                let level = new AbrLevel(item.url);\n                level.id = item.id || 0;\n                level.maxBitrate = item.maxBitrate || 0;\n                level.avgBitrate = item.avgBitrate || 0;\n                level.bitrate = item.avgBitrate || level.maxBitrate;\n                level.qualityType = item.qualityType || '';\n                level.qualityTypeName = item.qualityTypeName || '';\n                level.codec = item.codec || '';\n                if (level.codec) {\n                    const codecs = parseCodecStr(level.codec);\n                    level.audioCodec = codecs.audio;\n                    level.videoCodec = codecs.video;\n                }\n                level.hidden = item.hidden || false;\n                level.disabledFromAdaptive = item.disabledFromAdaptive || item.disabledFromAdaptive;\n                level.defaultSelected = item.defaultSelected || false;\n                this._levels.push(level);\n\n                if (!level.disabledFromAdaptive) {\n                    this._abrLevels.push(index);\n                }\n                if (level.defaultSelected && typeof this._default === 'undefined') {\n                    this._default = index;\n                }\n            });\n            this._levels.sort((a, b) => {\n                return a.bitrate - b.bitrate;\n            });\n        } else {\n            return;\n        }\n    }\n\n    /**\n     * 码率列表\n     */\n    public get levels(): AbrLevel[] {\n        return this._levels;\n    }\n\n    /**\n     * 可用于自适应切换的码率index列表\n     */\n    public get abrLevels(): number[] {\n        return this._abrLevels;\n    }\n\n    /**\n     * 默认起播清晰度\n     */\n    public get default(): number {\n        return this._default || 0;\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:38 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:38 \n * 封装的xhr\n */\nimport { IInternalLoader, IInternalLoaderCallback, ILoaderContext } from '../types/io';\nexport enum XHR_TYPE {\n    MOZ_CHUNK = 'moz-chunked-arraybuffer',\n    MS_STREAM = 'ms-stream',\n    UNKNOW = 'unknow',\n    UNSUPPORT = ''\n}\n\n/**\n * XhrLoader\n * @class XhrLoader\n */\nexport class XHR implements IInternalLoader<ILoaderContext> {\n    private static supportChunk: XHR_TYPE = XHR_TYPE.UNKNOW;\n\n    public tag: string = 'xhr';\n    private _xhr: XMLHttpRequest | null = null;\n    private _context!: ILoaderContext;\n    private _callbacks: IInternalLoaderCallback<ILoaderContext> | null = null;\n    private _reader: MSStreamReader | null = null;\n    private _msBufferOffset: number = 0;\n    private _msBufferUpper: number = 16 * 1024 * 1024; // 16MB\n    private _progress: XHR_TYPE = XHR_TYPE.UNKNOW;\n\n    static isSupportChunk() {\n        if (XHR.supportChunk !== XHR_TYPE.UNKNOW) {\n            return XHR.supportChunk;\n        }\n        try {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://example.com', true);\n            (xhr.responseType as any) = XHR_TYPE.MOZ_CHUNK;\n            if ((xhr.responseType as any) === XHR_TYPE.MOZ_CHUNK) {\n                XHR.supportChunk = XHR_TYPE.MOZ_CHUNK;\n                return XHR.supportChunk;\n            }\n        } catch (e) {\n            XHR.supportChunk = XHR_TYPE.UNSUPPORT;\n        }\n        try {\n            const xhr = new XMLHttpRequest();\n            xhr.open('GET', 'https://example.com', true);\n            (xhr.responseType as any) = XHR_TYPE.MS_STREAM;\n            if ((xhr.responseType as any) === XHR_TYPE.MS_STREAM) {\n                XHR.supportChunk = XHR_TYPE.MS_STREAM;\n                return XHR.supportChunk;\n            }\n        } catch (e) {\n            XHR.supportChunk = XHR_TYPE.UNSUPPORT;\n        }\n        return XHR_TYPE.UNSUPPORT;\n    }\n\n    constructor() {\n        this._xhr = null;\n        this._msBufferOffset = 0;\n    }\n\n    /**\n     * 开始加载\n     * @param context\n     * @param callbacks\n     */\n    load(context: ILoaderContext, callbacks: IInternalLoaderCallback<ILoaderContext>) {\n        this._callbacks = callbacks;\n        this._context = context;\n        this._progress = XHR_TYPE.UNSUPPORT;\n        if (context.progress && context.responseType === 'arraybuffer') {\n            this._progress = XHR.isSupportChunk();\n            if (this._progress === XHR_TYPE.MS_STREAM) {\n                const reader = this._reader = new (self as any).MSStreamReader();\n                reader.onprogress = this._msrOnProgress.bind(this);\n                reader.onload = this._onLoadEnd.bind(this);\n                reader.onerror = this._onError.bind(this);\n            }\n        }\n\n        const xhr = this._xhr = new XMLHttpRequest();\n        xhr.open('GET', this._context.url, true);\n        // arraybuffer类型尝试使用chunk\n        if (this._progress === XHR_TYPE.MOZ_CHUNK) {\n            (xhr.responseType as any) = XHR_TYPE.MOZ_CHUNK;\n            xhr.onprogress = this._onProgress.bind(this);\n            xhr.onload = this._onLoadEnd.bind(this);\n        } else if (this._progress === XHR_TYPE.MS_STREAM) {\n            (xhr.responseType as any) = XHR_TYPE.MS_STREAM;\n        } else {\n            (xhr.responseType as any) = context.responseType || 'arraybuffer';\n            xhr.onload = this._onLoadEnd.bind(this);\n        }\n        xhr.onreadystatechange = this._onReadyStateChange.bind(this);\n        xhr.onerror = this._onError.bind(this);\n        xhr.withCredentials = !!context.credentials;\n\n        xhr.send();\n    }\n\n    /**\n     * abort request\n     */\n    abort() {\n        if (this._reader) {\n            // 0 EMPTY 1 LOADING 2 DONE\n            if (this._reader.readyState === 1) {\n                this._reader.abort();\n            }\n            this._reader.onprogress = null;\n            this._reader.onload = null;\n            this._reader.onerror = null;\n            this._reader = null;\n        }\n        if (this._xhr) {\n            this._xhr.onreadystatechange = null;\n            this._xhr.onprogress = null;\n            this._xhr.onload = null;\n            this._xhr.onerror = null;\n            this._xhr.abort();\n            this._xhr = null;\n        }\n    }\n\n    /**\n     * destroy xhr Object clean cache\n     */\n    destroy() {\n        this._callbacks = null;\n        this.abort();\n    }\n\n    _onReadyStateChange(e: Event) {\n        if (!this._xhr) {\n            return;\n        }\n        const xhr = this._xhr;\n        if (xhr.readyState === 2) {\n            this._context.responseUrl = xhr.responseURL;\n            this._context.responseHeader = xhr.getAllResponseHeaders();\n            if (this._callbacks && this._callbacks.onConnect) {\n                this._callbacks.onConnect(xhr.status);\n            }\n            if (xhr.status < 200 || xhr.status > 299) {\n                this._onError(new Error('xhr error'));\n            }\n        } else if (xhr.readyState === 3) {\n            if (this._reader && this._reader.readyState === 0 && xhr.status >= 200 && xhr.status <= 299) {\n                this._reader.readAsArrayBuffer(xhr.response);\n            }\n        }\n    }\n\n    /**\n     * xhr onProgress\n     * @param {*} e xhr回调数据\n     */\n    _onProgress(e: Event) {\n        if (!this._xhr) {\n            return;\n        }\n        const chunk = this._xhr.response;\n        if (this._callbacks && this._callbacks.onProgress && chunk) {\n            this._callbacks.onProgress(chunk);\n        }\n    }\n\n    /**\n     * ms-stream progress\n     * @param {*} e MSStreamReader回调\n     */\n    _msrOnProgress(e: any) {\n        const reader = e.target;\n        const buffer = reader.result;\n        if (!buffer) {\n            // result may be null, workaround for buggy M$\n            this._onError(new Error('ms buffer null'));\n            return;\n        }\n\n        const chunk = buffer.slice(this._msBufferOffset);\n        this._msBufferOffset = buffer.byteLength;\n\n        if (this._callbacks && this._callbacks.onProgress) {\n            this._callbacks.onProgress(chunk);\n        }\n\n        if (buffer.byteLength >= this._msBufferUpper) {\n            this._onError(new Error('ms buffer too large'));\n        }\n    }\n\n    /**\n     * xhr onLoadEnd\n     * @param {*} e xhr回调数据\n     */\n    _onLoadEnd(e: ProgressEvent) {\n        let data = null;\n        const target = this._xhr;\n        if (!this._progress && target) {\n            data = target.response;\n        }\n        if (this._callbacks) {\n            this._callbacks.onEnd(data);\n        }\n    }\n\n    /**\n     * xhr onXhrError\n     * @param {*} e xhr回调数据\n     * @private\n     */\n    _onError(e: any) {\n        if (this._callbacks && this._callbacks.onError) {\n            this._callbacks.onError(e);\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:44:39 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:44:39 \n * 处理codec字符串，拆分音视频codec\n */\nimport { TrackType } from \"../types/remux\";\n\ntype Codecs = Partial<Record<TrackType, string>>;\n\n/**\n * 拆解codec串\n * @param value codec串\n */\nexport function parseCodecStr(value: string): Codecs {\n    let result: Codecs = {};\n    (value || '').split(/[ ,]+/).forEach(codec => {\n        if (codec.indexOf('avc1') === 0) {\n            result.video = codec;\n        }\n        if (codec.indexOf('mp4a') === 0) {\n            result.audio = codec;\n        }\n    });\n    return result;\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:16 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:16 \n * 封装的fetch\n */\nimport { IInternalLoader, IInternalLoaderCallback, ILoaderContext } from '../types/io';\n\nexport default class FetchLoader implements IInternalLoader<ILoaderContext> {\n    public tag: string = 'fetch';\n    private _context!: ILoaderContext;\n    private _callbacks: IInternalLoaderCallback<ILoaderContext> | null = null;\n    private _controller: AbortController | null = null;\n    private _reader: ReadableStreamReader | null = null;\n    private _abort: boolean = false;\n\n    /**\n     * broswer is support moz-chunk\n     * @returns 是否支持\n     */\n    static isSupport(): boolean {\n        if (self.fetch && self.ReadableStream) {\n            return true;\n        }\n        return false;\n    }\n    /**\n     * 开始加载\n     * @param context context\n     * @param callbacks 回调\n     */\n    load(context: ILoaderContext, callbacks: IInternalLoaderCallback<ILoaderContext>) {\n        this._context = context;\n        this._callbacks = callbacks;\n\n        const reqHeaders = new Headers();\n        if (context.headers) {\n            context.headers.forEach(element => {\n                reqHeaders.append(element.header, element.value);\n            });\n        }\n        const params: RequestInit = {\n            method: 'GET',\n            headers: reqHeaders,\n            mode: 'cors',\n            cache: 'default',\n            referrerPolicy: 'no-referrer-when-downgrade',\n            signal: this._getAbortSignal()\n        };\n        if (context.credentials) {\n            params.credentials = 'include';\n        }\n        fetch(context.url, params)\n            .then(res => {\n                context.responseUrl = res.url;\n                context.responseHeader = res.headers;\n                if (this._callbacks && this._callbacks.onConnect) {\n                    this._callbacks.onConnect(res.status);\n                }\n                if (res.ok) {\n                    // 兼容AbortController不可用\n                    if (this._abort) {\n                        if (res.body) {\n                            res.body.getReader().cancel();\n                        }\n                        return;\n                    }\n                    if (context.responseType === 'arraybuffer') {\n                        if (context.progress) {\n                            if (res.body) {\n                                this._reader = res.body.getReader();\n                                this._pump(this._reader);\n                            }\n                            return;\n                        }\n                        res.arrayBuffer().then(responseData => {\n                            this._onEnd(context, responseData);\n                        });\n                        return;\n                    }\n                    res.text().then(responseData => {\n                        this._onEnd(context, responseData);\n                    });\n                    return;\n                }\n                const error = new Error(res.status + ' ' + res.statusText);\n                this._onError(error);\n                return;\n            })\n            .catch(e => {\n                // 忽略AbortError，避免与timeout手动abort冲突\n                if (e.name !== 'AbortError') {\n                    this._onError(e);\n                }\n            });\n    }\n\n    abort() {\n        if (this._controller) {\n            this._controller.abort();\n        } else if (this._reader) {\n            this._reader.cancel();\n            this._reader = null;\n        }\n        this._abort = true;\n    }\n\n    destroy() {\n        this._callbacks = null;\n        this.abort();\n    }\n\n    _onProgress(context: ILoaderContext, chunk: ArrayBuffer) {\n        if (this._callbacks && this._callbacks.onProgress) {\n            this._callbacks.onProgress(chunk);\n        }\n    }\n\n    _onEnd(context: ILoaderContext, responseData: ArrayBuffer | string | null) {\n        if (this._callbacks && this._callbacks.onEnd) {\n            this._reader = null;\n            this._controller = null;\n            this._callbacks.onEnd(responseData);\n        }\n    }\n\n    _onError(e: Error) {\n        if (this._callbacks && this._callbacks.onError) {\n            this._callbacks.onError(e);\n        }\n    }\n\n    /**\n     * pump data\n     * @param reader 读取数据\n     * @private\n     */\n    _pump(reader: ReadableStreamReader) {\n        reader\n            .read()\n            .then(result => {\n                if (this._abort) {\n                    reader.cancel();\n                    return null;\n                }\n                if (result.done) {\n                    this._onEnd(this._context, null);\n                    return null;\n                }\n                const chunk = result.value.buffer;\n                this._onProgress(this._context, chunk);\n                return this._pump(reader);\n            })\n            .catch((e: Error) => {\n                if (e.name !== 'AbortError') {\n                    this._onError(e);\n                }\n            });\n    }\n\n    _getAbortSignal(): AbortSignal | null {\n        try {\n            if (AbortController) {\n                this._controller = new AbortController();\n                return this._controller.signal;\n            }\n        } catch (e) {\n            return null;\n        }\n        return null;\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:50:30 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:50:30 \n * 下载器\n */\nimport { IInternalLoader, IInternalLoaderCallback, ILoader, ILoaderCallback, ILoaderConfig, ILoaderContext, ILoaderStats } from '../types/io';\nimport { Log } from '../utils/log';\nimport FetchLoader from './fetch';\nimport { XHR } from './xhr';\n\nlet ChunkLoader: any;\n\n/**\n * 加载器\n */\nexport default class Loader<T extends ILoaderContext> implements ILoader<T> {\n    public tag: string = 'loader';\n    private _context!: T;\n    private _loader?: IInternalLoader<T>;\n    private _callbacks?: ILoaderCallback<T>;\n    private _config: ILoaderConfig;\n    private _loaderCallback!: IInternalLoaderCallback<T>;\n    private _stats!: ILoaderStats;\n    private _retryDelay: number = 0;\n    private _loading: boolean = false;\n    private _aborted: boolean = false;\n    private _requestTimeout: any;\n    private _transTimer: any;\n    private _retryTimeout: any;\n    private _progressTime: number = 0;\n\n    constructor() {\n        this._config = {\n            useFetch: false,\n            connectionTimeout: 0,\n            transmissionTimeout: 0,\n            maxRetry: 0,\n            retryDelay: 0\n        };\n        this._loaderCallback = {\n            onConnect: this._onConnect,\n            onProgress: this._onProgress,\n            onEnd: this._onEnd,\n            onError: this._onError\n        };\n    }\n\n    /**\n     * 开始下载\n     * @param context 下载上下文信息\n     * @param callbacks 下载回调\n     * @param config 下载配置\n     */\n    public load(context: T, callbacks: ILoaderCallback<T>, config: ILoaderConfig): void {\n        this._context = context;\n        this._callbacks = callbacks;\n        this._config = config || this._config;\n\n        this._stats = {\n            requestStartTime: performance.now(),\n            retryCount: 0,\n            loadedSize: 0,\n            httpStatusCode: 0,\n            firstDataTime: 0,\n            loadedTime: 0,\n            totalSize: 0,\n            errorMessage: '',\n            fatalError: false\n        };\n        if (this._config.retryDelay) {\n            this._retryDelay = this._config.retryDelay;\n        }\n\n        this._loadInternal();\n    }\n\n    /**\n     * 取消当前下载\n     */\n    public abort(): void {\n        this._stopTimer();\n        this._abortInternal();\n    }\n\n    /**\n     * 销毁loader\n     */\n    public destroy(): void {\n        this._stopTimer();\n        this._abortInternal();\n        this._destroyInternalLoader();\n        this._callbacks = undefined;\n    }\n\n    /**\n     * 下载状态信息\n     */\n    public get stats(): ILoaderStats {\n        return this._stats;\n    }\n\n    /**\n     * 下载上下文\n     */\n    public get context(): T {\n        return this._context;\n    }\n\n    /**\n     * 获取流式加载Loader类\n     * @param useFetch 是否使用fetch\n     * @returns class\n     */\n    private _getInternalLoader(useFetch: boolean) {\n        if (typeof ChunkLoader !== 'undefined') {\n            return ChunkLoader;\n        }\n        ChunkLoader = null;\n        if (FetchLoader.isSupport()) {\n            ChunkLoader = FetchLoader;\n        } else if (XHR.isSupportChunk()) {\n            ChunkLoader = XHR;\n        }\n        return ChunkLoader;\n    }\n\n    /**\n     * 销毁内部loader\n     */\n    private _destroyInternalLoader(): void {\n        if (this._loader) {\n            this._loader.destroy();\n            this._loader = undefined;\n        }\n    }\n\n    /**\n     * 开始加载，非流式处理优先使用xhr\n     */\n    private _loadInternal(): void {\n        this._loading = true;\n        this._aborted = false;\n        const stats = this._stats;\n        stats.httpStatusCode = 0;\n        stats.firstDataTime = 0;\n        stats.loadedSize = 0;\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = null;\n        }\n        if (this._context.progress) {\n            this._loader = new (this._getInternalLoader(!!this._config.useFetch))();\n        } else {\n            this._loader = new XHR();\n        }\n        if (!this._loader) {\n            return;\n        }\n        // 连接超时\n        if (this._config.connectionTimeout) {\n            this._requestTimeout = setTimeout(this._onTimeout, this._config.connectionTimeout);\n        }\n        this._loader.load(this._context, this._loaderCallback);\n    }\n\n    private _abortInternal(): void {\n        if (this._callbacks && this._callbacks.onAbort && !this._aborted && this._loading) {\n            this._callbacks.onAbort(this);\n        }\n        this._aborted = true;\n        if (this._loader) {\n            this._loader.abort();\n        }\n    }\n\n    /**\n     * 停止所有计时器\n     * 连接超时、重试延迟、传输超时\n     */\n    private _stopTimer(): void {\n        if (this._requestTimeout) {\n            clearTimeout(this._requestTimeout);\n            this._requestTimeout = null;\n        }\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = null;\n        }\n        this._stopTransmissionTimer();\n    }\n\n    private _onConnect = (status: number): void => {\n        if (this._requestTimeout) {\n            clearTimeout(this._requestTimeout);\n            this._requestTimeout = null;\n        }\n        this._startTransmissionTimer();\n        this._stats.httpStatusCode = status;\n        this._stats.firstDataTime = Math.max(this._stats.requestStartTime, performance.now());\n    }\n    private _onProgress = (chunk: ArrayBuffer): void => {\n        const stats = this._stats;\n        this._progressTime = performance.now();\n        if (this._callbacks && this._callbacks.onProgress) {\n            this._callbacks.onProgress(this, chunk);\n        }\n        stats.loadedSize += chunk.byteLength;\n    }\n\n    private _onEnd = (responseData: string | ArrayBuffer | null): void => {\n        this._stopTimer();\n        const stats = this._stats;\n        if (responseData) {\n            if (typeof responseData === 'string') {\n                stats.totalSize = stats.loadedSize = responseData.length || 0;\n            } else {\n                stats.totalSize = stats.loadedSize = responseData.byteLength || 0;\n            }\n        } else {\n            stats.totalSize = stats.loadedSize;\n        }\n        stats.loadedTime = Math.max(stats.firstDataTime, performance.now());\n        this._loading = false;\n        if (this._callbacks) {\n            this._callbacks.onEnd(this, responseData);\n        }\n    }\n\n    private _onError = (e: Error): void => {\n        Log.i(this.tag, e);\n        this._stopTimer();\n        this._destroyInternalLoader();\n        const stats = this._stats;\n        const config = this._config;\n        this._loading = false;\n\n        stats.fatalError = !config.maxRetry || (stats.retryCount >= config.maxRetry || !config.maxRetry);\n        stats.errorMessage = e.message || 'load error';\n        if (this._callbacks && this._callbacks.onError) {\n            this._callbacks.onError(this);\n        }\n        if (stats.fatalError) {\n            return;\n        }\n        stats.retryCount++;\n        if (this._callbacks) {\n            if (this._retryDelay) {\n                this._retryTimeout = setTimeout(this._loadInternal.bind(this), this._retryDelay);\n                this._retryDelay = 2 * this._retryDelay;\n            } else {\n                this._loadInternal();\n            }\n        }\n    }\n\n    /**\n     * 处理超时\n     */\n    private _onTimeout = (): void => {\n        this._loading = false;\n        this._abortInternal();\n        const e = new Error('timeout');\n        this._onError(e);\n    }\n\n    /**\n     * 开始传输超时计时器\n     */\n    private _startTransmissionTimer(): void {\n        this._stopTransmissionTimer();\n        this._progressTime = performance.now();\n        let timeout = this._config.transmissionTimeout || 0;\n        if (timeout) {\n            this._transTimer = setInterval(() => {\n                if (performance.now() - this._progressTime > timeout) {\n                    this._onTimeout();\n                }\n            }, 1000);\n        }\n    }\n\n    /**\n     * 停止传输超时计时器\n     */\n    private _stopTransmissionTimer(): void {\n        if (this._transTimer) {\n            clearInterval(this._transTimer);\n            this._transTimer = null;\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:45:57 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:45:57 \n * 测速工具\n */\nimport Loader from \"../io/loader\";\nimport { ILoader, ILoaderCallback, ILoaderConfig, ILoaderContext } from \"../types/io\";\n\nexport type SpeedTestContext = {\n    url: string,\n    timeout: number,\n};\n\n/**\n * 测速结果\n */\nexport type SpeedTestResult = {\n    // 下载数据大小\n    loaded: number,\n    // 测试总耗时\n    duration: number,\n    // 首包时间点\n    firstPackageDuration: number,\n    // 测试成功\n    succeeded: boolean,\n};\n\nexport type SpeedTestEnded = (context: SpeedTestContext, result: SpeedTestResult) => void;\n\nexport interface ISpeedTestCallback {\n    onEnd: SpeedTestEnded;\n}\n\n// 单次测速用时上限\nconst MAX_TIMEOUT = 10000;\n\n/**\n * 测速工具\n * 测速时间上线10s\n */\nexport class SpeedTest {\n    private _context?: SpeedTestContext;\n    private _result?: SpeedTestResult;\n    private _callback?: ISpeedTestCallback;\n\n    private _loader?: ILoader<ILoaderContext>;\n    private _loaderConf: ILoaderConfig;\n    private _loaderCallbacks: ILoaderCallback<ILoaderContext>;\n\n    private _timer: any;\n    private _startTime: number = 0;\n\n    constructor() {\n        this._loaderConf = {\n            connectionTimeout: 0,\n            transmissionTimeout: 0,\n            maxRetry: 0,\n            retryDelay: 0,\n            useFetch: true\n        };\n\n        this._loaderCallbacks = {\n            onProgress: this._onProgress,\n            onError: this._onLoaderError,\n            onEnd: this._onLoaderEnd,\n            onAbort: this._onAbort,\n        };\n\n    }\n\n    /**\n     * 开始测速\n     * @param context 测速上下文\n     * @param callback 测速回调\n     */\n    public start(context: SpeedTestContext, callback: ISpeedTestCallback): void {\n        this._context = context;\n        this._callback = callback;\n        this._result = {\n            loaded: 0,\n            duration: 0,\n            firstPackageDuration: 0,\n            succeeded: true,\n        }\n        this._startTime = performance.now();\n        if (this._loader) {\n            this._loader.destroy();\n        }\n        const timeout = Math.min(MAX_TIMEOUT, context.timeout);\n        this._loaderConf.connectionTimeout = timeout;\n        const loaderContext = {\n            url: context.url,\n            progress: true,\n            responseType: 'arraybuffer'\n        };\n        this._loader = new Loader();\n        this._startTimer(timeout);\n        this._loader.load(loaderContext, this._loaderCallbacks, this._loaderConf);\n    }\n\n    /**\n     * 取消测速\n     */\n    public cancel() {\n        this._stopTimer();\n        if (this._loader) {\n            this._loader.destroy();\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy() {\n        this.cancel();\n    }\n\n    /**\n     * 开始测速计时\n     * @param timeout 时长\n     */\n    private _startTimer(timeout: number) {\n        this._timer = setTimeout(() => this._testEnd(), timeout);\n    }\n\n    /**\n     * 停止测速计时器\n     */\n    private _stopTimer(): void {\n        clearTimeout(this._timer);\n    }\n\n    /**\n     * 测试结束，停止加载并回调\n     */\n    private _testEnd = (): void => {\n        this._stopTimer();\n        if (this._loader) {\n            this._loader.destroy();\n        }\n        if (this._context && this._result && this._callback) {\n            this._result.firstPackageDuration = Math.round(this._result.firstPackageDuration);\n            this._result.duration = Math.round(performance.now() - this._startTime);\n            this._callback.onEnd(this._context, this._result);\n        }\n    }\n\n    private _onProgress = (target: ILoader<ILoaderContext>, data: string | ArrayBuffer): void => {\n        if (this._result) {\n            this._result.firstPackageDuration = target.stats.firstDataTime ? target.stats.firstDataTime - target.stats.requestStartTime : 0;\n            this._result.loaded = target.stats.loadedSize;\n        }\n    }\n\n    private _onLoaderError = (): void => {\n        if (this._result) {\n            this._result.succeeded = false;\n        }\n        this._testEnd();\n    }\n\n    private _onLoaderEnd = (): void => {\n        this._testEnd();\n    }\n    private _onAbort = (): void => { }\n}\n","/*\n * @Author: wuwenjun \n * @Date: 2020-06-09 11:54:34 \n * @Last Modified by:   wuwenjun \n * @Last Modified time: 2020-06-09 11:54:34 \n * 自适应算法\n */\nimport { EventEmitter } from 'events';\nimport { Log } from '../utils/log';\nimport AbrLevel from './abr-level';\nimport { AbrManifest } from './abr-manifest';\nimport { IAbrAlgorithm, RealtimeStatus } from '../types/abr';\nimport { SpeedTest, SpeedTestContext, SpeedTestResult } from \"../utils/speed-test\";\n\ntype AdaptiveConfig = {\n    stableBufferDiffThresholdSecond: number;\n    stableBufferIntervalMs: number;\n    speedTestTimeoutMs: number;\n    generateSpeedGapMs: number;\n    bufferCheckIntervalMs: number,\n    smoothedSpeedUtilizationRatio: number;\n    smallSpeedToBitrateRatio: number;\n    enoughSpeedToBitrateRatio: number;\n    bufferLowerLimitSecond: number;\n    recentBufferedSize: number;\n    smoothedSpeedRatio: number;\n    isSpeedFullyUsed: boolean;\n};\n\nconst tag = 'algorithm-simple';\n\nconst CONFIG: AdaptiveConfig = {\n    stableBufferDiffThresholdSecond: 0.15,\n    stableBufferIntervalMs: 2000,\n    speedTestTimeoutMs: 500,\n    generateSpeedGapMs: 3000,\n    bufferCheckIntervalMs: 500,\n    smoothedSpeedUtilizationRatio: 0.8,\n    smallSpeedToBitrateRatio: 0.7,\n    enoughSpeedToBitrateRatio: 0.9,\n    bufferLowerLimitSecond: 0.8,\n    recentBufferedSize: 16,\n    smoothedSpeedRatio: 0.9,\n    isSpeedFullyUsed: true,\n};\n\n/**\n * HLS自适应码率算法入口\n */\nclass AbrAlgorithmSimple extends EventEmitter implements IAbrAlgorithm {\n    private _conf!: AdaptiveConfig;\n    private _pastBuffer!: number[];\n    private _levels!: AbrLevel[];\n    private _current: number = 0; // 当前正在加载的流index\n    private _next: number = 0; // 下一个切换的流index\n    private _stableBufferStartTime: number = performance.now();\n    private _speedTester: SpeedTest = new SpeedTest();\n    private _generatedSpeed: number = 0;\n    private _lastCheckBuffer: number = 0;\n    private _lastSpeed: number = 0;\n    private _timer: any;\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * 初始化，并写入初始码率\n     * @param manifest 流信息\n     * @param config 算法配置\n     */\n    public init(manifest: AbrManifest, status?: RealtimeStatus, config?: any): void {\n        this._conf = Object.assign({}, CONFIG);\n        Object.assign(this._conf, config);\n        Log.i(tag, 'init', manifest, config, this._conf);\n\n        this._levels = manifest.levels.slice(0);\n        this._next = manifest.default;\n        this._pastBuffer = [0];\n        if (status) {\n            this._timer = setInterval(() => { this._checkBuffer(status); }, this._conf.bufferCheckIntervalMs);\n        }\n    }\n\n    private _updateStableBuffer(buffered: number) {\n        const diff = buffered - this._lastCheckBuffer;\n        const diffRatio = diff / buffered;\n        const now = performance.now();\n        if (diff < -this._conf.stableBufferDiffThresholdSecond || diffRatio < -0.2) {\n            Log.v(tag, `bufferDiffDown: ${diff.toFixed(2)}s, diffRatio: ${diffRatio.toFixed(2)}`);\n            this._stableBufferStartTime = Math.max(now, this._stableBufferStartTime);\n        }\n        if (diff > this._conf.stableBufferDiffThresholdSecond\n            && now - this._stableBufferStartTime + this._conf.bufferCheckIntervalMs > this._conf.stableBufferIntervalMs) {\n            this._stableBufferStartTime = Math.max(\n                now - this._conf.bufferCheckIntervalMs * 2,\n                this._stableBufferStartTime + this._conf.bufferCheckIntervalMs * 2\n            );\n            Log.v(tag, `bufferDiffUp: ${diff.toFixed(2)}s`);\n        }\n        this._lastCheckBuffer = buffered;\n        return now - this._stableBufferStartTime > this._conf.stableBufferIntervalMs;\n    }\n\n    private _isSpeedFullyUsed() {\n        return this._conf.isSpeedFullyUsed;\n    }\n\n    /**\n     * 周期检查buffer水平和瞬时带宽，判断是否开启测速\n     * @param status 获取buffer和下载信息\n     */\n    private _checkBuffer(status: RealtimeStatus) {\n        const buffered = status.bufferedSec();\n        const isBufferStable = this._updateStableBuffer(buffered);\n        if (this._isSpeedFullyUsed()) {\n            if (isBufferStable && this._current + 1 < this._levels.length) {\n                this._generatedSpeed = this._levels[this._current + 1].bitrate;\n            } else {\n                this._generatedSpeed = 0;\n            }\n        } else if (isBufferStable && this._current + 1 < this._levels.length) {\n            this._startTesting(status);\n            this._stableBufferStartTime = performance.now() + this._conf.generateSpeedGapMs;\n        }\n        this._pastBuffer.push(buffered);\n        if (this._pastBuffer.length > this._conf.recentBufferedSize) {\n            this._pastBuffer.shift();\n        }\n\n    }\n\n    /**\n     * 基于下一档码率，开启测速，并更新_speedTestResult\n     * @param status 获取buffer和下载信息\n     */\n    private _startTesting(status: RealtimeStatus) {\n        Log.v(tag, `start speed testing on index: ${this._current + 1}`);\n        const lastDownloadSize = status.downloadSize();\n        const testedBitrate = this._levels[this._current + 1].bitrate;\n        this._speedTester.start(\n            { url: this._levels[this._current + 1].url, timeout: this._conf.speedTestTimeoutMs },\n            {\n                onEnd: (context: SpeedTestContext, result: SpeedTestResult) => {\n                    const originalDownloadSize = status.downloadSize() - lastDownloadSize;\n                    if (result.succeeded && result.duration > 0 && result.firstPackageDuration > 0) {\n                        const testedSpeed = (originalDownloadSize + result.loaded) * 8 / result.duration;\n                        Log.v(tag, `testSpeed: ${testedSpeed.toFixed(0)}`);\n                        if (testedSpeed >= testedBitrate) {\n                            this._generatedSpeed = testedBitrate;\n                        }\n                    }\n                    Log.v(tag, `succeeded: ${result.succeeded}, firstPackageDuration: ${result.firstPackageDuration}, originalDownloadSize: ${originalDownloadSize}, downloadSize: ${result.loaded}, downloadTime: ${result.duration}`)\n                }\n            }\n        );\n    }\n\n    /**\n     * 设置码率列表中的清晰度是否可用\n     * @param list 码率index列表\n     */\n    public setAvailableBitrates(list: number[]): void { }\n\n    /**\n     * 获取下一个清晰度\n     * @returns {number} 下个清晰度index\n     */\n    public get nextLevel(): number {\n        Log.v(tag, `nextLevel: ${this._next}`);\n        return this._next;\n    }\n\n    /**\n     * 收到关键帧\n     * @param buffered buffer长度（秒）\n     * @param size 下载长度\n     * @param time 下载耗时（秒）\n     */\n    public onGOP(buffered: number, size: number, time: number): void {\n        // Byte/s -> kbps: {x} * 1000 * 8 / 1024;\n        let speed = (size / Math.max(time, 0.05)) * 8 / 1024;\n        Log.v(tag, `buffered: ${buffered.toFixed(2)}, size: ${size}, time: ${time.toFixed(2)}`)\n        this._next = this._nextRateIndex(speed, buffered);\n    }\n\n    /**\n     * 当开始加载新流\n     * @param index 清晰度index\n     */\n    public onLevelLoad(index: number): void {\n        this._current = Math.max(0, index);\n    }\n\n    public destroy(): void {\n        this._speedTester.destroy();\n        clearInterval(this._timer);\n    }\n\n    private _quantization(speed: number): number {\n        let index = 0;\n        for (let i = this._levels.length - 1; i >= 0; i--) {\n            if (speed >= this._levels[i].bitrate) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n\n    /**\n     * 计算下一个使用的码率\n     * @param speed 下载速度 kbps\n     * @param buffered 当前buffer ms\n     */\n    private _nextRateIndex(speed: number, buffered: number): number {\n        let index = this._nextRateBySpeedAndBuffered(speed, buffered);\n        if (index != this._current) {\n            this._stableBufferStartTime = performance.now() + this._conf.generateSpeedGapMs;\n        }\n        if (index < this._current) {\n            this._speedTester.cancel();\n            this._generatedSpeed = 0;\n            this._lastSpeed = speed;\n            this._pastBuffer = [buffered];\n        } else {\n            this._lastSpeed = this._getSmoothedSpeed(speed);\n        }\n        return index;\n    }\n\n    /**\n     * 获取平滑带宽\n     * @param speed 下载速度 kbps\n     */\n    private _getSmoothedSpeed(speed: number) {\n        if (this._lastSpeed > 0) {\n            return speed * (1 - this._conf.smoothedSpeedRatio) + this._lastSpeed * this._conf.smoothedSpeedRatio;\n        }\n        return speed;\n    }\n\n    private _getPredictedBuffer(buffered: number) {\n        const pastBuffer = Math.max(...this._pastBuffer);\n        return buffered + (buffered - pastBuffer);\n    }\n\n    private _getBufferSpeed(buffered: number) {\n        const pastBuffer = Math.max(...this._pastBuffer);\n        const bufferSpeedRatio = 1 + (buffered - pastBuffer) / pastBuffer;\n        return bufferSpeedRatio * this._levels[this._current].bitrate;\n    }\n\n    private _isSpeedTooSmall(speed: number) {\n        return speed / this._levels[this._current].bitrate < this._conf.smallSpeedToBitrateRatio;\n    }\n\n    private _isSpeedEnough(speed: number) {\n        return speed / this._levels[this._current].bitrate > this._conf.enoughSpeedToBitrateRatio;\n    }\n\n    /**\n     * 根据下载速度和buffer长度计算下一个码率\n     * @param speed 下载速度 kbps\n     * @param buffered 当前buffer ms\n     */\n    private _nextRateBySpeedAndBuffered(\n        speed: number,\n        buffered: number\n    ): number {\n        const bufferSpeed = this._getBufferSpeed(buffered);\n        const smoothedSpeed = this._getSmoothedSpeed(speed);\n        Log.v(tag, `gopSpeed: ${speed.toFixed(0)}, smoothedSpeed: ${smoothedSpeed.toFixed(0)}`);\n\n        const predictedBuffered = this._getPredictedBuffer(buffered);\n        Log.v(tag, `bufferSpeed: ${bufferSpeed.toFixed(0)}, predictedBuffered: ${predictedBuffered.toFixed(1)}`);\n\n        let nextIndex = this._current;\n        if (predictedBuffered < this._conf.bufferLowerLimitSecond || this._isSpeedTooSmall(bufferSpeed)) {\n            nextIndex = Math.min(this._current, this._quantization(bufferSpeed));\n        } else if (this._isSpeedEnough(bufferSpeed)) {\n            if (this._generatedSpeed > 0) {\n                Log.i(tag, `generatedSpeed used`);\n                nextIndex = this._quantization(this._generatedSpeed);\n                this._generatedSpeed = 0;\n            } else {\n                nextIndex = this._quantization(smoothedSpeed * this._conf.smoothedSpeedUtilizationRatio);\n            }\n            nextIndex = Math.min(this._current + 1, Math.max(nextIndex, this._current));\n        }\n        return nextIndex;\n    }\n}\n\nexport default AbrAlgorithmSimple;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:53:31 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:53:31 \n * flv多码率处理\n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../core/events';\nimport Media from '../core/media';\nimport { IAbrAlgorithm, RealtimeStatus } from '../types/abr';\nimport { AbrConfig, SmoothLevelSwitchInfo } from '../types/core';\nimport AbrAlgorithmSimple from './abr-algorithm-simple';\nimport { abrGetUrl } from './abr-get-url';\nimport AbrLevel from './abr-level';\nimport { AbrManifest } from './abr-manifest';\n\n/**\n * 多码率流处理\n * 自动+多清晰度切换\n */\nclass Multirate {\n    private _eventEmitter: EventEmitter;\n    private _config: AbrConfig;\n    private _media: Media;\n    private _next: number = 0;\n    private _downloadSizeTotal: number = 0;\n    private _downloadSize: number = 0;\n    private _downloadStartTime: number = 0;\n    private _keyCount: number = 0;\n    private _index: number = 0;\n    private _alg: IAbrAlgorithm;\n    private _manifest: AbrManifest;\n    private _autoLevelEnabled: boolean = false;\n\n    /**\n     * 构造函数\n     * @param eventEmitter 事件抛出\n     * @param config 配置\n     * @param media media\n     * @param src manifest/url\n     */\n    constructor(eventEmitter: EventEmitter, config: AbrConfig, media: Media, src: any) {\n        this._eventEmitter = eventEmitter;\n        this._config = config;\n        this._media = media;\n        this._manifest = new AbrManifest(src);\n        let status: RealtimeStatus = {\n            bufferedSec: () => { return this._media.bufferedSec(); },\n            downloadSize: () => { return this._downloadSizeTotal; }\n        }\n        this._alg = new AbrAlgorithmSimple();\n        this._alg.init(this._manifest, status);\n        this._autoLevelEnabled = this._manifest.abrLevels.length > 0\n    }\n\n    /**\n     * 初始化flv多码率\n     */\n    public init(): void {\n        this._downloadSizeTotal = 0;\n        this._downloadSize = 0;\n        this._downloadStartTime = performance.now();\n\n        // 当前流收到I帧计数\n        this._keyCount = 0;\n        this._index = this._next = 0;\n\n        if (this.current) {\n            if (this._autoLevelEnabled) {\n                this._index = this._next = this._alg.nextLevel;\n            }\n            this._eventEmitter.emit(LasEvents.MANIFEST_PARSED, {\n                levels: this._manifest.levels,\n                currentLevel: this._index\n            });\n        }\n    }\n\n    /**\n     * 回收\n     */\n    public destory(): void {\n        if (this._alg) {\n            this._alg.destroy();\n            this._alg.removeAllListeners();\n        }\n    }\n\n    /**\n     * 有数据下载\n     * @param size 数据大小\n     */\n    public onLoaderChunk(size: number): void {\n        this._downloadSize += size;\n        this._downloadSizeTotal += size;\n    }\n\n    /**\n     * 有清晰度切换\n     * @param index 清晰度index\n     */\n    public onLevelLoad(index: number) {\n        if (this._manifest.levels.length && index >= 0 && index < this._manifest.levels.length) {\n            this._keyCount = 0;\n            this._index = index;\n            this._downloadStartTime = performance.now();\n            this._downloadSize = 0;\n            this._alg.onLevelLoad(index);\n        }\n    }\n\n    /**\n     * 处理关键帧，是否切换码率\n     * @param time flv tag timestamp\n     */\n    public onKeyFrame(time: number): SmoothLevelSwitchInfo | undefined {\n        let levels = this._manifest.levels;\n        this._keyCount++;\n\n        if ((this._alg || this._next !== this._index) && this._keyCount > 1 && levels) {\n            let next = this._index;\n            if (this._next !== this._index) {\n                // 平滑切换\n                next = this._next;\n            } else if (this._autoLevelEnabled) {\n                // 自动\n                let now = performance.now();\n                this._alg.onGOP(this._media.bufferedSec(), this._downloadSize, (now - this._downloadStartTime) / 1000);\n                this._downloadSize = 0;\n                this._downloadStartTime = now;\n                this._next = next = this._alg.nextLevel;\n            } else {\n                return;\n            }\n            // TEST:\n            // next = (this._index + 1) % levels.length;\n            if (next !== this._index) {\n                return {\n                    url: this._getRequestUrl(next, time),\n                    level: next,\n                    timestamp: time\n                }\n            }\n        }\n        return;\n    }\n\n    /**\n     * 自动码率是否为开启状态\n     */\n    public get autoLevelEnabled(): boolean {\n        return this._autoLevelEnabled;\n    }\n\n    /**\n     * 清晰度列表\n     */\n    public get levels(): AbrLevel[] {\n        return this._manifest.levels;\n    }\n\n    /**\n     * 下一个下载的流index\n     */\n    public get nextLevel(): number {\n        if (typeof this._next === 'number') {\n            return this._next;\n        } else {\n            return this._index;\n        }\n    }\n\n    /**\n     * 在下一个关键帧位置切换流\n     * 设置-1会启用自动码率\n     */\n    public set nextLevel(value: number) {\n        if (value >= 0 && this._manifest.levels.length > value) {\n            this._autoLevelEnabled = false;\n            this._next = value;\n        } else if (value === -1) {\n            this._autoLevelEnabled = true;\n        }\n    }\n\n    /**\n     * get: 当前正在下载的流index\n     */\n    public get currentLevel(): number {\n        return this._index;\n    }\n\n    /**\n     * 立即切换码率，会清空buffer并从当前播放位置所在切片开始下载新的流\n     * 设置-1会启用自动码率\n     */\n    public set currentLevel(value: number) {\n        if (value >= 0 && this._manifest.levels.length > value) {\n            this._autoLevelEnabled = false;\n            this._index = this._next = value;\n        } else if (value === -1) {\n            this._autoLevelEnabled = true;\n        }\n    }\n\n    /**\n     * 当前level\n     */\n    private get current(): AbrLevel | undefined {\n        return this._manifest.levels[this._index];\n    }\n\n    /**\n     * 获取切换flv的请求地址\n     * @param index 码率index\n     * @param spts 切换时间戳，单位毫秒。大于0：关键帧pts；小于0：直播延迟\n     */\n    private _getRequestUrl(index: number, spts?: number): string {\n        let url = '';\n        let level = this._manifest.levels[index];\n        if (level) {\n            url = level.url;\n        }\n        return abrGetUrl(url, spts || this._config.defaultLiveDelay);\n    }\n}\n\nexport default Multirate;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:49:54 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:49:54 \n * Uint8Array数据缓存\n */\nclass Cache {\n    // 100m = 104857600 = 100 * 1024 * 1024\n    public static MAX_CACHE_SIZE = 104857600;\n    public static DEFAULT_CACHE_SIZE = 3145728;\n    // 初始cache大小\n    private _size: number;\n    private _readOffset: number = 0;\n    private _writeOffset: number = 0;\n    // cache\n    private _storage: ArrayBuffer;\n    private _cache: Uint8Array;\n\n    constructor(size: number = 0) {\n        if (size > 0) {\n            this._size = size;\n        } else {\n            this._size = Cache.DEFAULT_CACHE_SIZE;\n        }\n        this._storage = new ArrayBuffer(this._size);\n        this._cache = new Uint8Array(this._storage);\n    }\n\n    /**\n     * 添加至cache\n     * @param chunk 数据\n     */\n    public put(chunk: Uint8Array): void {\n        if (this._readOffset === this._writeOffset) {\n            this._readOffset = this._writeOffset = 0;\n        }\n        if (this._writeOffset + chunk.byteLength > this._size) {\n            const expected = this._writeOffset + chunk.byteLength - this._readOffset;\n            if (expected > this._size) {\n                // 扩展\n                this._collateCache();\n                this.expandCache(expected);\n            } else {\n                // 整理buffer\n                this._collateCache();\n            }\n        }\n        this._cache.set(chunk, this._writeOffset);\n        this._writeOffset += chunk.byteLength;\n    }\n\n    /**\n     * 获取数据拷贝\n     * @param len 数据长度\n     * @returns 数据\n     */\n    public get(len: number): Uint8Array | null {\n        if (len + this._readOffset > this._writeOffset) {\n            return null;\n        }\n        let data = null;\n        if (this._cache.slice) {\n            data = this._cache.slice(this._readOffset, this._readOffset + len);\n        } else {\n            const offset = this._cache.byteOffset + this._readOffset;\n            data = new Uint8Array(this._storage.slice(offset, offset + len));\n        }\n        this._readOffset += len;\n        return data;\n    }\n\n    /**\n     * 获取数据读取Uint8Array，从cache中直接读取，异步使用可能出现故障\n     * @param len 长度\n     * @returns 数据\n     */\n    public read(len: number): Uint8Array | null {\n        if (len + this._readOffset > this._writeOffset) {\n            return null;\n        }\n        return new Uint8Array(this._storage, this._readOffset, len);\n    }\n\n    /**\n     * 后移读指针\n     * @param len 数据长度\n     */\n    public skip(len: number): void {\n        if (len + this._readOffset > this._writeOffset) {\n            return;\n        }\n        this._readOffset += len;\n    }\n\n    /**\n     * 清理\n     */\n    public clear(): void {\n        this._readOffset = this._writeOffset = 0;\n    }\n\n    /**\n     * 扩展cache，cache不足时，cache容量max(翻倍,预期)\n     * @param expected 预期最小值\n     */\n    public expandCache(expected: number = 0): void {\n        this._size = Math.max(this._size * 2, expected);\n        if (this._size >= Cache.MAX_CACHE_SIZE) {\n            throw new Error('max cache size');\n        }\n        if (this._readOffset === 0 && this._writeOffset === 0) {\n            this._storage = new ArrayBuffer(this._size);\n        } else {\n            this._storage = this._transfer(this._storage, this._size);\n        }\n        this._cache = new Uint8Array(this._storage);\n    }\n\n    /**\n     * 未读取数据长度\n     */\n    public get unreadLen(): number {\n        return this._writeOffset - this._readOffset;\n    }\n\n    /**\n     * 整理cache中的数据，抛弃已读取的数据\n     */\n    private _collateCache(): void {\n        const remain = new Uint8Array(this._storage, this._readOffset, this._writeOffset - this._readOffset);\n        this._cache.set(remain);\n        this._writeOffset -= this._readOffset;\n        this._readOffset = 0;\n    }\n\n    private _transfer(source: ArrayBuffer, length: number): ArrayBuffer {\n        if (!(source instanceof ArrayBuffer)) {\n            throw new TypeError('Source must be an instance of ArrayBuffer');\n        }\n        if (length <= source.byteLength) {\n            return source.slice(0, length);\n        }\n        const sourceView = new Uint8Array(source),\n            destView = new Uint8Array(new ArrayBuffer(length));\n        destView.set(sourceView);\n        return destView.buffer;\n    }\n}\n\nexport default Cache;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:52:22 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:52:22 \n * flv预处理器\n */\nimport { EventEmitter } from 'events';\nimport { ErrorDetails, ErrorTypes } from '../../core/errors';\nimport LasEvents from '../../core/events';\nimport Cache from '../../io/cache';\nimport { FlvSize, FlvTag, FlvTagType } from '../../types/flv-object';\n\n/**\n * 关键帧回调方法定义\n */\nexport type FlvKeyframeCallback<T> = (time: number) => T | undefined;\n\n/**\n * 处理结果定义\n */\ntype Result<T> = {\n    list: FlvTag[];\n    callbackResult?: T;\n}\n\n/**\n * flv预处理，拆解tag，关键帧位置回调\n */\nclass FlvPreprocessor<T> {\n    private _eventEmitter: EventEmitter;\n    private _cache: Cache;\n    private _tag?: FlvTag;\n    private _result: Result<T>;\n\n    private _parseLen: number = 0;\n    private _parseFunc: Function;\n    private _onFlvKeyframe: FlvKeyframeCallback<T>;\n\n    /**\n     * 构造函数\n     * @param eventEmitter 事件派发器\n     * @param onFlvKeyframe 关键帧位置回调\n     */\n    constructor(eventEmitter: EventEmitter, onFlvKeyframe: FlvKeyframeCallback<T>) {\n        this._eventEmitter = eventEmitter;\n        this._onFlvKeyframe = onFlvKeyframe;\n        this._cache = new Cache();\n        this._parseLen = FlvSize.FLV_HEAD_LEN;\n        this._parseFunc = this._parseFlvHead;\n        this._result = { list: [] };\n    }\n\n    /**\n     * 重置状态\n     */\n    public reset(): void {\n        this._parseLen = FlvSize.FLV_HEAD_LEN;\n        this._parseFunc = this._parseFlvHead;\n        this._cache.clear();\n        this._tag = undefined;\n        this._result.list = [];\n        this._result.callbackResult = undefined;\n    }\n\n    /**\n     * 处理数据\n     * @param input flv数据\n     */\n    public processing(input: ArrayBuffer): Result<T> {\n        this._cache.put(new Uint8Array(input));\n        while (this._cache.unreadLen > this._parseLen) {\n            this._parseFunc();\n        }\n        let data = { list: this._result.list.splice(0), callbackResult: this._result.callbackResult }\n        this._result.callbackResult = undefined;\n        return data;\n    }\n\n    /**\n     * 解析tag头\n     */\n    private _parseFlvHead(): void {\n        const data = this._cache.read(FlvSize.FLV_HEAD_LEN);\n        if (data) {\n            if (data[0] !== 0x46 || data[1] !== 0x4c || data[2] !== 0x56 || data[3] !== 0x01) {\n                this._eventEmitter.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.MUX_ERROR,\n                    details: ErrorDetails.DEMUX_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'flv wrong head'\n                    }\n                });\n            }\n            this._eventEmitter.emit(LasEvents.FLV_HEAD, {\n                hasAudio: (data[4] & 4) >>> 2,\n                hasVideo: (data[4] & 1)\n            });\n            // TEST:\n            // this._eventEmitter.emit(KEvents.FLV_HEAD, {\n            //     hasAudio: true,\n            //     hasVideo: true\n            // });\n\n            this._cache.skip(FlvSize.FLV_HEAD_LEN);\n            this._parseLen = FlvSize.FLV_TAG_HEAD_LEN;\n            this._parseFunc = this._parseFlvTagHead;\n        }\n    }\n\n    /**\n     * 解析flv tag head\n     */\n    private _parseFlvTagHead(): void {\n        this._tag = new FlvTag();\n        const data = this._cache.read(FlvSize.FLV_TAG_HEAD_LEN);\n        if (data) {\n            // 取出tag类型\n            this._tag.tagType = data[0];\n            // 取出包体大小\n            this._tag.dataSize = ((data[1] & 0xff) << 16) + ((data[2] & 0xff) << 8) + (data[3] & 0xff);\n            // 取出解码时间\n            this._tag.timestamp =\n                ((data[7] & 0xff) << 24) + ((data[4] & 0xff) << 16) + ((data[5] & 0xff) << 8) + (data[6] & 0xff);\n            this._cache.skip(FlvSize.FLV_TAG_HEAD_LEN);\n            // 尝试在处理完整个tag之前判断是否为关键帧，用于自适应码率\n            if (this._tag.tagType === FlvTagType.VIDEO) {\n                this._parseFunc = this._detectKeyFrame;\n                this._parseLen = FlvSize.AVC_KEY_FRAME_CHECK_LEN;\n            } else {\n                this._parseFunc = this._parseFlvTag;\n                this._parseLen = this._tag.dataSize + FlvSize.FLV_TAG_SIZE_LEN;\n            }\n        }\n    }\n\n    /**\n     * 检测关键帧\n     */\n    private _detectKeyFrame(): void {\n        const data = this._cache.read(2);\n        if (data && this._tag) {\n            const frameType = (data[0] & 240) >>> 4;\n            const packetType = data[1];\n            this._parseFunc = this._parseFlvTag;\n            this._parseLen = this._tag.dataSize + FlvSize.FLV_TAG_SIZE_LEN;\n            // 获取是否是关键帧\n            if (frameType === 1 && packetType === 1 && this._onFlvKeyframe) {\n                this._result.callbackResult = this._onFlvKeyframe(this._tag.timestamp);\n                if (this._result.callbackResult) {\n                    this._parseLen = FlvSize.FLV_HEAD_LEN;\n                    this._parseFunc = this._parseFlvHead;\n                    this._cache.clear();\n                    this._tag = undefined;\n                }\n            }\n        }\n    }\n\n    /**\n     * 解析flv tag\n     */\n    private _parseFlvTag(): void {\n        const tag = this._tag;\n        if (!tag) {\n            return;\n        }\n        if (tag.tagType === FlvTagType.SCRIPT || tag.tagType === FlvTagType.AUDIO || tag.tagType === FlvTagType.VIDEO) {\n            tag.body = this._cache.get(tag.dataSize);\n            this._cache.skip(4); // skip size\n            if (tag)\n                this._result.list.push(tag);\n            this._tag = undefined;\n        }\n        this._parseFunc = this._parseFlvTagHead;\n        this._parseLen = FlvSize.FLV_TAG_HEAD_LEN;\n    }\n}\n\nexport default FlvPreprocessor;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:42:27 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:42:27 \n * las.js的report事件类型定义\n */\nexport const REPORT_TYPES = {\n    // 开始加载流\n    START_LOAD_STREAM: 'startLoadStream',\n    // 有数据被下载\n    LOADER_CHUNK_ARRIVAL: 'loader-chunk-arrival',\n    // 关键帧\n    KEY_FRAME: 'keyFrame',\n};\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:39:26 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:40:09\n * 处理las.js协议及flv流\n */\nimport { EventEmitter } from 'events';\nimport work from 'webworkify-webpack';\nimport { abrGetUrl } from '../abr/abr-get-url';\nimport { AbrManifest } from '../abr/abr-manifest';\nimport Multirate from '../abr/multirate';\nimport FlvDemuxerInline from '../demux/flv/flv-demuxer-inline';\nimport FlvPreprocessor from '../demux/flv/flv-preprocessor';\nimport Loader from '../io/loader';\nimport { LasMainConfig, SmoothLevelSwitchInfo } from '../types/core';\nimport { FlvTag } from '../types/flv-object';\nimport { ILoader, ILoaderCallback, ILoaderConfig, ILoaderContext } from '../types/io';\nimport { MP4RemuxResult } from '../types/remux';\nimport { Log } from '../utils/log';\nimport { ErrorData, ErrorDetails, ErrorTypes } from './errors';\nimport LasEvents from './events';\nimport Media from './media';\nimport { REPORT_TYPES } from './report-types';\nimport { WorkerCmd } from './worker-cmd';\n\nconst URL_REG = new RegExp('^(http|https)://');\n\n/**\n * flv视频流处理\n */\nconst tag = 'LasMain';\nexport default class LasMain extends EventEmitter {\n    private _config: LasMainConfig;\n    private _media: Media;\n    private _w?: Worker;\n    private _flv?: FlvDemuxerInline;\n    private _eventEmitter: EventEmitter;\n\n    private _loader?: Loader<ILoaderContext>;\n    private _loaderConf: ILoaderConfig;\n    private _loaderCallbacks: ILoaderCallback<ILoaderContext>;\n    private _multirate?: Multirate;\n    private _isContinuous: boolean;\n    private _remuxId: number;\n    private _baseTimeSec: number = 0;\n    private _tagDump: FlvPreprocessor<SmoothLevelSwitchInfo>;\n    private _currentUrl?: any;\n    private _isAbr: boolean = false;\n    private _progressTime: number = 0;\n    private _src: any;\n    private _audioCodec: string = '';\n\n    /**\n     * 传入配置并初始化\n     * @param config 配置信息\n     * @param media Media\n     */\n    constructor(config: LasMainConfig, media: Media) {\n        super();\n        this._config = config;\n        this._media = media;\n\n        this._loaderConf = {\n            connectionTimeout: this._config.connectionTimeout,\n            transmissionTimeout: this._config.transmissionTimeout,\n            maxRetry: 0,\n            retryDelay: 0,\n            useFetch: true\n        };\n        this._loaderCallbacks = {\n            onProgress: this._onLoaderProgress,\n            onError: this._onLoaderError,\n            onEnd: this._onLoaderEnd,\n            onAbort: this._onLoaderAbort\n        };\n        this._isContinuous = false;\n        this._remuxId = 1;\n\n        const eventEmitter = (this._eventEmitter = new EventEmitter());\n        eventEmitter.on(LasEvents.MEDIA_INFO, data => { this._onEvent(LasEvents.MEDIA_INFO, data) });\n        eventEmitter.on(LasEvents.SCRIPT_PARSED, data => { this._onEvent(LasEvents.SCRIPT_PARSED, data) });\n        eventEmitter.on(LasEvents.MANIFEST_PARSED, data => { this._onEvent(LasEvents.MANIFEST_PARSED, data) });\n        eventEmitter.on(LasEvents.MP4_SEGMENT, data => { this._onEvent(LasEvents.MP4_SEGMENT, data) });\n        eventEmitter.on(LasEvents.ERROR, data => { this._onEvent(LasEvents.ERROR, data) });\n        eventEmitter.on(LasEvents.FLV_HEAD, data => { this._onEvent(LasEvents.FLV_HEAD, data) });\n\n        this._tagDump = new FlvPreprocessor(this._eventEmitter, this._flvKeyframeCallback);\n        if (this._config.webWorker) {\n            Log.i(tag, 'webWorker');\n            this._w = work(require.resolve('../demux/flv/flv-demuxer-worker'));\n            if (this._w) {\n                this._w.addEventListener('message', this._onWorkerEvent);\n                this._w.postMessage({\n                    cmd: WorkerCmd.INIT,\n                    config: this._config,\n                    data: { remuxId: this._remuxId }\n                });\n                return;\n            }\n        }\n        this._flv = new FlvDemuxerInline(eventEmitter, this._config, { remuxId: this._remuxId });\n        this._flv.init();\n    }\n\n    /**\n     * 初始化\n     * @param src manifest/播放url\n     */\n    public init(src: any, audioCodec: string = ''): void {\n        this._src = src;\n        this._audioCodec = audioCodec;\n        if (typeof src === 'string' && !URL_REG.test(src)) {\n            try {\n                this._src = JSON.parse(src);\n            } catch (e) {\n                this.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.MANIFEST_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'manifest parse error'\n                    }\n                });\n                return;\n            }\n        }\n        if (this._src) {\n            if (AbrManifest.verify(this._src)) {\n                this._isAbr = true;\n            }\n        } else {\n            this.emit(LasEvents.ERROR, {\n                type: ErrorTypes.OTHER_ERROR,\n                details: ErrorDetails.MANIFEST_ERROR,\n                fatal: true,\n                info: {\n                    reason: 'src empty'\n                }\n            });\n            return;\n        }\n        if (this._isAbr && !this._multirate) {\n            this._multirate = new Multirate(this._eventEmitter, this._config, this._media, this._src);\n            this._multirate.init();\n        }\n    }\n\n    /**\n     * 开始加载\n     */\n    public load(): void {\n        let mr = this._multirate;\n        if (mr) {\n            let data = mr.levels[mr.currentLevel];\n            if (data) {\n                this._load(abrGetUrl(data.url, this._config.defaultLiveDelay), mr.currentLevel);\n            } else {\n                this.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.MANIFEST_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'manifest parse error'\n                    }\n                });\n            }\n        } else {\n            this._load(this._src);\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy(): void {\n        this._destroyLoader();\n        if (this._w) {\n            this._w.postMessage({ cmd: WorkerCmd.DESTROY });\n            this._w.removeEventListener('message', this._onWorkerEvent);\n            this._w.terminate();\n        }\n        if (this._flv) {\n            this._flv.destroy();\n            this._flv = undefined;\n        }\n\n        if (this._multirate) {\n            this._multirate.destory();\n        }\n\n        const eventEmitter = this._eventEmitter;\n        if (eventEmitter) {\n            eventEmitter.removeAllListeners();\n        }\n    }\n\n    /**\n     * 自动码率是否是开启状态\n     */\n    public get autoLevelEnabled(): boolean {\n        if (this._multirate) {\n            return this._multirate.autoLevelEnabled;\n        }\n        return false;\n    }\n\n    /**\n     * 返回多路流列表\n     */\n    public get levels() {\n        if (this._multirate) {\n            return this._multirate.levels;\n        }\n        return [];\n    }\n\n    /**\n     * 即将切换的level index\n     */\n    public get nextLevel(): number {\n        if (this._multirate) {\n            return this._multirate.nextLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 平滑切换清晰度，在关键帧位置切换\n     */\n    public set nextLevel(value: number) {\n        const mr = this._multirate;\n        if (mr) {\n            mr.nextLevel = value;\n        }\n    }\n\n    /**\n     * 当前正在加载的level index\n     */\n    public get currentLevel(): number {\n        if (this._multirate) {\n            return this._multirate.currentLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 立即切换清晰度，丢弃现有数据，重新拉指定index的流\n     */\n    public set currentLevel(value: number) {\n        const mr = this._multirate;\n        if (mr) {\n            let load = value >= 0 || value !== mr.currentLevel;\n            mr.currentLevel = value;\n            const data = mr.levels[mr.currentLevel];\n            if (load && data) {\n                this._currentUrl = abrGetUrl(data.url, this._config.defaultLiveDelay);\n                this._refreshRemuxId();\n                this._isContinuous = false;\n                if (this._tagDump) {\n                    this._tagDump.reset();\n                }\n                this._baseTimeSec = this._media.currentTime;\n                this.emit(LasEvents.LEVEL_SWITCHING, { level: mr.currentLevel, startSec: this._baseTimeSec, smooth: false });\n                this._load(this._currentUrl, mr.currentLevel);\n            }\n        }\n    }\n\n    /**\n     * worker通信\n     * @param ev worker返回数据\n     */\n    private _onWorkerEvent = (ev: any) => {\n        const data = ev.data;\n        this._onEvent(data.event, data.data);\n    }\n\n    /**\n     * 关键帧位置处理\n     * 自动码率需要在关键帧位置进行切换，返回算法判断结果\n     */\n    private _flvKeyframeCallback = (timestamp: number): SmoothLevelSwitchInfo | undefined => {\n        if (!this._media.hasStreamTime) {\n            this._media.updateStreamTime(timestamp / 1000, 0);\n        }\n        return this._multirate ? this._multirate.onKeyFrame(timestamp) : undefined;\n    }\n\n    /**\n     * 处理message事件\n     */\n    private _onEvent = (ev: string, data: any): void => {\n        switch (ev) {\n            case LasEvents.FLV_HEAD:\n                if (this._w) {\n                    this._w.postMessage({ cmd: WorkerCmd.FLV_HEAD, hasAudio: data.hasAudio, hasVideo: data.hasVideo });\n                } else if (this._flv) {\n                    this._flv.flvHead(data.hasAudio, data.hasVideo);\n                }\n                break;\n            case LasEvents.MEDIA_INFO:\n                this.emit(LasEvents.MEDIA_INFO, data);\n                break;\n            case LasEvents.MP4_SEGMENT:\n                {\n                    let mp4Data = data as MP4RemuxResult;\n                    if (mp4Data.extra && mp4Data.extra.remuxId !== this._remuxId) {\n                        // 过期，丢弃\n                        break;\n                    }\n                    mp4Data.segments.forEach(segment => {\n                        if (segment.type === 'audio' && segment.startDTS > this._baseTimeSec) {\n                            this._media.updateStreamTime(segment.streamDTS, segment.startDTS);\n                        }\n                    });\n                    this.emit(LasEvents.MP4_SEGMENT, mp4Data);\n                }\n                break;\n            default:\n                // SCRIPT_PARSED ERROR END\n                this.emit(ev, data);\n                break;\n        }\n    }\n\n    private _destroyLoader() {\n        if (this._loader) {\n            this._loader.destroy();\n            this._loader = undefined;\n        }\n    }\n\n    /**\n     * 开始下载流\n     * @param url flv地址\n     * @param index level index\n     */\n    private _load(url: string, index: number = 0): void {\n        this._destroyLoader();\n        if (this._multirate) {\n            this._multirate.onLevelLoad(index);\n        }\n        this._currentUrl = url;\n        let level = this.levels[index];\n        if (level) {\n            this._updateCodecs(this._audioCodec || level.audioCodec, level.videoCodec);\n        }\n\n        this.emit(LasEvents.REPORT, {\n            type: REPORT_TYPES.START_LOAD_STREAM,\n            url,\n            sync: this._baseTimeSec,\n            index: index,\n            bitrate: level ? level.bitrate : 0\n        });\n        if (!this._loader) {\n            this._loader = new Loader();\n        }\n        const context = {\n            url,\n            progress: true,\n            responseType: 'arraybuffer',\n            credentials: this._config.credentials\n        };\n        if (this._loader instanceof Loader) {\n            this._loader.load(context, this._loaderCallbacks, this._loaderConf);\n        }\n    }\n\n    /**\n     * 读取的flv tag数据传入worker进行解封装、封装操作\n     * @param tags 读取的flv tag数据\n     * @param timeOffset 时间偏移\n     * @param isContinuous 继续remux的时间戳进行处理\n     */\n    private _append(\n        tags: FlvTag[],\n        timeOffset: number,\n        isContinuous: boolean,\n    ): void {\n        if (this._w) {\n            this._w.postMessage({\n                cmd: WorkerCmd.APPEND_DATA,\n                tags,\n                timeOffset: timeOffset || 0,\n                isContinuous\n            });\n        } else if (this._flv) {\n            this._flv.append(tags, timeOffset || 0, isContinuous);\n        }\n    }\n\n    private _updateCodecs(audioCodec: string = '', videoCodec: string = ''): void {\n        if (this._w) {\n            this._w.postMessage({\n                cmd: WorkerCmd.SET_CODECS,\n                audioCodec, videoCodec\n            });\n        } else if (this._flv) {\n            this._flv.setCodecs(audioCodec, videoCodec);\n        }\n    }\n\n    /**\n     * 下载数据progress处理\n     * @param context 下载器上下文\n     * @param data 下载数据\n     * @param stats 下载器状态数据\n     */\n    private _onLoaderProgress = (target: ILoader<ILoaderContext>, data: string | ArrayBuffer): void => {\n        if (!(data instanceof ArrayBuffer)) {\n            return;\n        }\n        if (this._multirate) {\n            this._multirate.onLoaderChunk(data.byteLength);\n        }\n        this.emit(LasEvents.REPORT, {\n            type: REPORT_TYPES.LOADER_CHUNK_ARRIVAL,\n            byteLength: data.byteLength,\n            timeCost: performance.now() - this._progressTime || target.stats.requestStartTime,\n            header: target.context.responseHeader\n        });\n        this._progressTime = performance.now();\n        const result = this._tagDump.processing(data);\n        this._append(result.list, this._baseTimeSec, this._isContinuous);\n        this._isContinuous = true;\n\n        // 是否需要切换\n        if (result.callbackResult) {\n            if (this._tagDump) {\n                this._tagDump.reset();\n            }\n            this._baseTimeSec = result.callbackResult.timestamp ? this._media.getLocalTime(result.callbackResult.timestamp / 1000) || 0 : 0;\n            // 平滑切换\n            this.emit(LasEvents.LEVEL_SWITCHING, { level: result.callbackResult.level, startSec: this._baseTimeSec, smooth: true });\n            this._load(result.callbackResult.url, result.callbackResult.level);\n        }\n    }\n\n    private _onLoaderAbort = (): void => { }\n\n    /**\n     * 下载器错误处理\n     * @param context 下载器上下文\n     * @param status 下载器状态\n     */\n    private _onLoaderError = (target: ILoader<ILoaderContext>): void => {\n        if (!target.stats.fatalError) {\n            return;\n        }\n        const errInfo: ErrorData = {\n            type: ErrorTypes.NETWORK_ERROR,\n            details: target.stats.errorMessage === 'timeout' ? ErrorDetails.LOAD_ERROR_TIMEOUT : ErrorDetails.LOAD_ERROR,\n            fatal: true,\n            info: {\n                url: target.context.url,\n                httpStatusCode: target.stats.httpStatusCode,\n                reason: target.stats.errorMessage\n            }\n        };\n        this.emit(LasEvents.ERROR, errInfo);\n    }\n\n    /**\n     * 下载完成处理\n     */\n    private _onLoaderEnd = (): void => {\n        if (this._w) {\n            this._w.postMessage({ cmd: WorkerCmd.LOAD_END });\n        } else if (this._flv) {\n            this._flv.end();\n        }\n    }\n\n    /**\n     * 处理worker中的过期数据\n     */\n    private _refreshRemuxId(): void {\n        this._remuxId++;\n        const data = { remuxId: this._remuxId };\n        if (this._w) {\n            this._w.postMessage({ cmd: WorkerCmd.SET_EXTRA, data: data });\n        } else if (this._flv) {\n            this._flv.setExtra(data);\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:41:45 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:42:08\n * video及MSE工具类，封装video和MSE的部分接口，并用于计算处理视频的缓冲相关信息\n */\nimport { TimeRange } from '../types/core';\nimport MSE from './mse';\n\nclass Media {\n    private _video?: HTMLVideoElement;\n    private _mse?: MSE;\n\n    private _streamTime: number = 0;\n    private _localTime: number = 0;\n\n    constructor() { }\n\n    public reset(): void {\n        this._streamTime = 0;\n        this._localTime = 0;\n    }\n\n    public attachVideo(video: HTMLVideoElement): void {\n        this._video = video;\n    }\n    public attachMSE(mse: MSE): void {\n        this._mse = mse;\n    }\n\n    /**\n     * 指定时间是否在video缓冲区内\n     * @param sec time\n     * @returns isTimeinBuffered\n     */\n    public isTimeinBuffered(sec: number): boolean {\n        if (this._video) {\n            const buffered = this._video.buffered;\n            for (let i = 0; i < buffered.length; i++) {\n                if (sec >= buffered.start(i) && sec < buffered.end(i)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /*\n     * 计算video buffer量\n     */\n    public bufferedSec(): number {\n        if (this._video && this._video.buffered.length > 0) {\n            return Math.max(0, this._video.buffered.end(this._video.buffered.length - 1) - this._video.currentTime);\n        }\n        return 0;\n    }\n\n    /**\n     * 音频、视频的buffer长度\n     * @param type video|audio\n     */\n    public bufferedSecByType(type: string): number {\n        if (this._mse && this._video) {\n            let end = this._mse.bufferedEndByType(type);\n            if (end > 0) {\n                return this._mse.bufferedEndByType(type) - this._video.currentTime;\n            }\n        }\n        return 0;\n    }\n\n    /**\n     * 音频、视频的buffer长度\n     * @param type video|audio\n     */\n    public mseBufferedSecByType(type: string): TimeRange {\n        if (this._mse) {\n            return this._mse.bufferedByType(type);\n        }\n        return { start: 0, end: 0 };\n    }\n\n    /**\n     * 音频、视频buffer的段数\n     * @param type video|audio\n     */\n    public bufferSliceNumByType(type: string): number {\n        if (this._mse) {\n            return this._mse.bufferSliceNumByType(type);\n        }\n        return 0;\n    }\n\n    public pendingNum(): number {\n        if (this._mse) {\n            return this._mse.pendingNum();\n        }\n        return 0;\n    }\n\n    /**\n     * 待填充的buffer数据长度\n     * @param type video|audio\n     */\n    public pendingSecByType(type: string): number {\n        if (this._mse) {\n            return this._mse.pendingSecByType(type);\n        }\n        return 0;\n    }\n\n    /**\n     * 指定时间所在的buffer区域结束时间，不在任何buffer区域时返回空\n     * @param time 时间\n     */\n    public currentBuffer(time: number): TimeRange | undefined {\n        if (this._video) {\n            let buffered = this._video.buffered;\n            for (let i = 0; i < buffered.length; i++) {\n                const start = buffered.start(i);\n                const end = buffered.end(i);\n                if (start <= time && time < end) {\n                    return { start, end };\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * 指定时间所在的buffer区域结束时间，不在任何buffer区域时返回空\n     * @param time 时间\n     */\n    public nextBuffer(time: number): TimeRange | undefined {\n        if (this._video) {\n            let buffered = this._video.buffered;\n            for (let i = 0; i < buffered.length; i++) {\n                const start = buffered.start(i);\n                const end = buffered.end(i);\n                if (start > time) {\n                    return { start, end };\n                }\n            }\n        }\n        return undefined;\n    }\n\n    /**\n     * 更新转封装后的时间对应关系\n     * @param streamTime 流中的时间戳，秒\n     * @param localTime 本地时间，秒\n     */\n    public updateStreamTime(streamTime: number, localTime: number): void {\n        this._streamTime = streamTime;\n        this._localTime = localTime;\n    }\n\n    /**\n     * 根据流时间推算对应的本地时间戳\n     * @param streamTime 流时间\n     */\n    public getLocalTime(streamTime: number): number | undefined {\n        if (this._streamTime) {\n            return (streamTime - this._streamTime) + this._localTime;\n        }\n        return;\n    }\n\n    /**\n    * 当前是否有流时间\n    */\n    public get hasStreamTime(): boolean {\n        return !!this._streamTime;\n    }\n\n    public get video(): HTMLVideoElement | undefined {\n        return this._video;\n    }\n\n    public get mse(): MSE | undefined {\n        return this._mse;\n    }\n\n    /**\n     * 获取MSE当前状态，mse.readyState\n     */\n    public get mseReadyState(): ReadyState {\n        if (this._mse) {\n            return this._mse.readyState;\n        }\n        return 'closed';\n    }\n\n    /**\n     * 获取MSE当前状态，mse.readyState\n     */\n    public get videoReadyState(): number {\n        if (this._video) {\n            return this._video.readyState;\n        }\n        return 0;\n    }\n\n\n    /**\n     * video当前播放时间\n     */\n    public get currentTime(): number {\n        if (this._video) {\n            return this._video.currentTime;\n        }\n        return 0;\n    }\n}\n\nexport default Media;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:40:17 \n * @Last Modified by: gengxing\n * @Last Modified time: 2020-06-09 11:41:13\n * MSE控制器，MSE的buffer管理\n */\nimport { EventEmitter } from 'events';\nimport { LasConfig, TimeRange } from '../types/core';\nimport { MP4Segment } from '../types/remux';\nimport { Log } from '../utils/log';\nimport { ErrorDetails, ErrorTypes } from './errors';\nimport LasEvents from './events';\n\n// append关闭时queue允许缓存的长度上限\nconst QUEUE_SIZE_LIMIT = 200 * 1024 * 1024;\nconst MAX_CLEANUP_DURATION = 10;\nconst MIN_CLEANUP_DURATION = 5;\n\nconst MAX_BUFFERED = 30;\n\n/**\n * 处理MediaSource\n * https://developer.mozilla.org/zh-CN/docs/Web/API/MediaSource\n */\nexport default class MSE extends EventEmitter {\n    private tag: string = 'MSE';\n    private _config: LasConfig;\n\n    public video?: HTMLVideoElement;\n    public _sourceBuffer: { [index: string]: SourceBuffer };\n    private _mediaSource: MediaSource | null = null;\n    private _mimeCodec: { [index: string]: string };\n    private _cleanUpTask: { [index: string]: TimeRange[] };\n    private _appendQueue: { [index: string]: MP4Segment[] };\n    private _hasVideo: boolean;\n    private _hasAudio: boolean;\n    private _endOfData: boolean = false;\n    private _appendEnabled: boolean;\n    private _duration: number | null = null;\n    private _appendError: number = 0;\n    private _appendBufferError: boolean = false;\n    private _sbHandler: { [index: string]: { updateend: (e: Event) => any; error: (e: Event) => any } } = {};\n\n    /**\n     * 传入配置参数，初始化MSE\n     * @param config LasConfig\n     */\n    constructor(config: LasConfig) {\n        super();\n        this._config = config;\n        this._hasVideo = false;\n        this._hasAudio = false;\n        this._appendQueue = {\n            video: [],\n            audio: [],\n            audiovideo: []\n        };\n        this._sourceBuffer = {};\n        this._cleanUpTask = { video: [], audio: [], audiovideo: [] };\n        this._mimeCodec = {};\n        this._appendEnabled = true;\n    }\n\n    /**\n     * 绑定HTMLVideoElement\n     * @param video HTMLVideoElement\n     */\n    public attach(video: HTMLVideoElement): void {\n        this.video = video;\n        const MediaSourceDef = (window as any).MediaSource || (window as any).WebKitMediaSource;\n        if (MediaSourceDef) {\n            const ms = (this._mediaSource = new MediaSourceDef());\n            this.video.src = URL.createObjectURL(ms);\n            this.video.load();\n            ms.addEventListener('sourceopen', this._onSourceOpen);\n            ms.addEventListener('sourceended', this._onSourceEnded);\n            ms.addEventListener('sourceclose', this._onSourceClose);\n        } else {\n            setTimeout(() => {\n                this.emit(LasEvents.ERROR, {\n                    type: ErrorTypes.MSE_ERROR,\n                    details: ErrorDetails.MEDIASOURCE_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'MediaSource is not support'\n                    }\n                });\n            }, 0);\n        }\n    }\n\n    /**\n     * 传入视频头信息\n     * @param mediaInfo \n     */\n    public mediaInit(mediaInfo: any): void {\n        if ((this._hasAudio !== mediaInfo.hasAudio || this._hasVideo !== mediaInfo.hasVideo || !!mediaInfo.audiovideo !== !!this._mimeCodec.audiovideo) && this.video && this.hasSourceBuffer()) {\n            // 音视频轨数量发生变化时需要重建mse\n            Log.i(this.tag, 'trackInfo rebuild mse');\n            for (const type in this._sourceBuffer) {\n                if (this._sourceBuffer[type] && this._sbHandler[type]) {\n                    this._sourceBuffer[type].removeEventListener('error', this._sbHandler[type].error);\n                    this._sourceBuffer[type].removeEventListener('updateend', this._sbHandler[type].updateend);\n                }\n            }\n            this._sourceBuffer = {};\n            if (this._mediaSource) {\n                this._mediaSource.removeEventListener('sourceopen', this._onSourceOpen);\n                this._mediaSource.removeEventListener('sourceended', this._onSourceEnded);\n                this._mediaSource.removeEventListener('sourceclose', this._onSourceClose);\n            }\n            this._mimeCodec = {};\n            this.attach(this.video);\n        }\n        if (!mediaInfo.audiovideo) {\n            if (mediaInfo.hasAudio && mediaInfo.audioCodec) {\n                this._mimeCodec.audio = `audio/mp4; codecs=\"${mediaInfo.audioCodec}\"`;\n            }\n            if (mediaInfo.hasVideo && mediaInfo.videoCodec) {\n                this._mimeCodec.video = `video/mp4; codecs=\"${mediaInfo.videoCodec}\"`;\n            }\n        } else {\n            this._mimeCodec.audiovideo = `video/mp4; codecs=\"${mediaInfo.codec}\"`;\n        }\n        this._hasAudio = this._hasAudio || mediaInfo.hasAudio;\n        this._hasVideo = this._hasVideo || mediaInfo.hasVideo;\n\n        this._checkSourceBuffer();\n    }\n\n    /**\n     * 刷新MSE，计算一次清理任务，尝试重启填充buffer任务\n     */\n    public refresh() {\n        for (const type in this._sourceBuffer) {\n            this._update(type);\n        }\n    }\n\n    /**\n     * 转封装后fmp4数据\n     * @param segments segments\n     */\n    public mediaSegment(segments: MP4Segment[]): void {\n        segments.forEach(segment => {\n            let type = segment.type;\n            this._appendQueue[type].push(segment);\n            if (this._sourceBuffer[type]) {\n                this._update(type);\n            }\n        })\n    }\n\n    /**\n     * mse buffer范围，秒\n     * @param type video|audio|audiovideo\n     */\n    public bufferedByType(type: string): { start: number; end: number } {\n        const sb = this._sourceBuffer[type];\n        if (sb && sb.buffered.length > 0) {\n            return { start: sb.buffered.start(0), end: sb.buffered.end(sb.buffered.length - 1) };\n        }\n        return { start: 0, end: 0 };\n    }\n\n    /**\n     * mse buffer结束时间点，秒\n     * @param type video|audio|audiovideo\n     */\n    public bufferedEndByType(type: string): number {\n        const sb = this._sourceBuffer[type];\n        if (sb && sb.buffered.length > 0) {\n            return sb.buffered.end(sb.buffered.length - 1);\n        }\n        return 0;\n    }\n\n    /**\n     * mse buffer的分段数量，正常情况不大于1\n     * @param type video|audio|audiovideo\n     */\n    public bufferSliceNumByType(type: string): number {\n        const sb = this._sourceBuffer[type];\n        if (sb) {\n            return sb.buffered.length;\n        }\n        return 0;\n    }\n\n    /**\n     * 待填充buffer长度\n     * @param type video|audio|audiovideo\n     */\n    public pendingSecByType(type: string): number {\n        const buffer = this._appendQueue[type];\n        if (buffer) {\n            return buffer.reduce((prev, current) => {\n                return prev + current.endDTS - current.startDTS;\n            }, 0);\n        }\n        return 0;\n    }\n\n    /**\n     * 待填充buffer数量\n     */\n    public pendingNum(): number {\n        let num = 0;\n        for (let type in this._appendQueue) {\n            num += this._appendQueue[type].length;\n        }\n        return num;\n    }\n\n    /**\n     * 检查track是否已获取codec\n     */\n    private _checkSourceBuffer(): void {\n        let expected = (this._hasAudio ? 1 : 0) + (this._hasVideo ? 1 : 0);\n        let codecs = (this._mimeCodec.audio ? 1 : 0) + (this._mimeCodec.video ? 1 : 0);\n        if (this._mimeCodec.audiovideo) {\n            expected = 1;\n            codecs = 1;\n        }\n        Log.v(this.tag, 'checkSourceBuffer', expected, codecs, this._mimeCodec);\n        if (this._mediaSource && this._mediaSource.readyState === 'open' && expected > 0 && codecs >= expected) {\n            for (const type in this._mimeCodec) {\n                if (this._mimeCodec[type]) {\n                    this._addSourceBuffer(type);\n                }\n            }\n        }\n    }\n\n    /**\n     * MediaSource的sourceopen事件处理\n     */\n    private _onSourceOpen = () => {\n        Log.i(this.tag, 'MediaSource onSourceOpen');\n        if (this._mediaSource) {\n            this._mediaSource.removeEventListener('sourceopen', this._onSourceOpen);\n            this._checkSourceBuffer();\n            this.refresh();\n            this.emit('source_open');\n        }\n    };\n\n    /**\n     * 向mediaSource添加sourceBuffer\n     * @param type video|audio\n     */\n    private _addSourceBuffer(type: string): void {\n        if (this._sourceBuffer[type]) {\n            return;\n        }\n        try {\n            if (this._mediaSource) {\n                this._sourceBuffer[type] = this._mediaSource.addSourceBuffer(this._mimeCodec[type]);\n            }\n        } catch (e) {\n            Log.e(this.tag, e);\n            this.emit(LasEvents.ERROR, {\n                type: ErrorTypes.MSE_ERROR,\n                details: ErrorDetails.ADDSOURCEBUFFER_ERROR,\n                fatal: true,\n                info: {\n                    reason: e.message\n                }\n            });\n            return;\n        }\n        const sb = this._sourceBuffer[type];\n        this._sbHandler[type] = {\n            updateend: () => {\n                this._onSourceBufferUpdateEnd(type);\n            },\n            error: (e: Event) => {\n                this._onSourceBufferError(e);\n            }\n        };\n        sb.addEventListener('error', this._sbHandler[type].error);\n        sb.addEventListener('updateend', this._sbHandler[type].updateend);\n        if (this._duration && this._mediaSource) {\n            this._mediaSource.duration = this._duration;\n        }\n    }\n\n    /**\n     * 是否有待处理的数据\n     */\n    private _hasPendingData(): boolean {\n        return !!(\n            this._appendQueue &&\n            ((this._appendQueue.video && this._appendQueue.video.length) ||\n                (this._appendQueue.audio && this._appendQueue.audio.length))\n        );\n    }\n\n    /**\n     * 向sourcebuffer中填入数据\n     * @param type video|audio\n     */\n    private _doAppend(type: string): void {\n        if (this._hasPendingData()) {\n            if (!this._appendEnabled) {\n                const size = this._getBufferQueueSize();\n                if (size > QUEUE_SIZE_LIMIT && !this._appendBufferError) {\n                    this._appendBufferError = true;\n                    this.emit(LasEvents.ERROR, {\n                        type: ErrorTypes.MSE_ERROR,\n                        details: ErrorDetails.APPENDBUFFER_ERROR,\n                        fatal: true,\n                        info: {\n                            reason: 'bufferfull'\n                        }\n                    });\n                }\n                return;\n            }\n            if (\n                this._appendQueue[type].length > 0 &&\n                this._sourceBuffer[type] &&\n                !this._sourceBuffer[type].updating &&\n                !this._appendBufferError\n            ) {\n                const data = this._appendQueue[type].shift();\n                this._appendBuffer(data);\n            }\n        }\n    }\n\n    /**\n     * 根据填充策略计算需要缓存清理的范围\n     * @param type video|audio|audiovideo\n     */\n    private _calculateRemoveRange(type: string): void {\n        const video = this.video;\n        if (!video || video.seeking) {\n            return;\n        }\n        const time = video.currentTime;\n        if (this._sourceBuffer[type]) {\n            const task = this._cleanUpTask[type];\n            const buffered = this._sourceBuffer[type].buffered;\n            if (buffered.length >= 1 && time - buffered.start(0) >= MAX_CLEANUP_DURATION) {\n                const end = time - MIN_CLEANUP_DURATION;\n                if (task.length) {\n                    if (task[task.length - 1].start === 0 && task[task.length - 1].end === end) {\n                        return;\n                    }\n                }\n                task.push({ start: 0, end });\n            }\n        }\n    }\n\n    /**\n     * 尝试清理sourcebufer缓存\n     * @param sb 需要清理的sourceBuffer\n     * @param range 需要清理的范围\n     */\n    private _cleanUpRange(type: string, range: TimeRange): boolean {\n        const sb = this._sourceBuffer[type];\n        if (sb) {\n            if (!sb.updating) {\n                try {\n                    for (let i = 0; i < sb.buffered.length; i++) {\n                        const bufStart = 0;\n                        const bufEnd = sb.buffered.end(i);\n                        const removeStart = Math.max(bufStart, range.start);\n                        const removeEnd = Math.min(bufEnd, range.end);\n                        /**\n                         * remove不一定准确按照指定值进行，remove长度小于500ms，可能无效\n                         */\n                        if (removeEnd > removeStart) {\n                            sb.remove(removeStart, removeEnd);\n                            this.emit('remove');\n                            // 多段buffer时可能需要多次清理\n                            if (i < sb.buffered.length - 1) {\n                                return false;\n                            }\n                        }\n                    }\n                } catch (error) { }\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 向sourcebuffer中填充数据\n     * @param data data\n     * @param type type\n     */\n    private _appendBuffer(data?: MP4Segment): void {\n        if (!data || !this._sourceBuffer[data.type] || !this.video || this.video.error) {\n            return;\n        }\n        try {\n            this._sourceBuffer[data.type].appendBuffer(data.payload.buffer);\n        } catch (e) {\n            Log.w(this.tag, e.code, e);\n            if (e.code !== 22) {\n                if (this._appendError) {\n                    this._appendError++;\n                } else {\n                    this._appendError = 1;\n                }\n                if (this._appendError > this._config.appendErrorMaxRetry) {\n                    this._appendBufferError = true;\n                    this.emit(LasEvents.ERROR, {\n                        type: ErrorTypes.MSE_ERROR,\n                        details: ErrorDetails.APPENDBUFFER_ERROR,\n                        fatal: true,\n                        info: {\n                            reason: e.message\n                        }\n                    });\n                } else {\n                    this._appendQueue[data.type].unshift(data);\n                }\n            } else {\n                // buffer满无法填充\n                let v = this.video, conf = this._config;\n                this._appendEnabled = false;\n                this._appendQueue[data.type].unshift(data);\n                let buffered = v.buffered.end(v.buffered.length - 1) - v.currentTime;\n                let useless = v.currentTime - v.buffered.start(0);\n                // 未使用buffer小于阈值，尝试清理已使用buffer\n                if (buffered < MAX_BUFFERED) {\n                    this._calculateRemoveRange(data.type);\n                    if (this.hasCleanUpTask(data.type)) {\n                        this._cleanUp(data.type);\n                    }\n                    // 已使用buffer小于清理阈值时，抛错\n                } else if (useless < MAX_CLEANUP_DURATION) {\n                    this.emit(LasEvents.ERROR, {\n                        type: ErrorTypes.MSE_ERROR,\n                        details: ErrorDetails.APPENDBUFFER_ERROR,\n                        fatal: true,\n                        info: {\n                            reason: 'buffer full, append error'\n                        }\n                    });\n                }\n                Log.i(this.tag, 'mse bufferfull')\n                this.emit('bufferFull');\n            }\n        }\n    }\n\n    /**\n     * sourcebuffer end\n     */\n    private _onSourceEnded = () => {\n        Log.i(this.tag, 'MediaSource onSourceEnded');\n    };\n\n    /**\n     * sourcebuffer close\n     */\n    private _onSourceClose = () => {\n        Log.i(this.tag, 'MediaSource onSourceClose');\n        if (this._mediaSource) {\n            this._mediaSource.removeEventListener('sourceopen', this._onSourceOpen);\n            this._mediaSource.removeEventListener('sourceended', this._onSourceEnded);\n            this._mediaSource.removeEventListener('sourceclose', this._onSourceClose);\n        }\n    };\n\n    private _onSourceBufferUpdateEnd = (type: string) => {\n        this._update(type);\n        if (this._endOfData) {\n            this._endOfStream();\n        }\n        this.emit('updateend');\n    };\n\n    /**\n     * sourcebuffer error\n     * @param {Object} e 事件\n     */\n    private _onSourceBufferError = (e: Event) => {\n        Log.e(this.tag, `SourceBuffer Error: ${e}`);\n        this.emit(LasEvents.ERROR, {\n            type: ErrorTypes.MSE_ERROR,\n            details: ErrorDetails.SOURCEBUFFER_ERROR,\n            fatal: true,\n            info: {\n                reason: 'source buffer error'\n            }\n        });\n    };\n\n    /**\n     * 清理mse sourcebuffer缓存\n     * @param startSec 开始时间点，未指从0点开始\n     * @param endSec 结束时间点，未指定时结束点为正无穷大\n     * @param flushType 类型，未指定时清理所有sourcebuffe\n     */\n    public flush(startSec?: number, endSec?: number, flushType?: string): void {\n        let start = 0,\n            end = Number.POSITIVE_INFINITY;\n        this._endOfData = false;\n        // 计算清理范围\n        for (const type in this._sourceBuffer) {\n            if (flushType && flushType !== type) {\n                continue;\n            }\n            const sb = this._sourceBuffer[type];\n            if (!sb) {\n                continue;\n            }\n            // 清理未填充数据\n            if (startSec) {\n                start = Math.max(start, startSec);\n                for (let i = this._appendQueue[type].length - 1; i >= 0; i--) {\n                    if (!this._appendQueue[type][i].startPTS || this._appendQueue[type][i].startPTS >= startSec) {\n                        this._appendQueue[type].pop();\n                    } else {\n                        break;\n                    }\n                }\n            } else {\n                this._appendQueue[type] = [];\n            }\n            if (endSec) {\n                end = Math.min(end, endSec);\n            }\n            this._cleanUpTask[type].push({ start, end });\n            this._cleanUp(type);\n        }\n        this._appendEnabled = true;\n    }\n\n    /**\n     * 是否开启buffer填充\n     * @param value 开关\n     */\n    public setAppendEnabled(value: boolean): void {\n        if (!this._appendEnabled && value) {\n            this._appendEnabled = value;\n            this.refresh();\n        } else {\n            this._appendEnabled = value;\n        }\n    }\n\n    public getAppendEnabled(): boolean {\n        return this._appendEnabled;\n    }\n\n    /**\n     * 数据结束\n     */\n    public endOfData(): void {\n        this._endOfData = true;\n        if (!this._hasPendingData()) {\n            this._endOfStream();\n        }\n    }\n\n    public ended(): boolean {\n        return this._endOfData;\n    }\n\n    private _endOfStream(): void {\n        const ms = this._mediaSource;\n        if (!ms || ms.readyState !== 'open') {\n            return;\n        }\n        for (const type in this._sourceBuffer) {\n            const sb = this._sourceBuffer[type];\n            if (sb && sb.updating) {\n                return;\n            }\n        }\n        try {\n            ms.endOfStream();\n        } catch (error) {\n            Log.e(this.tag, error);\n            this.emit(LasEvents.ERROR, {\n                type: ErrorTypes.MSE_ERROR,\n                details: ErrorDetails.ENDOFSTREAM_ERROR,\n                fatal: true,\n                info: {\n                    reason: error.message\n                }\n            });\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy(): void {\n        if (this._mediaSource) {\n            const ms = this._mediaSource;\n            // pending segments should be discard\n\n            // remove all sourcebuffers\n            this._endOfStream();\n            if (ms.readyState !== 'closed') {\n                for (const type in this._sourceBuffer) {\n                    if (this._sourceBuffer[type] && this._sbHandler[type]) {\n                        this._sourceBuffer[type].removeEventListener('error', this._sbHandler[type].error);\n                        this._sourceBuffer[type].removeEventListener('updateend', this._sbHandler[type].updateend);\n                        ms.removeSourceBuffer(this._sourceBuffer[type]);\n                    }\n                }\n            }\n            ms.removeEventListener('sourceopen', this._onSourceOpen);\n            ms.removeEventListener('sourceended', this._onSourceEnded);\n            ms.removeEventListener('sourceclose', this._onSourceClose);\n            this._mediaSource = null;\n        }\n        this.removeAllListeners();\n        this._appendQueue = {};\n        this._mimeCodec = {};\n        this._cleanUpTask = {};\n        this._sourceBuffer = {};\n        this._sbHandler = {};\n    }\n\n    /**\n     * 是否有未完成的清理任务\n     * @param type video|audio|audiovideo\n     */\n    public hasCleanUpTask(type?: string): boolean {\n        let num = 0;\n        if (typeof type === 'undefined') {\n            for (let type in this._cleanUpTask) {\n                num += this._cleanUpTask[type].length;\n            }\n        } else {\n            if (this._cleanUpTask[type]) {\n                num = this._cleanUpTask[type].length;\n            }\n        }\n        return num > 0;\n    }\n\n    /**\n     * 是否已添加了sourceBuffer\n     */\n    public hasSourceBuffer(): boolean {\n        return !!Object.keys(this._sourceBuffer).length;\n    }\n\n    /**\n     * 计算待填充数据队列中数据总大小\n     */\n    private _getBufferQueueSize(): number {\n        let num = 0;\n        for (const type in this._appendQueue) {\n            num += this._appendQueue[type].reduce((prev, current) => {\n                if (current.payload && current.payload.byteLength) {\n                    return prev + current.payload.byteLength;\n                }\n                return prev;\n            }, 0);\n        }\n        return num;\n    }\n\n    /**\n     * 待填充队列中的数据时长\n     * @param type video|audio|audiovideo，为空时返回video|audio最大值\n     * @returns 时长（秒）\n     */\n    public getBufferQueueSec(type?: string): number {\n        if (!this._appendQueue) {\n            return 0;\n        }\n        let keys;\n        if (type) {\n            keys = [type];\n        } else {\n            keys = Object.keys(this._appendQueue);\n        }\n        return keys.reduce((prev, current) => {\n            if (this._appendQueue[current] && this._appendQueue[current].length > 0 && (Object.keys(this._sourceBuffer).length === 0 || this._sourceBuffer[current])) {\n                return Math.max(\n                    prev,\n                    this._appendQueue[current].reduce((prevDuration, currentSegment) => {\n                        let duration = currentSegment.endDTS - currentSegment.startDTS;\n                        if (duration) {\n                            return prevDuration + duration;\n                        }\n                        return prevDuration;\n                    }, 0)\n                );\n            }\n            return prev;\n        }, 0);\n    }\n\n    /**\n     * 获取MSE当前状态，mse.readyState\n     */\n    public get readyState(): ReadyState {\n        if (this._mediaSource) {\n            return this._mediaSource.readyState;\n        }\n        return 'closed';\n    }\n\n    /**\n     * 更新souceBuffer，清理或填充\n     */\n    private _update(type: string): void {\n        if (this.hasCleanUpTask(type)) {\n            this._cleanUp(type);\n        }\n        this._doAppend(type);\n    }\n\n    /**\n     * 执行清理任务\n     * @param type video|audio|audiovideo\n     */\n    private _cleanUp(type: string): void {\n        let range = this._cleanUpTask[type];\n        while (range && range.length) {\n            const item = range[0];\n            if (this._cleanUpRange(type, item)) {\n                range.shift();\n            } else {\n                return;\n            }\n        }\n        this.refresh();\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:48:59 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:48:59 \n * 播放质量信息\n */\nconst { performance } = window;\n\ntype PlaybackQualityInfo = {\n    decoded: number,\n    dropped: number,\n    decodedFPS: number,\n    droppedFPS: number\n}\n/**\n * 播放质量信息\n * 计算视频播放的解码总数、丢帧总数，解码FPS，丢帧FPS\n */\nclass PlaybackQuality {\n    private tag: string = 'fps';\n    private _lastDroppedFrames: number = 0;\n    private _lastDecodedFrames: number = 0;\n    private _video: HTMLVideoElement | null = null;\n    private _isVideoPlaybackQualityAvailable: boolean = false;\n    private _lastTime: number = 0;\n    private _decoded: number = 0;\n    private _dropped: number = 0\n\n    constructor() {\n    }\n\n    /**\n     * 绑定HTMLVideoElement元素\n     * @param media HTMLVideoElement\n     */\n    public attachMedia(media: HTMLVideoElement): void {\n        const video = this._video = media instanceof (window as any).HTMLVideoElement ? media : null;\n        if (video) {\n            // 部分浏览器seek后帧数信息归零的问题\n            this._isVideoPlaybackQualityAvailable = typeof video.getVideoPlaybackQuality === 'function';\n        }\n    }\n\n    public destory() {\n    }\n\n    /**\n     * 重置\n     */\n    public reset() {\n        this._lastTime = performance.now();\n        this._lastDroppedFrames = this._lastDecodedFrames = this._decoded = this._dropped = 0;\n        const video = this._video;\n        if (video) {\n            try {\n                if (this._isVideoPlaybackQualityAvailable) {\n                    const videoPlaybackQuality = video.getVideoPlaybackQuality();\n                    this._lastDecodedFrames = videoPlaybackQuality.totalVideoFrames;\n                    this._lastDroppedFrames = videoPlaybackQuality.droppedVideoFrames;\n                } else {\n                    this._lastDecodedFrames = (video as any).webkitDecodedFrameCount;\n                    this._lastDroppedFrames = (video as any).webkitDroppedFrameCount;\n                }\n            } catch (e) {\n                return;\n            }\n        }\n    }\n\n    /**\n     * 获取播放质量信息\n     */\n    public getInfo(): PlaybackQualityInfo | undefined {\n        const video = this._video;\n        const currentTime = performance.now();\n        let decoded = 0, dropped = 0;\n\n        if (video) {\n            if (this._isVideoPlaybackQualityAvailable) {\n                const videoPlaybackQuality = video.getVideoPlaybackQuality();\n                decoded = videoPlaybackQuality.totalVideoFrames;\n                dropped = videoPlaybackQuality.droppedVideoFrames;\n            } else {\n                decoded = (video as any).webkitDecodedFrameCount || 0;\n                dropped = (video as any).webkitDroppedFrameCount || 0;\n            }\n        }\n\n        if (decoded) {\n            if (decoded < this._lastDecodedFrames) {\n                this._lastDecodedFrames = 0;\n                this._lastDroppedFrames = 0;\n            }\n            let currentPeriod = currentTime - this._lastTime,\n                currentDropped = dropped - this._lastDroppedFrames,\n                currentDecoded = decoded - this._lastDecodedFrames,\n                droppedFPS = 0,\n                decodedFPS = 0;\n            if (this._lastTime) {\n                droppedFPS = parseFloat((1000 * currentDropped / currentPeriod).toFixed(2)),\n                    decodedFPS = parseFloat((1000 * currentDecoded / currentPeriod).toFixed(2));\n            }\n            this._decoded = this._decoded += currentDecoded;\n            this._dropped = this._dropped += currentDropped;\n            this._lastTime = currentTime;\n            this._lastDroppedFrames = dropped;\n            this._lastDecodedFrames = decoded;\n\n            return {\n                decoded: this._decoded,\n                dropped: this._dropped,\n                decodedFPS,\n                droppedFPS\n            };\n        }\n        this._lastTime = currentTime;\n        return;\n    }\n}\n\nexport default PlaybackQuality;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:49:17 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:49:17 \n * 流下载相关信息处理\n */\nimport { MP4Segment } from \"../types/remux\";\n\nconst RECORD_NUM_LIMIT = 10;\nconst RECORD_DOWNLOAD_NUM_LIMIT = 200;\nconst RECORD_SEGMRNT_NUM_LIMIT = 100;\n\ntype StreamQOS = {\n    index: number;\n    startPos: number;\n    url: string;\n    bitrate: number;\n    mediaInfo?: any;\n    traffic: number;\n    loadTimeCost: number;\n    keyFrame: number;\n    videoDataRate: number;\n    audioDataRate: number;\n    segments: Partial<Record<string, { duration: number; dts: number; len: number }[]>>;\n};\ntype DownloadLog = {\n    byteLength: number;\n    timeCost: number;\n    ts: number;\n};\ntype QOS = {\n    traffic: number;\n    streams: StreamQOS[];\n    download: DownloadLog[];\n};\n\n/**\n * 监测流下载、remux质量信息\n */\nclass StreamMonitor {\n    private _qos!: QOS;\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * 重置状态\n     */\n    public reset() {\n        this._qos = {\n            traffic: 0,\n            streams: [],\n            download: []\n        };\n    }\n\n    /**\n     * 收到关键帧\n     */\n    public onKeyFrame() {\n        this._qos.streams[this._qos.streams.length - 1].keyFrame++;\n    }\n\n    /**\n     * 开始加载新流，增加一调流记录\n     * @param index 流id\n     * @param startPos 流开始位置\n     * @param url 流地址\n     * @param bitrate 流码率\n     */\n    public onStreamOpen(index: number, startPos: number, url: string, bitrate: number): void {\n        if (this._qos.streams.length > RECORD_NUM_LIMIT) {\n            this._qos.streams.shift();\n        }\n        this._qos.streams.push({\n            index,\n            startPos,\n            url,\n            bitrate,\n            traffic: 0,\n            loadTimeCost: 0,\n            keyFrame: 0,\n            videoDataRate: 0,\n            audioDataRate: 0,\n            segments: {}\n        });\n    }\n\n    /**\n     * 收到媒体信息，解完音视频头之后\n     * @param data 媒体信息\n     */\n    public onMediaInfo(data: any) {\n        const info = this.loadingInfo;\n        if (info) {\n            info.mediaInfo = Object.assign({}, data);\n        }\n    }\n\n    /**\n     * 数据下载相关信息\n     * @param data 下载信息\n     */\n    public onDataReceive(data: { byteLength: number; timeCost: number; ts: number }): void {\n        this._qos.traffic += data.byteLength;\n        const log = this._qos.download;\n        if (log.length > RECORD_DOWNLOAD_NUM_LIMIT) {\n            log.pop();\n        }\n        log.unshift(data);\n        const info = this._qos.streams[this._qos.streams.length - 1];\n        info.traffic += data.byteLength;\n        info.loadTimeCost += data.timeCost;\n    }\n\n    public onMediaSegment(data: MP4Segment): void {\n        const qos = this._qos;\n        const stream = qos.streams[qos.streams.length - 1];\n        const log = stream.segments[data.type] || [];\n        stream.segments[data.type] = log;\n        log.push({ duration: (data.endDTS - data.startDTS) * 1000, dts: data.startDTS * 1000, len: data.payload.byteLength });\n\n        // datarate\n        if (log.length > RECORD_SEGMRNT_NUM_LIMIT) {\n            log.shift();\n        }\n        let duration = 0;\n        let totalLen = 0;\n        for (let i = 0; i < log.length; i++) {\n            totalLen += log[i].len;\n            duration += log[i].duration;\n        }\n        if (duration > 0) {\n            if (data.type === 'video') {\n                stream.videoDataRate = Math.round(totalLen * 8 / duration);\n            } else if (data.type === 'audio') {\n                stream.audioDataRate = Math.round(totalLen * 8 / duration);\n            }\n        }\n    }\n\n    /**\n     * 获取指定位置的流质量信息\n     * @param sec 视频时间轴时间（毫秒）\n     */\n    public getInfoByTime(sec: number): StreamQOS | null {\n        for (let i = this._qos.streams.length - 1; i >= 0; i--) {\n            if (this._qos.streams[i].startPos < sec) {\n                return this._qos.streams[i];\n            }\n        }\n        return null;\n    }\n\n    /**\n     * 更新当前下载流的开始时间\n     * @param sec 时间（毫秒）\n     */\n    public updateStartPos(sec: number): void {\n        if (this._qos.streams.length) {\n            this._qos.streams[this._qos.streams.length - 1].startPos = sec;\n        }\n    }\n\n    /**\n     * 获取当前正在加载的流质量信息\n     */\n    public get loadingInfo(): StreamQOS | null {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1];\n        }\n        return null;\n    }\n\n    /**\n     * 当前下载速度\n     */\n    public get downloadSpeed() {\n        const qos = this._qos;\n        const tsEnd = performance.now();\n        let len = 0,\n            timeCost = 0;\n        for (let i = 0; i < qos.download.length; i++) {\n            if (qos.download[i].ts > tsEnd - 1000) {\n                len += qos.download[i].byteLength;\n                timeCost += qos.download[i].timeCost;\n            } else {\n                break;\n            }\n        }\n        return Math.round(len / timeCost * 1000) || 0;\n    }\n\n    /**\n     * 当前加载流信息\n     */\n    public get mediaInfo(): any {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].mediaInfo;\n        }\n        return null;\n    }\n\n    /**\n     * 当前加载流视频视频码率\n     */\n    public get videoDataRate(): number {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].videoDataRate;\n        }\n        return 0;\n    }\n\n    /**\n     * 当前加载流视频音频码率\n     */\n    public get audioDataRate(): number {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].audioDataRate;\n        }\n        return 0;\n    }\n\n    /**\n     * 当前加载流视频码率\n     */\n    public get bitrate(): number {\n        if (this._qos.streams.length) {\n            return this._qos.streams[this._qos.streams.length - 1].bitrate;\n        }\n        return 0;\n    }\n    /**\n     * 下载数据量（字节）\n     */\n    public get traffic(): number {\n        return this._qos.traffic;\n    }\n    /**\n     * 下载，remux质量数据\n     */\n    public get data(): QOS {\n        return this._qos;\n    }\n}\n\nexport { StreamMonitor };\n\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:49:38 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:49:38 \n * 播放信息监控\n */\nimport { EventEmitter } from 'events';\nimport LasEvents from '../core/events';\nimport Media from '../core/media';\nimport { REPORT_TYPES } from '../core/report-types';\nimport { getNewMonitorData, MonitorData } from '../types/monitor-data';\nimport { MP4RemuxResult } from '../types/remux';\nimport PlaybackQuality from './playback-quality';\nimport { StreamMonitor } from './stream-monitor';\n\nconst HEARTBEAT_INTERVAL = 1000;\n\n/**\n * 播放信息监控。收集播放器事件，集中处理\n */\nclass Monitor extends EventEmitter {\n    private _media: Media;\n    private _playbackQuality?: PlaybackQuality;\n    private _data!: MonitorData;\n    private _playing: boolean = false;\n    private _sm: StreamMonitor;\n    private _hbTimer: any;\n\n    /**\n     * 初始化\n     * @param media Media\n     */\n    constructor(media: Media) {\n        super();\n        this._sm = new StreamMonitor();\n        this._media = media;\n        this.reset();\n    }\n\n    /**\n     * 重置状态\n     */\n    public reset(): void {\n        this._data = getNewMonitorData();\n        this._sm.reset();\n        if (this._playbackQuality) {\n            this._playbackQuality.reset();\n        }\n        this._refresh();\n    }\n\n    /**\n     * report事件处理\n     * @param event Report事件数据\n     */\n    public onReport(event: any): void {\n        event.ts = event.ts || performance.now();\n        const data = this._data;\n        switch (event.type) {\n            case REPORT_TYPES.LOADER_CHUNK_ARRIVAL:\n                data.downloadedBytes += event.byteLength;\n                this._sm.onDataReceive(event);\n                break;\n            case REPORT_TYPES.START_LOAD_STREAM:\n                this._sm.onStreamOpen(event.index || 0, event.sync, event.url, event.bitrate);\n                break;\n            case REPORT_TYPES.KEY_FRAME:\n                this._sm.onKeyFrame();\n                break;\n        }\n    }\n\n    /**\n     * 销毁\n     */\n    public destroy(): void {\n        if (this._playbackQuality) {\n            this._playbackQuality.destory();\n            this._playbackQuality = undefined;\n        }\n        this._stopHeartbeat();\n    }\n\n    public onLoad(): void {\n        this._startHeartbeat();\n        if (this._media.video) {\n            this._playbackQuality = new PlaybackQuality();\n            this._playbackQuality.attachMedia(this._media.video);\n        }\n    }\n\n    public onSegmentInit(data: any): void {\n        this._sm.onMediaInfo(data);\n    }\n\n    public onLoadeddata(): void {\n        this._onFirstFrame();\n        this._waitingEnd();\n    }\n\n    public onCanplay(): void {\n        this._onFirstFrame();\n        this._waitingEnd();\n    }\n\n    public onPlaying(): void {\n        this._playing = true;\n        this._waitingEnd();\n    }\n\n    public onEnd(): void {\n        this._waitingEnd();\n    }\n\n    public onWaiting(block: boolean): void {\n        if (this._playing && this._data.firstFrameTime && block) {\n            this._waitingStart();\n        }\n    }\n\n    public onStopLoad(): void {\n        this._stopHeartbeat();\n    }\n\n    public onSegment(data: MP4RemuxResult) {\n        data.segments.forEach(segment => {\n            this._sm.onMediaSegment(segment);\n        });\n    }\n\n    public get data() {\n        return this._data;\n    }\n\n    private _refresh(): void {\n        let playbackQualityInfo;\n        if (this._playbackQuality) {\n            playbackQualityInfo = this._playbackQuality.getInfo();\n        }\n        const data = this._data;\n        if (playbackQualityInfo) {\n            data.decodedFPS = playbackQualityInfo.decodedFPS;\n            data.droppedFPS = playbackQualityInfo.droppedFPS;\n            data.droppedFrames = playbackQualityInfo.dropped;\n            data.decodedFrames = playbackQualityInfo.decoded;\n        } else {\n            data.decodedFPS = data.droppedFPS = data.droppedFrames = data.decodedFrames = 0;\n        }\n    }\n\n    private _onFirstFrame(): void {\n        if (!this._data.firstFrameTime) {\n            this._data.firstFrameTime = performance.now();\n        }\n    }\n\n    private _waitingStart() {\n        if (!this._data.bufferingStartMS) {\n            this._data.blockCount++;\n            this._data.bufferingStartMS = this._data.bufferingStartMS || performance.now();\n        }\n    }\n\n    private _waitingEnd() {\n        if (this._data.bufferingStartMS) {\n            this._data.blockDuration += performance.now() - this._data.bufferingStartMS;\n        }\n        this._data.bufferingStartMS = null;\n    }\n\n    private _heartbeat = () => {\n        this._refresh();\n\n        const data = this._data;\n        const sm = this._sm;\n        const hb = {\n            totalReceive: sm.traffic,\n            speed: sm.downloadSpeed,\n            videoDataRate: sm.videoDataRate,\n            audioDataRate: sm.audioDataRate,\n            decodedFPS: data.decodedFPS,\n            droppedFPS: data.droppedFPS,\n            decodedFrames: data.decodedFrames,\n            droppedFrames: data.droppedFrames\n        };\n\n        this.emit(LasEvents.HEARTBEAT, hb);\n    }\n\n    private _startHeartbeat(): void {\n        if (!this._hbTimer) {\n            this._hbTimer = setInterval(this._heartbeat, HEARTBEAT_INTERVAL)\n        }\n    }\n\n    private _stopHeartbeat(): void {\n        if (this._hbTimer) {\n            clearInterval(this._hbTimer);\n            this._hbTimer = undefined;\n        }\n    }\n}\n\nexport default Monitor;\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:47:25 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:47:25 \n * 性能监控相关类型定义\n */\nexport type MonitorData = {\n    decodedFPS: number,\n    droppedFPS: number,\n    decodedFrames: number,\n    droppedFrames: number,\n    loadStartTime: number,\n    firstFrameTime: number,\n    blockDuration: number,\n    blockCount: number,\n    downloadedBytes: number,\n} & Record<string, any>\n\nexport function getNewMonitorData(): MonitorData {\n    return {\n        decodedFPS: 0,\n        droppedFPS: 0,\n        decodedFrames: 0,\n        droppedFrames: 0,\n        loadStartTime: 0,\n        firstFrameTime: 0,\n        blockDuration: 0,\n        blockCount: 0,\n        downloadedBytes: 0,\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:42:49 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:42:49 \n */\nimport { EventEmitter } from 'events';\nimport AbrLevel from './abr/abr-level';\nimport { ConfigHelper } from './config';\nimport { ErrorData, ErrorDetails, ErrorTypes } from './core/errors';\nimport LasEvents from './core/events';\nimport LasMain from './core/las-main';\nimport Media from './core/media';\nimport MSE from './core/mse';\nimport Monitor from './monitor/monitor';\nimport { LasConfig } from './types/core';\nimport { MP4RemuxResult } from './types/remux';\nimport BrowserHelper from './utils/browser-helper';\nimport { isSupported } from './utils/is-supported';\nimport { Log } from './utils/log';\n\n// 循环计时器间隔，毫秒\nconst MAIN_TIMER_INTERVAL = 200;\n\nenum STAT {\n    NONE,\n    WAITING,\n    SEEK,\n    SELECT_BITRATE,\n    INIT\n}\n/**\n * Las controller\n * @export\n * @class Las\n */\nexport default class Las extends EventEmitter {\n    private tag: string = 'las';\n    private _config: LasConfig;\n    private _src: any;\n    private _video?: HTMLVideoElement;\n    private _mse!: MSE;\n    private _lasMain?: LasMain;\n\n    private _stat: STAT = STAT.INIT;\n    private _audioCodecSwap: boolean = false;\n    private _error?: ErrorDetails;\n    private _audioCodec: string = '';\n    private _recoverMediaErrorTime: number = 0;\n    private _mainTimer: any;\n    private _media: Media;\n\n    private _nextLevel: any[] = [];\n    private _mediaInfo: any;\n    private _loadStopped: boolean = false;\n    private _seekOnUpdateEnd: boolean = false;\n    private _playingLevel?: number;\n    private _startLevel?: number;\n    private _monitor!: Monitor;\n\n    /**\n     * 浏览器是否支持las.js\n     */\n    static isSupport(): boolean {\n        return isSupported();\n    }\n\n    /**\n     * las.js当前版本\n     */\n    static get version() {\n        return __VERSION__;\n    }\n\n    /**\n     * las.js的事件列表\n     */\n    static get Events() {\n        return LasEvents;\n    }\n\n    /**\n     * las.js的错误类型列表\n     */\n    static get ErrorTypes() {\n        return ErrorTypes;\n    }\n\n    /**\n     * las.js的错误详情列表\n     */\n    static get ErrorDetails() {\n        return ErrorDetails;\n    }\n\n    /**\n     * 构造函数\n     * @param config LasConfig\n     */\n    constructor(config?: Partial<LasConfig>) {\n        super();\n        if (!this.off) {\n            this.off = this.removeListener;\n        }\n        this._config = ConfigHelper.processConfig(config);\n        this._media = new Media();\n        if (!this._config) {\n            setTimeout(() => {\n                this._onError({\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.CONFIG_ERROR,\n                    fatal: true,\n                    info: {\n                        reason: 'config data error'\n                    }\n                });\n            }, 0);\n            return;\n        }\n        if (!Las.isSupport()) {\n            setTimeout(() => {\n                this._onError({\n                    type: ErrorTypes.OTHER_ERROR,\n                    details: ErrorDetails.UNSUPPORTED,\n                    fatal: true,\n                    info: {\n                        reason: 'unsupported'\n                    }\n                });\n            }, 0);\n            return;\n        }\n        this._mainTimer = null;\n        this._stat = STAT.INIT;\n        this._startMainTimer();\n        this._initMonitor();\n        Log.i(this.tag, Las.version, this._config);\n    }\n\n    /**\n     * 绑定HTMLVideoElement\n     * @param video HTMLVideoElement\n     */\n    public attachMedia(video: HTMLVideoElement): void {\n        this._video = video;\n        this._media.attachVideo(this._video);\n        this._initMSE();\n        this._bindVideoEvents();\n    }\n\n    /**\n     * 开始加载视频\n     * @param src src\n     */\n    public load(src: any = undefined): void {\n        if (!this._video) {\n            this._onError({\n                type: ErrorTypes.OTHER_ERROR,\n                details: ErrorDetails.NO_VIDEO,\n                fatal: true,\n                info: {\n                    reason: 'no video attached'\n                }\n            });\n        }\n        this._playingLevel = undefined;\n        this._monitor.reset();\n        if (src) {\n            this._src = src;\n        }\n        this._load();\n    }\n\n    /**\n     * 恢复播放。从暂停、停止状态恢复\n     */\n    public resume() {\n        Log.i(this.tag, 'call resume');\n        if (this._loadStopped) {\n            this._loadStopped = false;\n            this._load();\n        }\n        if (this._video && this._video.paused) {\n            this._video.play();\n        }\n    }\n\n    /**\n     * 回收资源\n     */\n    public destroy(): void {\n        this._stopMonitor();\n        this._stopMainTimer();\n        this._unbindVideoEvents();\n        this._stopVideo();\n        this.removeAllListeners();\n    }\n\n    /**\n     * 重新拉流\n     */\n    public refresh(reuseMSE: boolean = false): void {\n        Log.i(this.tag, 'call refresh');\n        if (this._config.autoRecoverMedia ||\n            !(this._error === ErrorDetails.VIDEO_ERROR && (this._recoverSwapRemuxType() || this._recoverSwapAudioCodec()))\n        ) {\n            this._reload(reuseMSE);\n        }\n        this._error = undefined;\n    }\n\n    /**\n     * 停止加载，内核停止，用于直播停止\n     */\n    public stopLoad(): void {\n        Log.i(this.tag, 'call stopLoad');\n        if (this._lasMain) {\n            this._destroyLasMain();\n            this._mse.endOfData();\n            this._loadStopped = true;\n            this._monitor.onStopLoad();\n        }\n    }\n\n    /**\n     * 获取视频信息\n     */\n    public getMediaInfo(): any {\n        return Object.assign({}, this._mediaInfo);\n    }\n\n    /**\n     * 自动码率是否开启\n     */\n    public get autoLevelEnabled(): boolean {\n        if (this._lasMain) {\n            return this._lasMain.autoLevelEnabled;\n        }\n        return false;\n    }\n\n    /**\n     * 可用流列表\n     */\n    public get levels(): AbrLevel[] {\n        if (this._lasMain) {\n            this._lasMain.levels.slice(0);\n        }\n        return [];\n    }\n\n    /**\n     * 下一个下载的流index\n     */\n    public get nextLevel(): number {\n        if (this._lasMain) {\n            return this._lasMain.nextLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 在下一个关键帧位置切换流\n     * 设置-1会启用自动码率\n     */\n    public set nextLevel(value: number) {\n        if (!this._verifyLevel(value) || !this._lasMain) {\n            this.emit(LasEvents.LEVEL_SWITCH_FAILED, { level: value });\n            return;\n        }\n        this._lasMain.nextLevel = value;\n    }\n\n    /**\n     * get: 当前正在下载的流index\n     */\n    public get currentLevel(): number {\n        if (this._lasMain) {\n            return this._lasMain.currentLevel;\n        }\n        return 0;\n    }\n\n    /**\n     * 立即切换码率，会清空buffer并从当前播放位置所在切片开始下载新的流\n     * 设置-1会启用自动码率\n     */\n    public set currentLevel(value: number) {\n        if (!this._verifyLevel(value) || !this._lasMain) {\n            this.emit(LasEvents.LEVEL_SWITCH_FAILED, { level: value });\n            return;\n        }\n\n        if (value === -1) {\n            this._lasMain.nextLevel = value;\n        } else {\n            this._stat = STAT.SELECT_BITRATE;\n            this._seekOnUpdateEnd = true;\n            if (this._mse) {\n                this._mse.flush();\n            }\n            this._lasMain.currentLevel = value;\n        }\n    }\n\n    public get startLevel(): number {\n        return typeof this._startLevel === 'undefined' ? -1 : this._startLevel;\n    }\n\n    public set startLevel(value: number) {\n        this._startLevel = value;\n    }\n\n    public get monitorData() {\n        if (this._monitor) {\n            return this._monitor.data;\n        }\n        return;\n    }\n\n    private _reload(reuseMSE: boolean = false) {\n        if ((this._lasMain && this._mse) || this._error) {\n            if (this._lasMain) {\n                this._startLevel = this._lasMain.currentLevel;\n            }\n            this._nextLevel = [];\n            if (reuseMSE && this._mse) {\n                this._mse.flush();\n                this._internalSeek(0);\n                this._seekOnUpdateEnd = true;\n            } else {\n                this._stopVideo();\n                this._initMSE();\n            }\n            this._destroyLasMain();\n            this._initLasMain();\n            if (this._lasMain) {\n                this._lasMain.load();\n            }\n        } else {\n            Log.v(this.tag, 'transmuxer & mediaSource not ready');\n        }\n    }\n\n    /**\n     * 绑定video事件\n     */\n    private _bindVideoEvents(): void {\n        if (this._video) {\n            this._video.addEventListener('loadeddata', this._onVideoLoadeddata);\n            this._video.addEventListener('canplay', this._onVideoCanplay);\n            this._video.addEventListener('waiting', this._onVideoWaiting);\n            this._video.addEventListener('playing', this._onVideoPlaying);\n            this._video.addEventListener('ended', this._onVideoEnded);\n            this._video.addEventListener('error', this._onVideoError);\n        }\n    }\n\n    /**\n     * 取消video绑定事件\n     */\n    private _unbindVideoEvents(): void {\n        if (this._video) {\n            this._video.removeEventListener('loadeddata', this._onVideoLoadeddata);\n            this._video.removeEventListener('canplay', this._onVideoCanplay);\n            this._video.removeEventListener('waiting', this._onVideoWaiting);\n            this._video.removeEventListener('playing', this._onVideoPlaying);\n            this._video.removeEventListener('ended', this._onVideoEnded);\n            this._video.removeEventListener('error', this._onVideoError);\n        }\n    }\n\n    /**\n     * 处理HTMLVideoElelment事件-loadeddata\n     */\n    private _onVideoLoadeddata = (): void => {\n        Log.i(this.tag, 'loadeddata');\n        this._monitor.onLoadeddata();\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-canplay\n     */\n    private _onVideoCanplay = (): void => {\n        Log.v(this.tag, `canplay ${!!this._stat}`);\n        this._monitor.onCanplay();\n        if (this._video && this._stat !== STAT.NONE) {\n            this._stat = STAT.NONE;\n            this._checkLevelChange();\n            if (!this._video.paused) {\n                // 兼容waiting后不触发playing\n                this._onVideoPlaying();\n            }\n        }\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-waiting\n     */\n    private _onVideoWaiting = (): void => {\n        if (!this._video) {\n            return;\n        }\n        this._stat = this._stat || STAT.WAITING;\n        const block = !this._video.seeking && this._stat === STAT.WAITING;\n        if (block) {\n            Log.i(this.tag, 'waiting currentTime:', this._video.currentTime);\n        }\n        this._monitor.onWaiting(block);\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-playing\n     */\n    private _onVideoPlaying = (): void => {\n        Log.i(this.tag, 'playing');\n        if (!this._error) {\n            this._stat = STAT.NONE;\n            this._monitor.onPlaying();\n        }\n    };\n\n    /**\n     * 处理HTMLVideoElelment事件-ended\n     */\n    private _onVideoEnded = (): void => {\n        this._monitor.onEnd();\n        if (this._mse) {\n            this._mse.flush();\n        }\n    };\n\n\n    /**\n     * 处理HTMLVideoElelment事件-error\n     */\n    private _onVideoError = (error: ErrorEvent): void => {\n        Log.e(this.tag, 'video error', error);\n        if (this._error) {\n            return;\n        }\n        if (this._config.autoRecoverMedia) {\n            const now = performance.now();\n            // 尝试切换remux方式\n            if ((!this._recoverMediaErrorTime || now - this._recoverMediaErrorTime > 3000) && this._recoverSwapRemuxType()) {\n                this._recoverMediaErrorTime = now;\n                return;\n            }\n            // 尝试替换audio codec string\n            if (this._recoverSwapAudioCodec()) {\n                return;\n            }\n        }\n\n        let reason = 'video error';\n        if (this._video && this._video.error) {\n            reason += ` code:${this._video.error.code} message:${this._video.error.message}`;\n        }\n        this._onError({\n            type: ErrorTypes.MEDIA_ERROR,\n            details: ErrorDetails.VIDEO_ERROR,\n            fatal: true,\n            info: {\n                reason\n            }\n        });\n    };\n\n    /**\n     * 初始化MSE\n     * @param video HTMLVideoElement\n     */\n    private _initMSE() {\n        if (!this._video) {\n            return;\n        }\n        let video = this._video;\n        this._mse = new MSE(this._config);\n        this._mse.attach(video);\n        this._media.attachMSE(this._mse);\n\n        this._mse.on(LasEvents.ERROR, data => {\n            this._onError(data);\n        });\n        this._mse.on('updateend', () => {\n            if (this._seekOnUpdateEnd && video.buffered.length) {\n                Log.i(this.tag, 'seek on updateend');\n                this._internalSeek(video.buffered.start(0));\n                this._seekOnUpdateEnd = false;\n            }\n        });\n        this._mse.on('resetDone', () => {\n            this._seekOnUpdateEnd = true;\n        });\n    }\n\n    /**\n     * 销毁MSE\n     */\n    private _destroyMSE(): void {\n        if (this._mse) {\n            this._mse.removeAllListeners();\n            this._mse.destroy();\n        }\n    }\n\n    /**\n     * 开始加载视频\n     */\n    private _load() {\n        this._loadStopped = false;\n        this._error = undefined;\n        this._stat = STAT.INIT;\n        this._nextLevel = [];\n        this._media.reset();\n\n        this._monitor.onLoad();\n        if (this._lasMain) {\n            this._destroyLasMain();\n        }\n        if (this._mse.hasSourceBuffer() || (this._video && this._video.error)) {\n            this._resetMSE();\n        }\n        this._initLasMain();\n        if (this._lasMain) {\n            this._lasMain.load();\n        }\n    }\n\n    /**\n     * 重置MSE，清空video.src，重新绑定一个新的MSE\n     */\n    private _resetMSE = () => {\n        this._seekOnUpdateEnd = false;\n        if (this._video) {\n            Log.i(this.tag, 'rebuild mse');\n            URL.revokeObjectURL(this._video.src);\n            this._video.src = '';\n            this._video.removeAttribute('src');\n            this._destroyMSE();\n            this._initMSE();\n        }\n    }\n\n    private _verifyLevel(value: number): boolean {\n        return !!(this._lasMain &&\n            this._lasMain.levels.length > 0 &&\n            value < this._lasMain.levels.length &&\n            value >= -1 &&\n            this._video && !this._video.ended);\n    }\n\n    /**\n     * 初始化LasMain\n     */\n    private _initLasMain(): void {\n        this._lasMain = new LasMain(this._config, this._media);\n        this._bindLasMainEvent(this._lasMain);\n        this._lasMain.init(this._src, this._audioCodec);\n    }\n\n    /**\n     * 销毁LasMain\n     */\n    private _destroyLasMain(): void {\n        if (this._lasMain) {\n            this._lasMain.removeAllListeners();\n            this._lasMain.destroy();\n            this._lasMain = undefined;\n        }\n    }\n\n    /**\n     * 绑定lasMain事件\n     */\n    private _bindLasMainEvent(lasMain: LasMain): void {\n        const mse = this._mse;\n        lasMain.on(LasEvents.MP4_SEGMENT, (data: MP4RemuxResult) => {\n            if (mse) {\n                mse.mediaSegment(data.segments);\n            }\n            if (this._monitor) {\n                this._monitor.onSegment(data);\n            }\n        });\n\n        lasMain.on(LasEvents.MEDIA_INFO, data => {\n            const mediaInfo = Object.assign({}, data);\n            this._monitor.onSegmentInit(mediaInfo);\n            this.emit(LasEvents.MEDIA_INFO, mediaInfo);\n            this._mediaInfo = mediaInfo;\n            this._audioCodec = data.defaultAudioCodec || data.audioCodec;\n            if (mse) {\n                mse.mediaInit(mediaInfo);\n            }\n        });\n\n        lasMain.on(LasEvents.ERROR, data => {\n            this._onError(data);\n        });\n\n        lasMain.on(LasEvents.LOAD_END, () => {\n            if (mse) {\n                mse.endOfData();\n            }\n            this.emit(LasEvents.LOAD_END);\n        });\n        lasMain.on(LasEvents.LEVEL_SWITCH_FAILED, data => {\n            this.emit(LasEvents.LEVEL_SWITCH_FAILED, data);\n        });\n        lasMain.on(LasEvents.LEVEL_SWITCHING, data => {\n            if (!data.smooth && this._mse) {\n                this._mse.flush();\n            }\n            this.emit(LasEvents.LEVEL_SWITCHING, { level: data.level });\n            this._nextLevel = this._nextLevel\n                .sort((a, b) => {\n                    return a.startSec - b.startSec;\n                })\n                .filter(value => {\n                    return value.startSec < data.startSec;\n                });\n            this._nextLevel.push(data);\n        });\n        lasMain.on(LasEvents.SCRIPT_PARSED, data => {\n            this.emit(LasEvents.SCRIPT_PARSED, data);\n        });\n        lasMain.on(LasEvents.MANIFEST_PARSED, data => {\n            if (typeof this._playingLevel === 'number') {\n                lasMain.currentLevel = this._playingLevel;\n                return;\n            }\n\n            if (typeof this._startLevel === 'number') {\n                lasMain.currentLevel = this._startLevel;\n            }\n            data = Object.assign({ levels: this.levels.slice(0), currentLevel: this.currentLevel }, data);\n            this._playingLevel = lasMain.currentLevel;\n            Log.i(this.tag, LasEvents.MANIFEST_PARSED, data);\n            this.emit(LasEvents.MANIFEST_PARSED, data);\n        });\n        lasMain.on(LasEvents.REPORT, data => {\n            if (this._monitor) {\n                this._monitor.onReport(data);\n            }\n        });\n    }\n\n    /**\n     * 内部seek\n     * @param time 时间\n     */\n    private _internalSeek(time: number): void {\n        if (this._video) {\n            this._video.currentTime = time;\n        }\n    }\n\n    /**\n     * 主循环\n     * 用于处理buffer空隙和清晰度切换轮询检测\n     */\n    private _mainLoop = (): void => {\n        const EPS = 1e-3;\n        const video = this._video;\n\n        if (video &&\n            ((this._stat === STAT.WAITING && !video.seeking) ||\n                this._stat === STAT.INIT ||\n                this._stat === STAT.SEEK ||\n                this._stat === STAT.SELECT_BITRATE) &&\n\n            this._mse &&\n            !this._mse.hasCleanUpTask() &&\n            !video.ended\n        ) {\n            const currentTime = video.currentTime;\n            const currentBuffer = this._media.currentBuffer(currentTime);\n            let jumpTo: number | undefined = undefined;\n            // 卡顿位置无buffer\n            if (!currentBuffer || currentBuffer.end - currentTime < 1) {\n                const nextBuffer = this._media.nextBuffer(currentTime);\n                if (nextBuffer) {\n                    Log.i(this.tag, 'try fix block-A');\n                    jumpTo = nextBuffer.start;\n                }\n            } else if (video.buffered.length > 1 && currentBuffer.end - currentTime > 1) {\n                // 多段buffer播放卡顿\n                Log.i(this.tag, 'try fix block-B');\n                jumpTo = currentBuffer.start;\n            }\n\n            if (jumpTo) {\n                jumpTo = jumpTo + (BrowserHelper.isSafari ? 0.3 : EPS);\n                this._internalSeek(jumpTo);\n                Log.i(this.tag, `jump to ${jumpTo}`);\n            }\n        }\n        if (this._nextLevel.length) {\n            this._checkLevelChange();\n        }\n    };\n\n    /**\n     * 错误处理\n     * @param data 错误数据\n     */\n    private _onError(data: ErrorData): void {\n        Log.i(this.tag, `on error ${JSON.stringify(data)}`);\n        if (!data.info.url && this.levels && this.levels[this.currentLevel]) {\n            data.info.url = this.levels[this.currentLevel].url;\n        }\n        if (data.fatal) {\n            this.stopLoad();\n            this._stopMainTimer();\n            if (data.details === ErrorDetails.VIDEO_ERROR || (this._video && this._video.error)) {\n                this._destroyMSE();\n            }\n            if (!this._error) {\n                this._error = data.details;\n                this.emit(LasEvents.ERROR, data);\n            }\n        }\n    }\n\n    /**\n     * 开始主循环计时器\n     */\n    private _startMainTimer(): void {\n        if (this._mainTimer === null) {\n            this._mainTimer = setInterval(this._mainLoop, MAIN_TIMER_INTERVAL);\n        }\n    }\n\n    /**\n     * 停止主循环计时器\n     */\n    private _stopMainTimer(): void {\n        if (this._mainTimer) {\n            clearInterval(this._mainTimer);\n            this._mainTimer = null;\n        }\n    }\n\n    /**\n     * 处理清晰度切换是否完成\n     */\n    private _checkLevelChange(): void {\n        const d = this._nextLevel[0];\n        if (this._video && d && this._video.currentTime >= d.startSec && this._media.isTimeinBuffered(this._video.currentTime)) {\n            this.emit(LasEvents.LEVEL_SWITCHED, { level: d.level });\n            this._playingLevel = d.level;\n            this._nextLevel.shift();\n        }\n    }\n\n    private _stopVideo(): void {\n        if (this._video) {\n            URL.revokeObjectURL(this._video.src);\n            this._video.src = '';\n            this._video.removeAttribute('src');\n            this._destroyLasMain();\n            this._destroyMSE();\n        }\n    }\n\n    private _initMonitor(): void {\n        if (!this._monitor) {\n            this._monitor = new Monitor(this._media);\n            this._monitor.on(LasEvents.HEARTBEAT, value => {\n                this.emit(LasEvents.HEARTBEAT, value);\n            })\n        }\n    }\n\n    private _stopMonitor(): void {\n        if (this._monitor) {\n            this._monitor.destroy();\n            this._monitor.removeAllListeners();\n        }\n    }\n\n    /**\n     * 解码错误时尝试更换remux方式\n     */\n    private _recoverSwapRemuxType(): boolean {\n        let gopRemux = this._config.gopRemux;\n        this._config.gopRemux = true;\n\n        if (gopRemux === this._config.gopRemux) {\n            return false;\n        } else {\n            Log.i(this.tag, 'recover swap remux type');\n            this._reload();\n            return true;\n        }\n    }\n\n    /**\n     * 解码错误时尝试更换audio codec string\n     */\n    private _recoverSwapAudioCodec(): boolean {\n        if (!this._audioCodecSwap && this._audioCodec) {\n            if (this._audioCodec.indexOf('mp4a.40.5') !== -1) {\n                this._audioCodec = 'mp4a.40.2';\n            } else {\n                this._audioCodec = 'mp4a.40.5';\n            }\n            this._audioCodecSwap = true;\n            Log.i(this.tag, 'recover swap audio codec');\n            this._reload();\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n","/*\n * @Author: gengxing \n * @Date: 2020-06-09 11:45:18 \n * @Last Modified by:   gengxing \n * @Last Modified time: 2020-06-09 11:45:18 \n * 浏览器能力检测，是否支持flv播放\n */\nimport FetchLoader from '../io/fetch';\nimport { XHR, XHR_TYPE } from '../io/xhr';\n\nexport function isSupported(): boolean {\n    const mediaSource = (window as any).MediaSource || (window as any).WebKitMediaSource;\n    const sourceBuffer = (window as any).SourceBuffer || (window as any).WebKitSourceBuffer;\n    // 解码\n    const isTypeSupported: boolean =\n        mediaSource &&\n        typeof mediaSource.isTypeSupported === 'function' &&\n        mediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n\n    // MSE\n    const sourceBufferValidAPI =\n        !sourceBuffer ||\n        (sourceBuffer.prototype &&\n            typeof sourceBuffer.prototype.appendBuffer === 'function' &&\n            typeof sourceBuffer.prototype.remove === 'function');\n\n    // Loader\n    let streaming = FetchLoader.isSupport() || XHR.isSupportChunk() === XHR_TYPE.MOZ_CHUNK;\n    return isTypeSupported && sourceBufferValidAPI && streaming;\n}\n"],"sourceRoot":""}